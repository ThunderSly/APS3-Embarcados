
WIFI-simpleGet-EXT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009c60  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409c60  00409c60  00019c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  00409c68  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000c19c  204009d0  0040a638  000209d0  2**2
                  ALLOC
  4 .stack        00002004  2040cb6c  004167d4  000209d0  2**0
                  ALLOC
  5 .heap         00000200  2040eb70  004187d8  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   00037ebc  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00007141  00000000  00000000  00058913  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001670  00000000  00000000  0005fa54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00028ebd  00000000  00000000  000610c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001db55  00000000  00000000  00089f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009b551  00000000  00000000  000a7ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000136cf  00000000  00000000  00143027  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019a0  00000000  00000000  001566f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004790  00000000  00000000  00158098  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	70 eb 40 20 01 52 40 00 ff 51 40 00 ff 51 40 00     p.@ .R@..Q@..Q@.
  400010:	ff 51 40 00 ff 51 40 00 ff 51 40 00 00 00 00 00     .Q@..Q@..Q@.....
	...
  40002c:	b5 05 40 00 ff 51 40 00 00 00 00 00 11 06 40 00     ..@..Q@.......@.
  40003c:	79 06 40 00 ff 51 40 00 ff 51 40 00 ed 58 40 00     y.@..Q@..Q@..X@.
  40004c:	ff 51 40 00 ff 51 40 00 ff 51 40 00 ff 51 40 00     .Q@..Q@..Q@..Q@.
  40005c:	ff 51 40 00 ff 51 40 00 00 00 00 00 19 4d 40 00     .Q@..Q@......M@.
  40006c:	2d 4d 40 00 41 4d 40 00 ff 51 40 00 ff 51 40 00     -M@.AM@..Q@..Q@.
  40007c:	ff 51 40 00 55 4d 40 00 69 4d 40 00 ff 51 40 00     .Q@.UM@.iM@..Q@.
  40008c:	ff 51 40 00 ff 51 40 00 ff 51 40 00 ff 51 40 00     .Q@..Q@..Q@..Q@.
  40009c:	ff 51 40 00 ff 51 40 00 ff 51 40 00 ff 51 40 00     .Q@..Q@..Q@..Q@.
  4000ac:	ff 51 40 00 ff 51 40 00 21 04 40 00 ff 51 40 00     .Q@..Q@.!.@..Q@.
  4000bc:	ff 51 40 00 ff 51 40 00 ff 51 40 00 ff 51 40 00     .Q@..Q@..Q@..Q@.
  4000cc:	ff 51 40 00 00 00 00 00 ff 51 40 00 00 00 00 00     .Q@......Q@.....
  4000dc:	ff 51 40 00 35 04 40 00 ff 51 40 00 ff 51 40 00     .Q@.5.@..Q@..Q@.
  4000ec:	ff 51 40 00 ff 51 40 00 ff 51 40 00 ff 51 40 00     .Q@..Q@..Q@..Q@.
  4000fc:	ff 51 40 00 ff 51 40 00 ff 51 40 00 ff 51 40 00     .Q@..Q@..Q@..Q@.
  40010c:	ff 51 40 00 ff 51 40 00 00 00 00 00 00 00 00 00     .Q@..Q@.........
  40011c:	00 00 00 00 ff 51 40 00 ff 51 40 00 ff 51 40 00     .....Q@..Q@..Q@.
  40012c:	ff 51 40 00 ff 51 40 00 00 00 00 00 ff 51 40 00     .Q@..Q@......Q@.
  40013c:	ff 51 40 00                                         .Q@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	00409c68 	.word	0x00409c68

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00409c68 	.word	0x00409c68
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	00409c68 	.word	0x00409c68
  4001a8:	00000000 	.word	0x00000000

004001ac <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001ac:	b570      	push	{r4, r5, r6, lr}
  4001ae:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001b0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001b4:	4013      	ands	r3, r2
  4001b6:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001b8:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4001ba:	4e1c      	ldr	r6, [pc, #112]	; (40022c <afec_process_callback+0x80>)
  4001bc:	4d1c      	ldr	r5, [pc, #112]	; (400230 <afec_process_callback+0x84>)
  4001be:	42a8      	cmp	r0, r5
  4001c0:	bf14      	ite	ne
  4001c2:	2000      	movne	r0, #0
  4001c4:	2001      	moveq	r0, #1
  4001c6:	0105      	lsls	r5, r0, #4
  4001c8:	e00b      	b.n	4001e2 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4001ca:	2c0e      	cmp	r4, #14
  4001cc:	d81e      	bhi.n	40020c <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4001ce:	9a01      	ldr	r2, [sp, #4]
  4001d0:	f104 010c 	add.w	r1, r4, #12
  4001d4:	2301      	movs	r3, #1
  4001d6:	408b      	lsls	r3, r1
  4001d8:	4213      	tst	r3, r2
  4001da:	d110      	bne.n	4001fe <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001dc:	3401      	adds	r4, #1
  4001de:	2c10      	cmp	r4, #16
  4001e0:	d022      	beq.n	400228 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4001e2:	2c0b      	cmp	r4, #11
  4001e4:	d8f1      	bhi.n	4001ca <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4001e6:	9a01      	ldr	r2, [sp, #4]
  4001e8:	2301      	movs	r3, #1
  4001ea:	40a3      	lsls	r3, r4
  4001ec:	4213      	tst	r3, r2
  4001ee:	d0f5      	beq.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4001f0:	192b      	adds	r3, r5, r4
  4001f2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4001f6:	2b00      	cmp	r3, #0
  4001f8:	d0f0      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4001fa:	4798      	blx	r3
  4001fc:	e7ee      	b.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4001fe:	192b      	adds	r3, r5, r4
  400200:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400204:	2b00      	cmp	r3, #0
  400206:	d0e9      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400208:	4798      	blx	r3
  40020a:	e7e7      	b.n	4001dc <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  40020c:	9a01      	ldr	r2, [sp, #4]
  40020e:	f104 010f 	add.w	r1, r4, #15
  400212:	2301      	movs	r3, #1
  400214:	408b      	lsls	r3, r1
  400216:	4213      	tst	r3, r2
  400218:	d0e0      	beq.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40021a:	192b      	adds	r3, r5, r4
  40021c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400220:	2b00      	cmp	r3, #0
  400222:	d0db      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400224:	4798      	blx	r3
  400226:	e7d9      	b.n	4001dc <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400228:	b002      	add	sp, #8
  40022a:	bd70      	pop	{r4, r5, r6, pc}
  40022c:	2040c99c 	.word	0x2040c99c
  400230:	40064000 	.word	0x40064000

00400234 <afec_ch_set_config>:
{
  400234:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  400236:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400238:	2301      	movs	r3, #1
  40023a:	408b      	lsls	r3, r1
  40023c:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400240:	7815      	ldrb	r5, [r2, #0]
  400242:	2d00      	cmp	r5, #0
  400244:	bf08      	it	eq
  400246:	2300      	moveq	r3, #0
  400248:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  40024a:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  40024c:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  40024e:	004b      	lsls	r3, r1, #1
  400250:	2103      	movs	r1, #3
  400252:	4099      	lsls	r1, r3
  400254:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400258:	7851      	ldrb	r1, [r2, #1]
  40025a:	4099      	lsls	r1, r3
  40025c:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  40025e:	6541      	str	r1, [r0, #84]	; 0x54
}
  400260:	bc30      	pop	{r4, r5}
  400262:	4770      	bx	lr

00400264 <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  400264:	784b      	ldrb	r3, [r1, #1]
  400266:	780a      	ldrb	r2, [r1, #0]
  400268:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  40026a:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  40026c:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  40026e:	884b      	ldrh	r3, [r1, #2]
  400270:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400274:	6743      	str	r3, [r0, #116]	; 0x74
  400276:	4770      	bx	lr

00400278 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400278:	2200      	movs	r2, #0
  40027a:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  40027c:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <afec_get_config_defaults+0x28>)
  40027e:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400280:	4b08      	ldr	r3, [pc, #32]	; (4002a4 <afec_get_config_defaults+0x2c>)
  400282:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400284:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400288:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  40028a:	2302      	movs	r3, #2
  40028c:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  40028e:	2301      	movs	r3, #1
  400290:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  400292:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400294:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400296:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400298:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  40029a:	7583      	strb	r3, [r0, #22]
  40029c:	4770      	bx	lr
  40029e:	bf00      	nop
  4002a0:	11e1a300 	.word	0x11e1a300
  4002a4:	005b8d80 	.word	0x005b8d80

004002a8 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  4002a8:	2300      	movs	r3, #0
  4002aa:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  4002ac:	2301      	movs	r3, #1
  4002ae:	7043      	strb	r3, [r0, #1]
  4002b0:	4770      	bx	lr

004002b2 <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  4002b2:	2300      	movs	r3, #0
  4002b4:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  4002b6:	2320      	movs	r3, #32
  4002b8:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  4002ba:	23ff      	movs	r3, #255	; 0xff
  4002bc:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  4002be:	f640 73ff 	movw	r3, #4095	; 0xfff
  4002c2:	8083      	strh	r3, [r0, #4]
  4002c4:	4770      	bx	lr
	...

004002c8 <afec_init>:
	return afec->AFEC_ISR;
  4002c8:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  4002ca:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  4002ce:	d001      	beq.n	4002d4 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  4002d0:	2019      	movs	r0, #25
  4002d2:	4770      	bx	lr
{
  4002d4:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  4002d6:	2301      	movs	r3, #1
  4002d8:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002da:	7ccb      	ldrb	r3, [r1, #19]
  4002dc:	2b00      	cmp	r3, #0
  4002de:	bf18      	it	ne
  4002e0:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  4002e4:	684b      	ldr	r3, [r1, #4]
  4002e6:	688c      	ldr	r4, [r1, #8]
  4002e8:	fbb3 f3f4 	udiv	r3, r3, r4
  4002ec:	3b01      	subs	r3, #1
  4002ee:	021b      	lsls	r3, r3, #8
  4002f0:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002f2:	68cc      	ldr	r4, [r1, #12]
  4002f4:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  4002f8:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  4002fa:	7c0c      	ldrb	r4, [r1, #16]
  4002fc:	0624      	lsls	r4, r4, #24
  4002fe:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400302:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  400304:	7c4c      	ldrb	r4, [r1, #17]
  400306:	0724      	lsls	r4, r4, #28
  400308:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40030c:	4323      	orrs	r3, r4
  40030e:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  400310:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400312:	7d0b      	ldrb	r3, [r1, #20]
  400314:	2b00      	cmp	r3, #0
  400316:	bf14      	ite	ne
  400318:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  40031c:	2300      	moveq	r3, #0
  40031e:	680a      	ldr	r2, [r1, #0]
  400320:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  400322:	7d4a      	ldrb	r2, [r1, #21]
  400324:	2a00      	cmp	r2, #0
  400326:	bf14      	ite	ne
  400328:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  40032c:	2200      	moveq	r2, #0
			(config->resolution) |
  40032e:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400330:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400332:	7d8b      	ldrb	r3, [r1, #22]
  400334:	021b      	lsls	r3, r3, #8
  400336:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40033a:	f043 030c 	orr.w	r3, r3, #12
  40033e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  400342:	4b0f      	ldr	r3, [pc, #60]	; (400380 <afec_init+0xb8>)
  400344:	4298      	cmp	r0, r3
  400346:	d006      	beq.n	400356 <afec_init+0x8e>
	if(afec == AFEC1) {
  400348:	4b0e      	ldr	r3, [pc, #56]	; (400384 <afec_init+0xbc>)
  40034a:	4298      	cmp	r0, r3
  40034c:	d00d      	beq.n	40036a <afec_init+0xa2>
	return STATUS_OK;
  40034e:	2000      	movs	r0, #0
}
  400350:	f85d 4b04 	ldr.w	r4, [sp], #4
  400354:	4770      	bx	lr
  400356:	4b0c      	ldr	r3, [pc, #48]	; (400388 <afec_init+0xc0>)
  400358:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  40035c:	2200      	movs	r2, #0
  40035e:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400362:	428b      	cmp	r3, r1
  400364:	d1fb      	bne.n	40035e <afec_init+0x96>
	return STATUS_OK;
  400366:	2000      	movs	r0, #0
  400368:	e7f2      	b.n	400350 <afec_init+0x88>
  40036a:	4b08      	ldr	r3, [pc, #32]	; (40038c <afec_init+0xc4>)
  40036c:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  400370:	2200      	movs	r2, #0
  400372:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400376:	428b      	cmp	r3, r1
  400378:	d1fb      	bne.n	400372 <afec_init+0xaa>
	return STATUS_OK;
  40037a:	2000      	movs	r0, #0
  40037c:	e7e8      	b.n	400350 <afec_init+0x88>
  40037e:	bf00      	nop
  400380:	4003c000 	.word	0x4003c000
  400384:	40064000 	.word	0x40064000
  400388:	2040c998 	.word	0x2040c998
  40038c:	2040c9dc 	.word	0x2040c9dc

00400390 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400390:	4b0c      	ldr	r3, [pc, #48]	; (4003c4 <afec_enable_interrupt+0x34>)
  400392:	4299      	cmp	r1, r3
  400394:	d007      	beq.n	4003a6 <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400396:	290b      	cmp	r1, #11
  400398:	d80b      	bhi.n	4003b2 <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  40039a:	d006      	beq.n	4003aa <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  40039c:	2301      	movs	r3, #1
  40039e:	fa03 f101 	lsl.w	r1, r3, r1
  4003a2:	6241      	str	r1, [r0, #36]	; 0x24
  4003a4:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  4003a6:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  4003a8:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  4003aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4003ae:	6243      	str	r3, [r0, #36]	; 0x24
  4003b0:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  4003b2:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  4003b4:	bf94      	ite	ls
  4003b6:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  4003b8:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  4003ba:	2301      	movs	r3, #1
  4003bc:	fa03 f101 	lsl.w	r1, r3, r1
  4003c0:	6241      	str	r1, [r0, #36]	; 0x24
  4003c2:	4770      	bx	lr
  4003c4:	47000fff 	.word	0x47000fff

004003c8 <afec_set_callback>:
{
  4003c8:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  4003ca:	4c11      	ldr	r4, [pc, #68]	; (400410 <afec_set_callback+0x48>)
  4003cc:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  4003ce:	bf0c      	ite	eq
  4003d0:	2410      	moveq	r4, #16
  4003d2:	2400      	movne	r4, #0
  4003d4:	440c      	add	r4, r1
  4003d6:	4d0f      	ldr	r5, [pc, #60]	; (400414 <afec_set_callback+0x4c>)
  4003d8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  4003dc:	d10a      	bne.n	4003f4 <afec_set_callback+0x2c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4003de:	4a0e      	ldr	r2, [pc, #56]	; (400418 <afec_set_callback+0x50>)
  4003e0:	f44f 7480 	mov.w	r4, #256	; 0x100
  4003e4:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4003e8:	015b      	lsls	r3, r3, #5
  4003ea:	b2db      	uxtb	r3, r3
  4003ec:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4003f0:	6054      	str	r4, [r2, #4]
  4003f2:	e009      	b.n	400408 <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4003f4:	4a08      	ldr	r2, [pc, #32]	; (400418 <afec_set_callback+0x50>)
  4003f6:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  4003fa:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4003fe:	015b      	lsls	r3, r3, #5
  400400:	b2db      	uxtb	r3, r3
  400402:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400406:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  400408:	4b04      	ldr	r3, [pc, #16]	; (40041c <afec_set_callback+0x54>)
  40040a:	4798      	blx	r3
  40040c:	bd38      	pop	{r3, r4, r5, pc}
  40040e:	bf00      	nop
  400410:	40064000 	.word	0x40064000
  400414:	2040c99c 	.word	0x2040c99c
  400418:	e000e100 	.word	0xe000e100
  40041c:	00400391 	.word	0x00400391

00400420 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400420:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400422:	4802      	ldr	r0, [pc, #8]	; (40042c <AFEC0_Handler+0xc>)
  400424:	4b02      	ldr	r3, [pc, #8]	; (400430 <AFEC0_Handler+0x10>)
  400426:	4798      	blx	r3
  400428:	bd08      	pop	{r3, pc}
  40042a:	bf00      	nop
  40042c:	4003c000 	.word	0x4003c000
  400430:	004001ad 	.word	0x004001ad

00400434 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400434:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400436:	4802      	ldr	r0, [pc, #8]	; (400440 <AFEC1_Handler+0xc>)
  400438:	4b02      	ldr	r3, [pc, #8]	; (400444 <AFEC1_Handler+0x10>)
  40043a:	4798      	blx	r3
  40043c:	bd08      	pop	{r3, pc}
  40043e:	bf00      	nop
  400440:	40064000 	.word	0x40064000
  400444:	004001ad 	.word	0x004001ad

00400448 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400448:	b500      	push	{lr}
  40044a:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  40044c:	4b13      	ldr	r3, [pc, #76]	; (40049c <afec_enable+0x54>)
  40044e:	4298      	cmp	r0, r3
  400450:	bf0c      	ite	eq
  400452:	2028      	moveq	r0, #40	; 0x28
  400454:	201d      	movne	r0, #29
  400456:	4b12      	ldr	r3, [pc, #72]	; (4004a0 <afec_enable+0x58>)
  400458:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40045a:	4b12      	ldr	r3, [pc, #72]	; (4004a4 <afec_enable+0x5c>)
  40045c:	789b      	ldrb	r3, [r3, #2]
  40045e:	2bff      	cmp	r3, #255	; 0xff
  400460:	d01a      	beq.n	400498 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400462:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400466:	fab3 f383 	clz	r3, r3
  40046a:	095b      	lsrs	r3, r3, #5
  40046c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40046e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400470:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400474:	2200      	movs	r2, #0
  400476:	4b0c      	ldr	r3, [pc, #48]	; (4004a8 <afec_enable+0x60>)
  400478:	701a      	strb	r2, [r3, #0]
	return flags;
  40047a:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  40047c:	4a09      	ldr	r2, [pc, #36]	; (4004a4 <afec_enable+0x5c>)
  40047e:	7893      	ldrb	r3, [r2, #2]
  400480:	3301      	adds	r3, #1
  400482:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400484:	b129      	cbz	r1, 400492 <afec_enable+0x4a>
		cpu_irq_enable();
  400486:	2201      	movs	r2, #1
  400488:	4b07      	ldr	r3, [pc, #28]	; (4004a8 <afec_enable+0x60>)
  40048a:	701a      	strb	r2, [r3, #0]
  40048c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400490:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400492:	b003      	add	sp, #12
  400494:	f85d fb04 	ldr.w	pc, [sp], #4
  400498:	e7fe      	b.n	400498 <afec_enable+0x50>
  40049a:	bf00      	nop
  40049c:	40064000 	.word	0x40064000
  4004a0:	00404f21 	.word	0x00404f21
  4004a4:	2040c994 	.word	0x2040c994
  4004a8:	20400018 	.word	0x20400018

004004ac <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  4004ac:	6980      	ldr	r0, [r0, #24]
}
  4004ae:	4770      	bx	lr

004004b0 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  4004b0:	61c1      	str	r1, [r0, #28]
  4004b2:	4770      	bx	lr

004004b4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4004b4:	f100 0308 	add.w	r3, r0, #8
  4004b8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  4004ba:	f04f 32ff 	mov.w	r2, #4294967295
  4004be:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4004c0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4004c2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  4004c4:	2300      	movs	r3, #0
  4004c6:	6003      	str	r3, [r0, #0]
  4004c8:	4770      	bx	lr

004004ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  4004ca:	2300      	movs	r3, #0
  4004cc:	6103      	str	r3, [r0, #16]
  4004ce:	4770      	bx	lr

004004d0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  4004d0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  4004d2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  4004d4:	689a      	ldr	r2, [r3, #8]
  4004d6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  4004d8:	689a      	ldr	r2, [r3, #8]
  4004da:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  4004dc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4004de:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4004e0:	6803      	ldr	r3, [r0, #0]
  4004e2:	3301      	adds	r3, #1
  4004e4:	6003      	str	r3, [r0, #0]
  4004e6:	4770      	bx	lr

004004e8 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  4004e8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4004ea:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4004ec:	f1b5 3fff 	cmp.w	r5, #4294967295
  4004f0:	d002      	beq.n	4004f8 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4004f2:	f100 0208 	add.w	r2, r0, #8
  4004f6:	e002      	b.n	4004fe <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4004f8:	6902      	ldr	r2, [r0, #16]
  4004fa:	e004      	b.n	400506 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4004fc:	461a      	mov	r2, r3
  4004fe:	6853      	ldr	r3, [r2, #4]
  400500:	681c      	ldr	r4, [r3, #0]
  400502:	42a5      	cmp	r5, r4
  400504:	d2fa      	bcs.n	4004fc <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400506:	6853      	ldr	r3, [r2, #4]
  400508:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  40050a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  40050c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  40050e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400510:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400512:	6803      	ldr	r3, [r0, #0]
  400514:	3301      	adds	r3, #1
  400516:	6003      	str	r3, [r0, #0]
}
  400518:	bc30      	pop	{r4, r5}
  40051a:	4770      	bx	lr

0040051c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  40051c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  40051e:	6842      	ldr	r2, [r0, #4]
  400520:	6881      	ldr	r1, [r0, #8]
  400522:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400524:	6882      	ldr	r2, [r0, #8]
  400526:	6841      	ldr	r1, [r0, #4]
  400528:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  40052a:	685a      	ldr	r2, [r3, #4]
  40052c:	4290      	cmp	r0, r2
  40052e:	d005      	beq.n	40053c <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400530:	2200      	movs	r2, #0
  400532:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400534:	6818      	ldr	r0, [r3, #0]
  400536:	3801      	subs	r0, #1
  400538:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  40053a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  40053c:	6882      	ldr	r2, [r0, #8]
  40053e:	605a      	str	r2, [r3, #4]
  400540:	e7f6      	b.n	400530 <uxListRemove+0x14>

00400542 <prvTaskExitError>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400542:	f04f 0380 	mov.w	r3, #128	; 0x80
  400546:	b672      	cpsid	i
  400548:	f383 8811 	msr	BASEPRI, r3
  40054c:	f3bf 8f6f 	isb	sy
  400550:	f3bf 8f4f 	dsb	sy
  400554:	b662      	cpsie	i
  400556:	e7fe      	b.n	400556 <prvTaskExitError+0x14>

00400558 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400558:	4806      	ldr	r0, [pc, #24]	; (400574 <prvPortStartFirstTask+0x1c>)
  40055a:	6800      	ldr	r0, [r0, #0]
  40055c:	6800      	ldr	r0, [r0, #0]
  40055e:	f380 8808 	msr	MSP, r0
  400562:	b662      	cpsie	i
  400564:	b661      	cpsie	f
  400566:	f3bf 8f4f 	dsb	sy
  40056a:	f3bf 8f6f 	isb	sy
  40056e:	df00      	svc	0
  400570:	bf00      	nop
  400572:	0000      	.short	0x0000
  400574:	e000ed08 	.word	0xe000ed08

00400578 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400578:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400588 <vPortEnableVFP+0x10>
  40057c:	6801      	ldr	r1, [r0, #0]
  40057e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400582:	6001      	str	r1, [r0, #0]
  400584:	4770      	bx	lr
  400586:	0000      	.short	0x0000
  400588:	e000ed88 	.word	0xe000ed88

0040058c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  40058c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400590:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400594:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400598:	4b05      	ldr	r3, [pc, #20]	; (4005b0 <pxPortInitialiseStack+0x24>)
  40059a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40059e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  4005a2:	f06f 0302 	mvn.w	r3, #2
  4005a6:	f840 3c24 	str.w	r3, [r0, #-36]
}
  4005aa:	3844      	subs	r0, #68	; 0x44
  4005ac:	4770      	bx	lr
  4005ae:	bf00      	nop
  4005b0:	00400543 	.word	0x00400543

004005b4 <SVC_Handler>:
	__asm volatile (
  4005b4:	4b06      	ldr	r3, [pc, #24]	; (4005d0 <pxCurrentTCBConst2>)
  4005b6:	6819      	ldr	r1, [r3, #0]
  4005b8:	6808      	ldr	r0, [r1, #0]
  4005ba:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005be:	f380 8809 	msr	PSP, r0
  4005c2:	f3bf 8f6f 	isb	sy
  4005c6:	f04f 0000 	mov.w	r0, #0
  4005ca:	f380 8811 	msr	BASEPRI, r0
  4005ce:	4770      	bx	lr

004005d0 <pxCurrentTCBConst2>:
  4005d0:	2040c1f4 	.word	0x2040c1f4
  4005d4:	4770      	bx	lr
  4005d6:	bf00      	nop

004005d8 <vPortEnterCritical>:
  4005d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4005dc:	b672      	cpsid	i
  4005de:	f383 8811 	msr	BASEPRI, r3
  4005e2:	f3bf 8f6f 	isb	sy
  4005e6:	f3bf 8f4f 	dsb	sy
  4005ea:	b662      	cpsie	i
	uxCriticalNesting++;
  4005ec:	4a02      	ldr	r2, [pc, #8]	; (4005f8 <vPortEnterCritical+0x20>)
  4005ee:	6813      	ldr	r3, [r2, #0]
  4005f0:	3301      	adds	r3, #1
  4005f2:	6013      	str	r3, [r2, #0]
  4005f4:	4770      	bx	lr
  4005f6:	bf00      	nop
  4005f8:	2040000c 	.word	0x2040000c

004005fc <vPortExitCritical>:
	uxCriticalNesting--;
  4005fc:	4a03      	ldr	r2, [pc, #12]	; (40060c <vPortExitCritical+0x10>)
  4005fe:	6813      	ldr	r3, [r2, #0]
  400600:	3b01      	subs	r3, #1
  400602:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400604:	b90b      	cbnz	r3, 40060a <vPortExitCritical+0xe>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400606:	f383 8811 	msr	BASEPRI, r3
  40060a:	4770      	bx	lr
  40060c:	2040000c 	.word	0x2040000c

00400610 <PendSV_Handler>:
	__asm volatile
  400610:	f3ef 8009 	mrs	r0, PSP
  400614:	f3bf 8f6f 	isb	sy
  400618:	4b15      	ldr	r3, [pc, #84]	; (400670 <pxCurrentTCBConst>)
  40061a:	681a      	ldr	r2, [r3, #0]
  40061c:	f01e 0f10 	tst.w	lr, #16
  400620:	bf08      	it	eq
  400622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40062a:	6010      	str	r0, [r2, #0]
  40062c:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400630:	f04f 0080 	mov.w	r0, #128	; 0x80
  400634:	b672      	cpsid	i
  400636:	f380 8811 	msr	BASEPRI, r0
  40063a:	f3bf 8f4f 	dsb	sy
  40063e:	f3bf 8f6f 	isb	sy
  400642:	b662      	cpsie	i
  400644:	f000 ff46 	bl	4014d4 <vTaskSwitchContext>
  400648:	f04f 0000 	mov.w	r0, #0
  40064c:	f380 8811 	msr	BASEPRI, r0
  400650:	bc08      	pop	{r3}
  400652:	6819      	ldr	r1, [r3, #0]
  400654:	6808      	ldr	r0, [r1, #0]
  400656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40065a:	f01e 0f10 	tst.w	lr, #16
  40065e:	bf08      	it	eq
  400660:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400664:	f380 8809 	msr	PSP, r0
  400668:	f3bf 8f6f 	isb	sy
  40066c:	4770      	bx	lr
  40066e:	bf00      	nop

00400670 <pxCurrentTCBConst>:
  400670:	2040c1f4 	.word	0x2040c1f4
  400674:	4770      	bx	lr
  400676:	bf00      	nop

00400678 <SysTick_Handler>:
{
  400678:	b508      	push	{r3, lr}
	__asm volatile
  40067a:	f3ef 8311 	mrs	r3, BASEPRI
  40067e:	f04f 0280 	mov.w	r2, #128	; 0x80
  400682:	b672      	cpsid	i
  400684:	f382 8811 	msr	BASEPRI, r2
  400688:	f3bf 8f6f 	isb	sy
  40068c:	f3bf 8f4f 	dsb	sy
  400690:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  400692:	4b05      	ldr	r3, [pc, #20]	; (4006a8 <SysTick_Handler+0x30>)
  400694:	4798      	blx	r3
  400696:	b118      	cbz	r0, 4006a0 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40069c:	4b03      	ldr	r3, [pc, #12]	; (4006ac <SysTick_Handler+0x34>)
  40069e:	601a      	str	r2, [r3, #0]
	__asm volatile
  4006a0:	2300      	movs	r3, #0
  4006a2:	f383 8811 	msr	BASEPRI, r3
  4006a6:	bd08      	pop	{r3, pc}
  4006a8:	00401195 	.word	0x00401195
  4006ac:	e000ed04 	.word	0xe000ed04

004006b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4006b0:	4a03      	ldr	r2, [pc, #12]	; (4006c0 <vPortSetupTimerInterrupt+0x10>)
  4006b2:	4b04      	ldr	r3, [pc, #16]	; (4006c4 <vPortSetupTimerInterrupt+0x14>)
  4006b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4006b6:	2207      	movs	r2, #7
  4006b8:	3b04      	subs	r3, #4
  4006ba:	601a      	str	r2, [r3, #0]
  4006bc:	4770      	bx	lr
  4006be:	bf00      	nop
  4006c0:	000927bf 	.word	0x000927bf
  4006c4:	e000e014 	.word	0xe000e014

004006c8 <xPortStartScheduler>:
{
  4006c8:	b508      	push	{r3, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4006ca:	4b0c      	ldr	r3, [pc, #48]	; (4006fc <xPortStartScheduler+0x34>)
  4006cc:	681a      	ldr	r2, [r3, #0]
  4006ce:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4006d2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4006d4:	681a      	ldr	r2, [r3, #0]
  4006d6:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4006da:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4006dc:	4b08      	ldr	r3, [pc, #32]	; (400700 <xPortStartScheduler+0x38>)
  4006de:	4798      	blx	r3
	uxCriticalNesting = 0;
  4006e0:	2200      	movs	r2, #0
  4006e2:	4b08      	ldr	r3, [pc, #32]	; (400704 <xPortStartScheduler+0x3c>)
  4006e4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  4006e6:	4b08      	ldr	r3, [pc, #32]	; (400708 <xPortStartScheduler+0x40>)
  4006e8:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4006ea:	4a08      	ldr	r2, [pc, #32]	; (40070c <xPortStartScheduler+0x44>)
  4006ec:	6813      	ldr	r3, [r2, #0]
  4006ee:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4006f2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4006f4:	4b06      	ldr	r3, [pc, #24]	; (400710 <xPortStartScheduler+0x48>)
  4006f6:	4798      	blx	r3
	prvTaskExitError();
  4006f8:	4b06      	ldr	r3, [pc, #24]	; (400714 <xPortStartScheduler+0x4c>)
  4006fa:	4798      	blx	r3
  4006fc:	e000ed20 	.word	0xe000ed20
  400700:	004006b1 	.word	0x004006b1
  400704:	2040000c 	.word	0x2040000c
  400708:	00400579 	.word	0x00400579
  40070c:	e000ef34 	.word	0xe000ef34
  400710:	00400559 	.word	0x00400559
  400714:	00400543 	.word	0x00400543

00400718 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400718:	b538      	push	{r3, r4, r5, lr}
  40071a:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  40071c:	f010 0f07 	tst.w	r0, #7
  400720:	d002      	beq.n	400728 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  400722:	f020 0407 	bic.w	r4, r0, #7
  400726:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  400728:	4b11      	ldr	r3, [pc, #68]	; (400770 <pvPortMalloc+0x58>)
  40072a:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  40072c:	4b11      	ldr	r3, [pc, #68]	; (400774 <pvPortMalloc+0x5c>)
  40072e:	681b      	ldr	r3, [r3, #0]
  400730:	b193      	cbz	r3, 400758 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  400732:	4b11      	ldr	r3, [pc, #68]	; (400778 <pvPortMalloc+0x60>)
  400734:	681b      	ldr	r3, [r3, #0]
  400736:	441c      	add	r4, r3
  400738:	42a3      	cmp	r3, r4
  40073a:	d213      	bcs.n	400764 <pvPortMalloc+0x4c>
  40073c:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  400740:	4294      	cmp	r4, r2
  400742:	d80f      	bhi.n	400764 <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  400744:	4a0b      	ldr	r2, [pc, #44]	; (400774 <pvPortMalloc+0x5c>)
  400746:	6815      	ldr	r5, [r2, #0]
  400748:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  40074a:	4b0b      	ldr	r3, [pc, #44]	; (400778 <pvPortMalloc+0x60>)
  40074c:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  40074e:	4b0b      	ldr	r3, [pc, #44]	; (40077c <pvPortMalloc+0x64>)
  400750:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  400752:	b14d      	cbz	r5, 400768 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  400754:	4628      	mov	r0, r5
  400756:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  400758:	4b09      	ldr	r3, [pc, #36]	; (400780 <pvPortMalloc+0x68>)
  40075a:	f023 0307 	bic.w	r3, r3, #7
  40075e:	4a05      	ldr	r2, [pc, #20]	; (400774 <pvPortMalloc+0x5c>)
  400760:	6013      	str	r3, [r2, #0]
  400762:	e7e6      	b.n	400732 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  400764:	4b05      	ldr	r3, [pc, #20]	; (40077c <pvPortMalloc+0x64>)
  400766:	4798      	blx	r3
			vApplicationMallocFailedHook();
  400768:	4b06      	ldr	r3, [pc, #24]	; (400784 <pvPortMalloc+0x6c>)
  40076a:	4798      	blx	r3
  40076c:	2500      	movs	r5, #0
	return pvReturn;
  40076e:	e7f1      	b.n	400754 <pvPortMalloc+0x3c>
  400770:	00401179 	.word	0x00401179
  400774:	204009ec 	.word	0x204009ec
  400778:	2040c1f0 	.word	0x2040c1f0
  40077c:	004012cd 	.word	0x004012cd
  400780:	204009f8 	.word	0x204009f8
  400784:	004058eb 	.word	0x004058eb

00400788 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  400788:	4770      	bx	lr
	...

0040078c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  40078c:	b538      	push	{r3, r4, r5, lr}
  40078e:	4604      	mov	r4, r0
  400790:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400792:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400794:	b962      	cbnz	r2, 4007b0 <prvCopyDataToQueue+0x24>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400796:	6803      	ldr	r3, [r0, #0]
  400798:	b123      	cbz	r3, 4007a4 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
  40079a:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  40079c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40079e:	3301      	adds	r3, #1
  4007a0:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  4007a2:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4007a4:	6840      	ldr	r0, [r0, #4]
  4007a6:	4b18      	ldr	r3, [pc, #96]	; (400808 <prvCopyDataToQueue+0x7c>)
  4007a8:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4007aa:	2300      	movs	r3, #0
  4007ac:	6063      	str	r3, [r4, #4]
  4007ae:	e7f5      	b.n	40079c <prvCopyDataToQueue+0x10>
	else if( xPosition == queueSEND_TO_BACK )
  4007b0:	b96d      	cbnz	r5, 4007ce <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4007b2:	6880      	ldr	r0, [r0, #8]
  4007b4:	4b15      	ldr	r3, [pc, #84]	; (40080c <prvCopyDataToQueue+0x80>)
  4007b6:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4007b8:	68a3      	ldr	r3, [r4, #8]
  4007ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4007bc:	4413      	add	r3, r2
  4007be:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4007c0:	6862      	ldr	r2, [r4, #4]
  4007c2:	4293      	cmp	r3, r2
  4007c4:	d31c      	bcc.n	400800 <prvCopyDataToQueue+0x74>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4007c6:	6823      	ldr	r3, [r4, #0]
  4007c8:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  4007ca:	2000      	movs	r0, #0
  4007cc:	e7e6      	b.n	40079c <prvCopyDataToQueue+0x10>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4007ce:	68c0      	ldr	r0, [r0, #12]
  4007d0:	4b0e      	ldr	r3, [pc, #56]	; (40080c <prvCopyDataToQueue+0x80>)
  4007d2:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4007d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4007d6:	4252      	negs	r2, r2
  4007d8:	68e3      	ldr	r3, [r4, #12]
  4007da:	4413      	add	r3, r2
  4007dc:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4007de:	6821      	ldr	r1, [r4, #0]
  4007e0:	428b      	cmp	r3, r1
  4007e2:	d202      	bcs.n	4007ea <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4007e4:	6863      	ldr	r3, [r4, #4]
  4007e6:	441a      	add	r2, r3
  4007e8:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
  4007ea:	2d02      	cmp	r5, #2
  4007ec:	d001      	beq.n	4007f2 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
  4007ee:	2000      	movs	r0, #0
  4007f0:	e7d4      	b.n	40079c <prvCopyDataToQueue+0x10>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4007f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4007f4:	b133      	cbz	r3, 400804 <prvCopyDataToQueue+0x78>
				--( pxQueue->uxMessagesWaiting );
  4007f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4007f8:	3b01      	subs	r3, #1
  4007fa:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  4007fc:	2000      	movs	r0, #0
  4007fe:	e7cd      	b.n	40079c <prvCopyDataToQueue+0x10>
  400800:	2000      	movs	r0, #0
  400802:	e7cb      	b.n	40079c <prvCopyDataToQueue+0x10>
  400804:	2000      	movs	r0, #0
  400806:	e7c9      	b.n	40079c <prvCopyDataToQueue+0x10>
  400808:	00401825 	.word	0x00401825
  40080c:	00405ca1 	.word	0x00405ca1

00400810 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  400810:	b530      	push	{r4, r5, lr}
  400812:	b083      	sub	sp, #12
  400814:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400816:	6d44      	ldr	r4, [r0, #84]	; 0x54
		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400818:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40081a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40081c:	429a      	cmp	r2, r3
  40081e:	d303      	bcc.n	400828 <prvNotifyQueueSetContainer+0x18>
	BaseType_t xReturn = pdFALSE;
  400820:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400822:	4628      	mov	r0, r5
  400824:	b003      	add	sp, #12
  400826:	bd30      	pop	{r4, r5, pc}
  400828:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  40082a:	a901      	add	r1, sp, #4
  40082c:	4620      	mov	r0, r4
  40082e:	4b0b      	ldr	r3, [pc, #44]	; (40085c <prvNotifyQueueSetContainer+0x4c>)
  400830:	4798      	blx	r3
  400832:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  400834:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400836:	f1b3 3fff 	cmp.w	r3, #4294967295
  40083a:	d003      	beq.n	400844 <prvNotifyQueueSetContainer+0x34>
				( pxQueueSetContainer->xTxLock )++;
  40083c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40083e:	3301      	adds	r3, #1
  400840:	64a3      	str	r3, [r4, #72]	; 0x48
  400842:	e7ee      	b.n	400822 <prvNotifyQueueSetContainer+0x12>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400844:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400846:	2b00      	cmp	r3, #0
  400848:	d0eb      	beq.n	400822 <prvNotifyQueueSetContainer+0x12>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  40084a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40084e:	4b04      	ldr	r3, [pc, #16]	; (400860 <prvNotifyQueueSetContainer+0x50>)
  400850:	4798      	blx	r3
  400852:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  400854:	bf18      	it	ne
  400856:	2501      	movne	r5, #1
  400858:	e7e3      	b.n	400822 <prvNotifyQueueSetContainer+0x12>
  40085a:	bf00      	nop
  40085c:	0040078d 	.word	0x0040078d
  400860:	00401659 	.word	0x00401659

00400864 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400864:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400866:	b172      	cbz	r2, 400886 <prvCopyDataFromQueue+0x22>
{
  400868:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  40086a:	68c3      	ldr	r3, [r0, #12]
  40086c:	4413      	add	r3, r2
  40086e:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400870:	6844      	ldr	r4, [r0, #4]
  400872:	42a3      	cmp	r3, r4
  400874:	d301      	bcc.n	40087a <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  400876:	6803      	ldr	r3, [r0, #0]
  400878:	60c3      	str	r3, [r0, #12]
  40087a:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  40087c:	68c1      	ldr	r1, [r0, #12]
  40087e:	4620      	mov	r0, r4
  400880:	4b01      	ldr	r3, [pc, #4]	; (400888 <prvCopyDataFromQueue+0x24>)
  400882:	4798      	blx	r3
  400884:	bd10      	pop	{r4, pc}
  400886:	4770      	bx	lr
  400888:	00405ca1 	.word	0x00405ca1

0040088c <prvUnlockQueue>:
{
  40088c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40088e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  400890:	4b22      	ldr	r3, [pc, #136]	; (40091c <prvUnlockQueue+0x90>)
  400892:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400894:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400896:	2b00      	cmp	r3, #0
  400898:	dd1b      	ble.n	4008d2 <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40089a:	4d21      	ldr	r5, [pc, #132]	; (400920 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  40089c:	4f21      	ldr	r7, [pc, #132]	; (400924 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40089e:	4e22      	ldr	r6, [pc, #136]	; (400928 <prvUnlockQueue+0x9c>)
  4008a0:	e00b      	b.n	4008ba <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4008a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4008a4:	b1ab      	cbz	r3, 4008d2 <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4008a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4008aa:	47b0      	blx	r6
  4008ac:	b978      	cbnz	r0, 4008ce <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  4008ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4008b0:	3b01      	subs	r3, #1
  4008b2:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4008b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4008b6:	2b00      	cmp	r3, #0
  4008b8:	dd0b      	ble.n	4008d2 <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  4008ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4008bc:	2b00      	cmp	r3, #0
  4008be:	d0f0      	beq.n	4008a2 <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4008c0:	2100      	movs	r1, #0
  4008c2:	4620      	mov	r0, r4
  4008c4:	47a8      	blx	r5
  4008c6:	2801      	cmp	r0, #1
  4008c8:	d1f1      	bne.n	4008ae <prvUnlockQueue+0x22>
						vTaskMissedYield();
  4008ca:	47b8      	blx	r7
  4008cc:	e7ef      	b.n	4008ae <prvUnlockQueue+0x22>
							vTaskMissedYield();
  4008ce:	47b8      	blx	r7
  4008d0:	e7ed      	b.n	4008ae <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  4008d2:	f04f 33ff 	mov.w	r3, #4294967295
  4008d6:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  4008d8:	4b14      	ldr	r3, [pc, #80]	; (40092c <prvUnlockQueue+0xa0>)
  4008da:	4798      	blx	r3
	taskENTER_CRITICAL();
  4008dc:	4b0f      	ldr	r3, [pc, #60]	; (40091c <prvUnlockQueue+0x90>)
  4008de:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4008e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4008e2:	2b00      	cmp	r3, #0
  4008e4:	dd14      	ble.n	400910 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4008e6:	6923      	ldr	r3, [r4, #16]
  4008e8:	b193      	cbz	r3, 400910 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4008ea:	f104 0610 	add.w	r6, r4, #16
  4008ee:	4d0e      	ldr	r5, [pc, #56]	; (400928 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  4008f0:	4f0c      	ldr	r7, [pc, #48]	; (400924 <prvUnlockQueue+0x98>)
  4008f2:	e007      	b.n	400904 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  4008f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4008f6:	3b01      	subs	r3, #1
  4008f8:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4008fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4008fc:	2b00      	cmp	r3, #0
  4008fe:	dd07      	ble.n	400910 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400900:	6923      	ldr	r3, [r4, #16]
  400902:	b12b      	cbz	r3, 400910 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400904:	4630      	mov	r0, r6
  400906:	47a8      	blx	r5
  400908:	2800      	cmp	r0, #0
  40090a:	d0f3      	beq.n	4008f4 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  40090c:	47b8      	blx	r7
  40090e:	e7f1      	b.n	4008f4 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  400910:	f04f 33ff 	mov.w	r3, #4294967295
  400914:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  400916:	4b05      	ldr	r3, [pc, #20]	; (40092c <prvUnlockQueue+0xa0>)
  400918:	4798      	blx	r3
  40091a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40091c:	004005d9 	.word	0x004005d9
  400920:	00400811 	.word	0x00400811
  400924:	00401755 	.word	0x00401755
  400928:	00401659 	.word	0x00401659
  40092c:	004005fd 	.word	0x004005fd

00400930 <xQueueGenericReset>:
{
  400930:	b538      	push	{r3, r4, r5, lr}
  400932:	4604      	mov	r4, r0
  400934:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  400936:	4b18      	ldr	r3, [pc, #96]	; (400998 <xQueueGenericReset+0x68>)
  400938:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  40093a:	6822      	ldr	r2, [r4, #0]
  40093c:	6c21      	ldr	r1, [r4, #64]	; 0x40
  40093e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400940:	fb03 f301 	mul.w	r3, r3, r1
  400944:	18d0      	adds	r0, r2, r3
  400946:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400948:	2000      	movs	r0, #0
  40094a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  40094c:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  40094e:	1a5b      	subs	r3, r3, r1
  400950:	4413      	add	r3, r2
  400952:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  400954:	f04f 33ff 	mov.w	r3, #4294967295
  400958:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  40095a:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  40095c:	b9a5      	cbnz	r5, 400988 <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40095e:	6923      	ldr	r3, [r4, #16]
  400960:	b91b      	cbnz	r3, 40096a <xQueueGenericReset+0x3a>
	taskEXIT_CRITICAL();
  400962:	4b0e      	ldr	r3, [pc, #56]	; (40099c <xQueueGenericReset+0x6c>)
  400964:	4798      	blx	r3
}
  400966:	2001      	movs	r0, #1
  400968:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40096a:	f104 0010 	add.w	r0, r4, #16
  40096e:	4b0c      	ldr	r3, [pc, #48]	; (4009a0 <xQueueGenericReset+0x70>)
  400970:	4798      	blx	r3
  400972:	2801      	cmp	r0, #1
  400974:	d1f5      	bne.n	400962 <xQueueGenericReset+0x32>
					queueYIELD_IF_USING_PREEMPTION();
  400976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40097a:	4b0a      	ldr	r3, [pc, #40]	; (4009a4 <xQueueGenericReset+0x74>)
  40097c:	601a      	str	r2, [r3, #0]
  40097e:	f3bf 8f4f 	dsb	sy
  400982:	f3bf 8f6f 	isb	sy
  400986:	e7ec      	b.n	400962 <xQueueGenericReset+0x32>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400988:	f104 0010 	add.w	r0, r4, #16
  40098c:	4d06      	ldr	r5, [pc, #24]	; (4009a8 <xQueueGenericReset+0x78>)
  40098e:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400990:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400994:	47a8      	blx	r5
  400996:	e7e4      	b.n	400962 <xQueueGenericReset+0x32>
  400998:	004005d9 	.word	0x004005d9
  40099c:	004005fd 	.word	0x004005fd
  4009a0:	00401659 	.word	0x00401659
  4009a4:	e000ed04 	.word	0xe000ed04
  4009a8:	004004b5 	.word	0x004004b5

004009ac <xQueueGenericCreate>:
{
  4009ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4009ae:	4605      	mov	r5, r0
  4009b0:	4617      	mov	r7, r2
	if( uxItemSize == ( UBaseType_t ) 0 )
  4009b2:	460e      	mov	r6, r1
  4009b4:	b159      	cbz	r1, 4009ce <xQueueGenericCreate+0x22>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4009b6:	fb00 f001 	mul.w	r0, r0, r1
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4009ba:	3059      	adds	r0, #89	; 0x59
  4009bc:	4b0d      	ldr	r3, [pc, #52]	; (4009f4 <xQueueGenericCreate+0x48>)
  4009be:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4009c0:	4604      	mov	r4, r0
  4009c2:	b118      	cbz	r0, 4009cc <xQueueGenericCreate+0x20>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  4009c4:	f100 0358 	add.w	r3, r0, #88	; 0x58
  4009c8:	6003      	str	r3, [r0, #0]
  4009ca:	e006      	b.n	4009da <xQueueGenericCreate+0x2e>
  4009cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4009ce:	2058      	movs	r0, #88	; 0x58
  4009d0:	4b08      	ldr	r3, [pc, #32]	; (4009f4 <xQueueGenericCreate+0x48>)
  4009d2:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4009d4:	4604      	mov	r4, r0
  4009d6:	b160      	cbz	r0, 4009f2 <xQueueGenericCreate+0x46>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  4009d8:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  4009da:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  4009dc:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  4009de:	2101      	movs	r1, #1
  4009e0:	4620      	mov	r0, r4
  4009e2:	4b05      	ldr	r3, [pc, #20]	; (4009f8 <xQueueGenericCreate+0x4c>)
  4009e4:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  4009e6:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  4009ea:	2300      	movs	r3, #0
  4009ec:	6563      	str	r3, [r4, #84]	; 0x54
  4009ee:	4620      	mov	r0, r4
	return xReturn;
  4009f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
  4009f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4009f4:	00400719 	.word	0x00400719
  4009f8:	00400931 	.word	0x00400931

004009fc <xQueueGenericSend>:
{
  4009fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400a00:	b085      	sub	sp, #20
  400a02:	4604      	mov	r4, r0
  400a04:	468a      	mov	sl, r1
  400a06:	9201      	str	r2, [sp, #4]
  400a08:	461f      	mov	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
  400a0a:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  400a0c:	4d4a      	ldr	r5, [pc, #296]	; (400b38 <xQueueGenericSend+0x13c>)
					vTaskSetTimeOutState( &xTimeOut );
  400a0e:	f8df 8154 	ldr.w	r8, [pc, #340]	; 400b64 <xQueueGenericSend+0x168>
					portYIELD_WITHIN_API();
  400a12:	f8df 9134 	ldr.w	r9, [pc, #308]	; 400b48 <xQueueGenericSend+0x14c>
  400a16:	e04a      	b.n	400aae <xQueueGenericSend+0xb2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400a18:	463a      	mov	r2, r7
  400a1a:	4651      	mov	r1, sl
  400a1c:	4620      	mov	r0, r4
  400a1e:	4b47      	ldr	r3, [pc, #284]	; (400b3c <xQueueGenericSend+0x140>)
  400a20:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  400a22:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400a24:	b1a3      	cbz	r3, 400a50 <xQueueGenericSend+0x54>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400a26:	4639      	mov	r1, r7
  400a28:	4620      	mov	r0, r4
  400a2a:	4b45      	ldr	r3, [pc, #276]	; (400b40 <xQueueGenericSend+0x144>)
  400a2c:	4798      	blx	r3
  400a2e:	2801      	cmp	r0, #1
  400a30:	d005      	beq.n	400a3e <xQueueGenericSend+0x42>
				taskEXIT_CRITICAL();
  400a32:	4b44      	ldr	r3, [pc, #272]	; (400b44 <xQueueGenericSend+0x148>)
  400a34:	4798      	blx	r3
				return pdPASS;
  400a36:	2001      	movs	r0, #1
}
  400a38:	b005      	add	sp, #20
  400a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							queueYIELD_IF_USING_PREEMPTION();
  400a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400a42:	4b41      	ldr	r3, [pc, #260]	; (400b48 <xQueueGenericSend+0x14c>)
  400a44:	601a      	str	r2, [r3, #0]
  400a46:	f3bf 8f4f 	dsb	sy
  400a4a:	f3bf 8f6f 	isb	sy
  400a4e:	e7f0      	b.n	400a32 <xQueueGenericSend+0x36>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400a52:	b953      	cbnz	r3, 400a6a <xQueueGenericSend+0x6e>
						else if( xYieldRequired != pdFALSE )
  400a54:	2800      	cmp	r0, #0
  400a56:	d0ec      	beq.n	400a32 <xQueueGenericSend+0x36>
							queueYIELD_IF_USING_PREEMPTION();
  400a58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400a5c:	4b3a      	ldr	r3, [pc, #232]	; (400b48 <xQueueGenericSend+0x14c>)
  400a5e:	601a      	str	r2, [r3, #0]
  400a60:	f3bf 8f4f 	dsb	sy
  400a64:	f3bf 8f6f 	isb	sy
  400a68:	e7e3      	b.n	400a32 <xQueueGenericSend+0x36>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400a6a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400a6e:	4b37      	ldr	r3, [pc, #220]	; (400b4c <xQueueGenericSend+0x150>)
  400a70:	4798      	blx	r3
  400a72:	2801      	cmp	r0, #1
  400a74:	d1dd      	bne.n	400a32 <xQueueGenericSend+0x36>
								queueYIELD_IF_USING_PREEMPTION();
  400a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400a7a:	4b33      	ldr	r3, [pc, #204]	; (400b48 <xQueueGenericSend+0x14c>)
  400a7c:	601a      	str	r2, [r3, #0]
  400a7e:	f3bf 8f4f 	dsb	sy
  400a82:	f3bf 8f6f 	isb	sy
  400a86:	e7d4      	b.n	400a32 <xQueueGenericSend+0x36>
					taskEXIT_CRITICAL();
  400a88:	4b2e      	ldr	r3, [pc, #184]	; (400b44 <xQueueGenericSend+0x148>)
  400a8a:	4798      	blx	r3
					return errQUEUE_FULL;
  400a8c:	2000      	movs	r0, #0
  400a8e:	e7d3      	b.n	400a38 <xQueueGenericSend+0x3c>
					vTaskSetTimeOutState( &xTimeOut );
  400a90:	a802      	add	r0, sp, #8
  400a92:	47c0      	blx	r8
  400a94:	e017      	b.n	400ac6 <xQueueGenericSend+0xca>
		prvLockQueue( pxQueue );
  400a96:	2300      	movs	r3, #0
  400a98:	6463      	str	r3, [r4, #68]	; 0x44
  400a9a:	e01d      	b.n	400ad8 <xQueueGenericSend+0xdc>
  400a9c:	2300      	movs	r3, #0
  400a9e:	64a3      	str	r3, [r4, #72]	; 0x48
  400aa0:	e01e      	b.n	400ae0 <xQueueGenericSend+0xe4>
				prvUnlockQueue( pxQueue );
  400aa2:	4620      	mov	r0, r4
  400aa4:	4b2a      	ldr	r3, [pc, #168]	; (400b50 <xQueueGenericSend+0x154>)
  400aa6:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400aa8:	4b2a      	ldr	r3, [pc, #168]	; (400b54 <xQueueGenericSend+0x158>)
  400aaa:	4798      	blx	r3
  400aac:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  400aae:	47a8      	blx	r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400ab0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400ab2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400ab4:	429a      	cmp	r2, r3
  400ab6:	d3af      	bcc.n	400a18 <xQueueGenericSend+0x1c>
  400ab8:	2f02      	cmp	r7, #2
  400aba:	d0ad      	beq.n	400a18 <xQueueGenericSend+0x1c>
				if( xTicksToWait == ( TickType_t ) 0 )
  400abc:	9b01      	ldr	r3, [sp, #4]
  400abe:	2b00      	cmp	r3, #0
  400ac0:	d0e2      	beq.n	400a88 <xQueueGenericSend+0x8c>
				else if( xEntryTimeSet == pdFALSE )
  400ac2:	2e00      	cmp	r6, #0
  400ac4:	d0e4      	beq.n	400a90 <xQueueGenericSend+0x94>
		taskEXIT_CRITICAL();
  400ac6:	4b1f      	ldr	r3, [pc, #124]	; (400b44 <xQueueGenericSend+0x148>)
  400ac8:	4798      	blx	r3
		vTaskSuspendAll();
  400aca:	4b23      	ldr	r3, [pc, #140]	; (400b58 <xQueueGenericSend+0x15c>)
  400acc:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400ace:	47a8      	blx	r5
  400ad0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
  400ad6:	d0de      	beq.n	400a96 <xQueueGenericSend+0x9a>
  400ad8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ada:	f1b3 3fff 	cmp.w	r3, #4294967295
  400ade:	d0dd      	beq.n	400a9c <xQueueGenericSend+0xa0>
  400ae0:	4b18      	ldr	r3, [pc, #96]	; (400b44 <xQueueGenericSend+0x148>)
  400ae2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400ae4:	a901      	add	r1, sp, #4
  400ae6:	a802      	add	r0, sp, #8
  400ae8:	4b1c      	ldr	r3, [pc, #112]	; (400b5c <xQueueGenericSend+0x160>)
  400aea:	4798      	blx	r3
  400aec:	b9e0      	cbnz	r0, 400b28 <xQueueGenericSend+0x12c>
	taskENTER_CRITICAL();
  400aee:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400af0:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  400af4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  400af6:	4b13      	ldr	r3, [pc, #76]	; (400b44 <xQueueGenericSend+0x148>)
  400af8:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400afa:	45b3      	cmp	fp, r6
  400afc:	d1d1      	bne.n	400aa2 <xQueueGenericSend+0xa6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400afe:	9901      	ldr	r1, [sp, #4]
  400b00:	f104 0010 	add.w	r0, r4, #16
  400b04:	4b16      	ldr	r3, [pc, #88]	; (400b60 <xQueueGenericSend+0x164>)
  400b06:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400b08:	4620      	mov	r0, r4
  400b0a:	4b11      	ldr	r3, [pc, #68]	; (400b50 <xQueueGenericSend+0x154>)
  400b0c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400b0e:	4b11      	ldr	r3, [pc, #68]	; (400b54 <xQueueGenericSend+0x158>)
  400b10:	4798      	blx	r3
  400b12:	2800      	cmp	r0, #0
  400b14:	d1ca      	bne.n	400aac <xQueueGenericSend+0xb0>
					portYIELD_WITHIN_API();
  400b16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400b1a:	f8c9 3000 	str.w	r3, [r9]
  400b1e:	f3bf 8f4f 	dsb	sy
  400b22:	f3bf 8f6f 	isb	sy
  400b26:	e7c1      	b.n	400aac <xQueueGenericSend+0xb0>
			prvUnlockQueue( pxQueue );
  400b28:	4620      	mov	r0, r4
  400b2a:	4b09      	ldr	r3, [pc, #36]	; (400b50 <xQueueGenericSend+0x154>)
  400b2c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400b2e:	4b09      	ldr	r3, [pc, #36]	; (400b54 <xQueueGenericSend+0x158>)
  400b30:	4798      	blx	r3
			return errQUEUE_FULL;
  400b32:	2000      	movs	r0, #0
  400b34:	e780      	b.n	400a38 <xQueueGenericSend+0x3c>
  400b36:	bf00      	nop
  400b38:	004005d9 	.word	0x004005d9
  400b3c:	0040078d 	.word	0x0040078d
  400b40:	00400811 	.word	0x00400811
  400b44:	004005fd 	.word	0x004005fd
  400b48:	e000ed04 	.word	0xe000ed04
  400b4c:	00401659 	.word	0x00401659
  400b50:	0040088d 	.word	0x0040088d
  400b54:	004012cd 	.word	0x004012cd
  400b58:	00401179 	.word	0x00401179
  400b5c:	004016f1 	.word	0x004016f1
  400b60:	00401585 	.word	0x00401585
  400b64:	004016d9 	.word	0x004016d9

00400b68 <xQueueGenericSendFromISR>:
{
  400b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm volatile
  400b6a:	f3ef 8711 	mrs	r7, BASEPRI
  400b6e:	f04f 0480 	mov.w	r4, #128	; 0x80
  400b72:	b672      	cpsid	i
  400b74:	f384 8811 	msr	BASEPRI, r4
  400b78:	f3bf 8f6f 	isb	sy
  400b7c:	f3bf 8f4f 	dsb	sy
  400b80:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400b82:	6b85      	ldr	r5, [r0, #56]	; 0x38
  400b84:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  400b86:	42a5      	cmp	r5, r4
  400b88:	d305      	bcc.n	400b96 <xQueueGenericSendFromISR+0x2e>
  400b8a:	2b02      	cmp	r3, #2
  400b8c:	d003      	beq.n	400b96 <xQueueGenericSendFromISR+0x2e>
			xReturn = errQUEUE_FULL;
  400b8e:	2000      	movs	r0, #0
	__asm volatile
  400b90:	f387 8811 	msr	BASEPRI, r7
}
  400b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b96:	461d      	mov	r5, r3
  400b98:	4616      	mov	r6, r2
  400b9a:	4604      	mov	r4, r0
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400b9c:	461a      	mov	r2, r3
  400b9e:	4b13      	ldr	r3, [pc, #76]	; (400bec <xQueueGenericSendFromISR+0x84>)
  400ba0:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  400ba2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
  400ba8:	d004      	beq.n	400bb4 <xQueueGenericSendFromISR+0x4c>
				++( pxQueue->xTxLock );
  400baa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400bac:	3301      	adds	r3, #1
  400bae:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  400bb0:	2001      	movs	r0, #1
  400bb2:	e7ed      	b.n	400b90 <xQueueGenericSendFromISR+0x28>
					if( pxQueue->pxQueueSetContainer != NULL )
  400bb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400bb6:	b143      	cbz	r3, 400bca <xQueueGenericSendFromISR+0x62>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400bb8:	4629      	mov	r1, r5
  400bba:	4620      	mov	r0, r4
  400bbc:	4b0c      	ldr	r3, [pc, #48]	; (400bf0 <xQueueGenericSendFromISR+0x88>)
  400bbe:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  400bc0:	b186      	cbz	r6, 400be4 <xQueueGenericSendFromISR+0x7c>
  400bc2:	2801      	cmp	r0, #1
  400bc4:	d10e      	bne.n	400be4 <xQueueGenericSendFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
  400bc6:	6030      	str	r0, [r6, #0]
  400bc8:	e7e2      	b.n	400b90 <xQueueGenericSendFromISR+0x28>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400bca:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400bcc:	b90b      	cbnz	r3, 400bd2 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  400bce:	2001      	movs	r0, #1
  400bd0:	e7de      	b.n	400b90 <xQueueGenericSendFromISR+0x28>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400bd2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400bd6:	4b07      	ldr	r3, [pc, #28]	; (400bf4 <xQueueGenericSendFromISR+0x8c>)
  400bd8:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  400bda:	b12e      	cbz	r6, 400be8 <xQueueGenericSendFromISR+0x80>
  400bdc:	b120      	cbz	r0, 400be8 <xQueueGenericSendFromISR+0x80>
									*pxHigherPriorityTaskWoken = pdTRUE;
  400bde:	2001      	movs	r0, #1
  400be0:	6030      	str	r0, [r6, #0]
  400be2:	e7d5      	b.n	400b90 <xQueueGenericSendFromISR+0x28>
			xReturn = pdPASS;
  400be4:	2001      	movs	r0, #1
  400be6:	e7d3      	b.n	400b90 <xQueueGenericSendFromISR+0x28>
  400be8:	2001      	movs	r0, #1
  400bea:	e7d1      	b.n	400b90 <xQueueGenericSendFromISR+0x28>
  400bec:	0040078d 	.word	0x0040078d
  400bf0:	00400811 	.word	0x00400811
  400bf4:	00401659 	.word	0x00401659

00400bf8 <xQueueGiveFromISR>:
{
  400bf8:	b538      	push	{r3, r4, r5, lr}
	__asm volatile
  400bfa:	f3ef 8411 	mrs	r4, BASEPRI
  400bfe:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c02:	b672      	cpsid	i
  400c04:	f383 8811 	msr	BASEPRI, r3
  400c08:	f3bf 8f6f 	isb	sy
  400c0c:	f3bf 8f4f 	dsb	sy
  400c10:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400c12:	6b82      	ldr	r2, [r0, #56]	; 0x38
  400c14:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  400c16:	429a      	cmp	r2, r3
  400c18:	d224      	bcs.n	400c64 <xQueueGiveFromISR+0x6c>
			++( pxQueue->uxMessagesWaiting );
  400c1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  400c1c:	3301      	adds	r3, #1
  400c1e:	6383      	str	r3, [r0, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  400c20:	6c83      	ldr	r3, [r0, #72]	; 0x48
  400c22:	f1b3 3fff 	cmp.w	r3, #4294967295
  400c26:	d006      	beq.n	400c36 <xQueueGiveFromISR+0x3e>
				++( pxQueue->xTxLock );
  400c28:	6c83      	ldr	r3, [r0, #72]	; 0x48
  400c2a:	3301      	adds	r3, #1
  400c2c:	6483      	str	r3, [r0, #72]	; 0x48
			xReturn = pdPASS;
  400c2e:	2001      	movs	r0, #1
	__asm volatile
  400c30:	f384 8811 	msr	BASEPRI, r4
}
  400c34:	bd38      	pop	{r3, r4, r5, pc}
  400c36:	460d      	mov	r5, r1
					if( pxQueue->pxQueueSetContainer != NULL )
  400c38:	6d43      	ldr	r3, [r0, #84]	; 0x54
  400c3a:	b13b      	cbz	r3, 400c4c <xQueueGiveFromISR+0x54>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400c3c:	2100      	movs	r1, #0
  400c3e:	4b0c      	ldr	r3, [pc, #48]	; (400c70 <xQueueGiveFromISR+0x78>)
  400c40:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  400c42:	b18d      	cbz	r5, 400c68 <xQueueGiveFromISR+0x70>
  400c44:	2801      	cmp	r0, #1
  400c46:	d10f      	bne.n	400c68 <xQueueGiveFromISR+0x70>
								*pxHigherPriorityTaskWoken = pdTRUE;
  400c48:	6028      	str	r0, [r5, #0]
  400c4a:	e7f1      	b.n	400c30 <xQueueGiveFromISR+0x38>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400c4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  400c4e:	b90b      	cbnz	r3, 400c54 <xQueueGiveFromISR+0x5c>
			xReturn = pdPASS;
  400c50:	2001      	movs	r0, #1
  400c52:	e7ed      	b.n	400c30 <xQueueGiveFromISR+0x38>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400c54:	3024      	adds	r0, #36	; 0x24
  400c56:	4b07      	ldr	r3, [pc, #28]	; (400c74 <xQueueGiveFromISR+0x7c>)
  400c58:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  400c5a:	b13d      	cbz	r5, 400c6c <xQueueGiveFromISR+0x74>
  400c5c:	b130      	cbz	r0, 400c6c <xQueueGiveFromISR+0x74>
									*pxHigherPriorityTaskWoken = pdTRUE;
  400c5e:	2001      	movs	r0, #1
  400c60:	6028      	str	r0, [r5, #0]
  400c62:	e7e5      	b.n	400c30 <xQueueGiveFromISR+0x38>
			xReturn = errQUEUE_FULL;
  400c64:	2000      	movs	r0, #0
  400c66:	e7e3      	b.n	400c30 <xQueueGiveFromISR+0x38>
			xReturn = pdPASS;
  400c68:	2001      	movs	r0, #1
  400c6a:	e7e1      	b.n	400c30 <xQueueGiveFromISR+0x38>
  400c6c:	2001      	movs	r0, #1
  400c6e:	e7df      	b.n	400c30 <xQueueGiveFromISR+0x38>
  400c70:	00400811 	.word	0x00400811
  400c74:	00401659 	.word	0x00401659

00400c78 <xQueueGenericReceive>:
{
  400c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400c7c:	b084      	sub	sp, #16
  400c7e:	4604      	mov	r4, r0
  400c80:	468a      	mov	sl, r1
  400c82:	9201      	str	r2, [sp, #4]
  400c84:	4699      	mov	r9, r3
BaseType_t xEntryTimeSet = pdFALSE;
  400c86:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  400c88:	4d4d      	ldr	r5, [pc, #308]	; (400dc0 <xQueueGenericReceive+0x148>)
					vTaskSetTimeOutState( &xTimeOut );
  400c8a:	f8df 8164 	ldr.w	r8, [pc, #356]	; 400df0 <xQueueGenericReceive+0x178>
					portYIELD_WITHIN_API();
  400c8e:	4f4d      	ldr	r7, [pc, #308]	; (400dc4 <xQueueGenericReceive+0x14c>)
  400c90:	e054      	b.n	400d3c <xQueueGenericReceive+0xc4>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  400c92:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  400c94:	4651      	mov	r1, sl
  400c96:	4620      	mov	r0, r4
  400c98:	4b4b      	ldr	r3, [pc, #300]	; (400dc8 <xQueueGenericReceive+0x150>)
  400c9a:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  400c9c:	f1b9 0f00 	cmp.w	r9, #0
  400ca0:	d11f      	bne.n	400ce2 <xQueueGenericReceive+0x6a>
					--( pxQueue->uxMessagesWaiting );
  400ca2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400ca4:	3b01      	subs	r3, #1
  400ca6:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400ca8:	6823      	ldr	r3, [r4, #0]
  400caa:	b13b      	cbz	r3, 400cbc <xQueueGenericReceive+0x44>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400cac:	6923      	ldr	r3, [r4, #16]
  400cae:	b94b      	cbnz	r3, 400cc4 <xQueueGenericReceive+0x4c>
				taskEXIT_CRITICAL();
  400cb0:	4b46      	ldr	r3, [pc, #280]	; (400dcc <xQueueGenericReceive+0x154>)
  400cb2:	4798      	blx	r3
				return pdPASS;
  400cb4:	2001      	movs	r0, #1
}
  400cb6:	b004      	add	sp, #16
  400cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  400cbc:	4b44      	ldr	r3, [pc, #272]	; (400dd0 <xQueueGenericReceive+0x158>)
  400cbe:	4798      	blx	r3
  400cc0:	6060      	str	r0, [r4, #4]
  400cc2:	e7f3      	b.n	400cac <xQueueGenericReceive+0x34>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400cc4:	f104 0010 	add.w	r0, r4, #16
  400cc8:	4b42      	ldr	r3, [pc, #264]	; (400dd4 <xQueueGenericReceive+0x15c>)
  400cca:	4798      	blx	r3
  400ccc:	2801      	cmp	r0, #1
  400cce:	d1ef      	bne.n	400cb0 <xQueueGenericReceive+0x38>
							queueYIELD_IF_USING_PREEMPTION();
  400cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400cd4:	4b3b      	ldr	r3, [pc, #236]	; (400dc4 <xQueueGenericReceive+0x14c>)
  400cd6:	601a      	str	r2, [r3, #0]
  400cd8:	f3bf 8f4f 	dsb	sy
  400cdc:	f3bf 8f6f 	isb	sy
  400ce0:	e7e6      	b.n	400cb0 <xQueueGenericReceive+0x38>
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  400ce2:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400ce4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400ce6:	2b00      	cmp	r3, #0
  400ce8:	d0e2      	beq.n	400cb0 <xQueueGenericReceive+0x38>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400cea:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400cee:	4b39      	ldr	r3, [pc, #228]	; (400dd4 <xQueueGenericReceive+0x15c>)
  400cf0:	4798      	blx	r3
  400cf2:	2800      	cmp	r0, #0
  400cf4:	d0dc      	beq.n	400cb0 <xQueueGenericReceive+0x38>
							queueYIELD_IF_USING_PREEMPTION();
  400cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400cfa:	4b32      	ldr	r3, [pc, #200]	; (400dc4 <xQueueGenericReceive+0x14c>)
  400cfc:	601a      	str	r2, [r3, #0]
  400cfe:	f3bf 8f4f 	dsb	sy
  400d02:	f3bf 8f6f 	isb	sy
  400d06:	e7d3      	b.n	400cb0 <xQueueGenericReceive+0x38>
					taskEXIT_CRITICAL();
  400d08:	4b30      	ldr	r3, [pc, #192]	; (400dcc <xQueueGenericReceive+0x154>)
  400d0a:	4798      	blx	r3
					return errQUEUE_EMPTY;
  400d0c:	2000      	movs	r0, #0
  400d0e:	e7d2      	b.n	400cb6 <xQueueGenericReceive+0x3e>
					vTaskSetTimeOutState( &xTimeOut );
  400d10:	a802      	add	r0, sp, #8
  400d12:	47c0      	blx	r8
  400d14:	e01b      	b.n	400d4e <xQueueGenericReceive+0xd6>
		prvLockQueue( pxQueue );
  400d16:	2300      	movs	r3, #0
  400d18:	6463      	str	r3, [r4, #68]	; 0x44
  400d1a:	e021      	b.n	400d60 <xQueueGenericReceive+0xe8>
  400d1c:	2300      	movs	r3, #0
  400d1e:	64a3      	str	r3, [r4, #72]	; 0x48
  400d20:	e022      	b.n	400d68 <xQueueGenericReceive+0xf0>
						taskENTER_CRITICAL();
  400d22:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  400d24:	6860      	ldr	r0, [r4, #4]
  400d26:	4b2c      	ldr	r3, [pc, #176]	; (400dd8 <xQueueGenericReceive+0x160>)
  400d28:	4798      	blx	r3
						taskEXIT_CRITICAL();
  400d2a:	4b28      	ldr	r3, [pc, #160]	; (400dcc <xQueueGenericReceive+0x154>)
  400d2c:	4798      	blx	r3
  400d2e:	e02b      	b.n	400d88 <xQueueGenericReceive+0x110>
				prvUnlockQueue( pxQueue );
  400d30:	4620      	mov	r0, r4
  400d32:	4b2a      	ldr	r3, [pc, #168]	; (400ddc <xQueueGenericReceive+0x164>)
  400d34:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400d36:	4b2a      	ldr	r3, [pc, #168]	; (400de0 <xQueueGenericReceive+0x168>)
  400d38:	4798      	blx	r3
  400d3a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  400d3c:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400d3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400d40:	2b00      	cmp	r3, #0
  400d42:	d1a6      	bne.n	400c92 <xQueueGenericReceive+0x1a>
				if( xTicksToWait == ( TickType_t ) 0 )
  400d44:	9b01      	ldr	r3, [sp, #4]
  400d46:	2b00      	cmp	r3, #0
  400d48:	d0de      	beq.n	400d08 <xQueueGenericReceive+0x90>
				else if( xEntryTimeSet == pdFALSE )
  400d4a:	2e00      	cmp	r6, #0
  400d4c:	d0e0      	beq.n	400d10 <xQueueGenericReceive+0x98>
		taskEXIT_CRITICAL();
  400d4e:	4b1f      	ldr	r3, [pc, #124]	; (400dcc <xQueueGenericReceive+0x154>)
  400d50:	4798      	blx	r3
		vTaskSuspendAll();
  400d52:	4b24      	ldr	r3, [pc, #144]	; (400de4 <xQueueGenericReceive+0x16c>)
  400d54:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400d56:	47a8      	blx	r5
  400d58:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d5e:	d0da      	beq.n	400d16 <xQueueGenericReceive+0x9e>
  400d60:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400d62:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d66:	d0d9      	beq.n	400d1c <xQueueGenericReceive+0xa4>
  400d68:	4b18      	ldr	r3, [pc, #96]	; (400dcc <xQueueGenericReceive+0x154>)
  400d6a:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400d6c:	a901      	add	r1, sp, #4
  400d6e:	a802      	add	r0, sp, #8
  400d70:	4b1d      	ldr	r3, [pc, #116]	; (400de8 <xQueueGenericReceive+0x170>)
  400d72:	4798      	blx	r3
  400d74:	b9e0      	cbnz	r0, 400db0 <xQueueGenericReceive+0x138>
	taskENTER_CRITICAL();
  400d76:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  400d78:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  400d7a:	4b14      	ldr	r3, [pc, #80]	; (400dcc <xQueueGenericReceive+0x154>)
  400d7c:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400d7e:	2e00      	cmp	r6, #0
  400d80:	d1d6      	bne.n	400d30 <xQueueGenericReceive+0xb8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400d82:	6823      	ldr	r3, [r4, #0]
  400d84:	2b00      	cmp	r3, #0
  400d86:	d0cc      	beq.n	400d22 <xQueueGenericReceive+0xaa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400d88:	9901      	ldr	r1, [sp, #4]
  400d8a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400d8e:	4b17      	ldr	r3, [pc, #92]	; (400dec <xQueueGenericReceive+0x174>)
  400d90:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400d92:	4620      	mov	r0, r4
  400d94:	4b11      	ldr	r3, [pc, #68]	; (400ddc <xQueueGenericReceive+0x164>)
  400d96:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400d98:	4b11      	ldr	r3, [pc, #68]	; (400de0 <xQueueGenericReceive+0x168>)
  400d9a:	4798      	blx	r3
  400d9c:	2800      	cmp	r0, #0
  400d9e:	d1cc      	bne.n	400d3a <xQueueGenericReceive+0xc2>
					portYIELD_WITHIN_API();
  400da0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400da4:	603b      	str	r3, [r7, #0]
  400da6:	f3bf 8f4f 	dsb	sy
  400daa:	f3bf 8f6f 	isb	sy
  400dae:	e7c4      	b.n	400d3a <xQueueGenericReceive+0xc2>
			prvUnlockQueue( pxQueue );
  400db0:	4620      	mov	r0, r4
  400db2:	4b0a      	ldr	r3, [pc, #40]	; (400ddc <xQueueGenericReceive+0x164>)
  400db4:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400db6:	4b0a      	ldr	r3, [pc, #40]	; (400de0 <xQueueGenericReceive+0x168>)
  400db8:	4798      	blx	r3
			return errQUEUE_EMPTY;
  400dba:	2000      	movs	r0, #0
  400dbc:	e77b      	b.n	400cb6 <xQueueGenericReceive+0x3e>
  400dbe:	bf00      	nop
  400dc0:	004005d9 	.word	0x004005d9
  400dc4:	e000ed04 	.word	0xe000ed04
  400dc8:	00400865 	.word	0x00400865
  400dcc:	004005fd 	.word	0x004005fd
  400dd0:	004018a9 	.word	0x004018a9
  400dd4:	00401659 	.word	0x00401659
  400dd8:	00401781 	.word	0x00401781
  400ddc:	0040088d 	.word	0x0040088d
  400de0:	004012cd 	.word	0x004012cd
  400de4:	00401179 	.word	0x00401179
  400de8:	004016f1 	.word	0x004016f1
  400dec:	00401585 	.word	0x00401585
  400df0:	004016d9 	.word	0x004016d9

00400df4 <vQueueAddToRegistry>:
	{
  400df4:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  400df6:	4b0b      	ldr	r3, [pc, #44]	; (400e24 <vQueueAddToRegistry+0x30>)
  400df8:	681b      	ldr	r3, [r3, #0]
  400dfa:	b153      	cbz	r3, 400e12 <vQueueAddToRegistry+0x1e>
  400dfc:	2301      	movs	r3, #1
  400dfe:	4c09      	ldr	r4, [pc, #36]	; (400e24 <vQueueAddToRegistry+0x30>)
  400e00:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  400e04:	b132      	cbz	r2, 400e14 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  400e06:	3301      	adds	r3, #1
  400e08:	2b08      	cmp	r3, #8
  400e0a:	d1f9      	bne.n	400e00 <vQueueAddToRegistry+0xc>
	}
  400e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e10:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  400e12:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  400e14:	4a03      	ldr	r2, [pc, #12]	; (400e24 <vQueueAddToRegistry+0x30>)
  400e16:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  400e1a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  400e1e:	6058      	str	r0, [r3, #4]
				break;
  400e20:	e7f4      	b.n	400e0c <vQueueAddToRegistry+0x18>
  400e22:	bf00      	nop
  400e24:	2040ca1c 	.word	0x2040ca1c

00400e28 <vQueueWaitForMessageRestricted>:
	{
  400e28:	b570      	push	{r4, r5, r6, lr}
  400e2a:	4604      	mov	r4, r0
  400e2c:	460d      	mov	r5, r1
  400e2e:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  400e30:	4b0f      	ldr	r3, [pc, #60]	; (400e70 <vQueueWaitForMessageRestricted+0x48>)
  400e32:	4798      	blx	r3
  400e34:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400e36:	f1b3 3fff 	cmp.w	r3, #4294967295
  400e3a:	d00b      	beq.n	400e54 <vQueueWaitForMessageRestricted+0x2c>
  400e3c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400e42:	d00a      	beq.n	400e5a <vQueueWaitForMessageRestricted+0x32>
  400e44:	4b0b      	ldr	r3, [pc, #44]	; (400e74 <vQueueWaitForMessageRestricted+0x4c>)
  400e46:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  400e48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400e4a:	b14b      	cbz	r3, 400e60 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  400e4c:	4620      	mov	r0, r4
  400e4e:	4b0a      	ldr	r3, [pc, #40]	; (400e78 <vQueueWaitForMessageRestricted+0x50>)
  400e50:	4798      	blx	r3
  400e52:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  400e54:	2300      	movs	r3, #0
  400e56:	6463      	str	r3, [r4, #68]	; 0x44
  400e58:	e7f0      	b.n	400e3c <vQueueWaitForMessageRestricted+0x14>
  400e5a:	2300      	movs	r3, #0
  400e5c:	64a3      	str	r3, [r4, #72]	; 0x48
  400e5e:	e7f1      	b.n	400e44 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  400e60:	4632      	mov	r2, r6
  400e62:	4629      	mov	r1, r5
  400e64:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400e68:	4b04      	ldr	r3, [pc, #16]	; (400e7c <vQueueWaitForMessageRestricted+0x54>)
  400e6a:	4798      	blx	r3
  400e6c:	e7ee      	b.n	400e4c <vQueueWaitForMessageRestricted+0x24>
  400e6e:	bf00      	nop
  400e70:	004005d9 	.word	0x004005d9
  400e74:	004005fd 	.word	0x004005fd
  400e78:	0040088d 	.word	0x0040088d
  400e7c:	004015f1 	.word	0x004015f1

00400e80 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  400e80:	4b08      	ldr	r3, [pc, #32]	; (400ea4 <prvResetNextTaskUnblockTime+0x24>)
  400e82:	681b      	ldr	r3, [r3, #0]
  400e84:	681b      	ldr	r3, [r3, #0]
  400e86:	b13b      	cbz	r3, 400e98 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  400e88:	4b06      	ldr	r3, [pc, #24]	; (400ea4 <prvResetNextTaskUnblockTime+0x24>)
  400e8a:	681b      	ldr	r3, [r3, #0]
  400e8c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  400e8e:	68db      	ldr	r3, [r3, #12]
  400e90:	685a      	ldr	r2, [r3, #4]
  400e92:	4b05      	ldr	r3, [pc, #20]	; (400ea8 <prvResetNextTaskUnblockTime+0x28>)
  400e94:	601a      	str	r2, [r3, #0]
  400e96:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  400e98:	f04f 32ff 	mov.w	r2, #4294967295
  400e9c:	4b02      	ldr	r3, [pc, #8]	; (400ea8 <prvResetNextTaskUnblockTime+0x28>)
  400e9e:	601a      	str	r2, [r3, #0]
  400ea0:	4770      	bx	lr
  400ea2:	bf00      	nop
  400ea4:	2040c1f8 	.word	0x2040c1f8
  400ea8:	2040c2a4 	.word	0x2040c2a4

00400eac <prvAddCurrentTaskToDelayedList>:
{
  400eac:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  400eae:	4b0f      	ldr	r3, [pc, #60]	; (400eec <prvAddCurrentTaskToDelayedList+0x40>)
  400eb0:	681b      	ldr	r3, [r3, #0]
  400eb2:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  400eb4:	4b0e      	ldr	r3, [pc, #56]	; (400ef0 <prvAddCurrentTaskToDelayedList+0x44>)
  400eb6:	681b      	ldr	r3, [r3, #0]
  400eb8:	4298      	cmp	r0, r3
  400eba:	d30e      	bcc.n	400eda <prvAddCurrentTaskToDelayedList+0x2e>
  400ebc:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  400ebe:	4b0d      	ldr	r3, [pc, #52]	; (400ef4 <prvAddCurrentTaskToDelayedList+0x48>)
  400ec0:	6818      	ldr	r0, [r3, #0]
  400ec2:	4b0a      	ldr	r3, [pc, #40]	; (400eec <prvAddCurrentTaskToDelayedList+0x40>)
  400ec4:	6819      	ldr	r1, [r3, #0]
  400ec6:	3104      	adds	r1, #4
  400ec8:	4b0b      	ldr	r3, [pc, #44]	; (400ef8 <prvAddCurrentTaskToDelayedList+0x4c>)
  400eca:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  400ecc:	4b0b      	ldr	r3, [pc, #44]	; (400efc <prvAddCurrentTaskToDelayedList+0x50>)
  400ece:	681b      	ldr	r3, [r3, #0]
  400ed0:	429c      	cmp	r4, r3
  400ed2:	d201      	bcs.n	400ed8 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  400ed4:	4b09      	ldr	r3, [pc, #36]	; (400efc <prvAddCurrentTaskToDelayedList+0x50>)
  400ed6:	601c      	str	r4, [r3, #0]
  400ed8:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  400eda:	4b09      	ldr	r3, [pc, #36]	; (400f00 <prvAddCurrentTaskToDelayedList+0x54>)
  400edc:	6818      	ldr	r0, [r3, #0]
  400ede:	4b03      	ldr	r3, [pc, #12]	; (400eec <prvAddCurrentTaskToDelayedList+0x40>)
  400ee0:	6819      	ldr	r1, [r3, #0]
  400ee2:	3104      	adds	r1, #4
  400ee4:	4b04      	ldr	r3, [pc, #16]	; (400ef8 <prvAddCurrentTaskToDelayedList+0x4c>)
  400ee6:	4798      	blx	r3
  400ee8:	bd10      	pop	{r4, pc}
  400eea:	bf00      	nop
  400eec:	2040c1f4 	.word	0x2040c1f4
  400ef0:	2040c2ec 	.word	0x2040c2ec
  400ef4:	2040c1f8 	.word	0x2040c1f8
  400ef8:	004004e9 	.word	0x004004e9
  400efc:	2040c2a4 	.word	0x2040c2a4
  400f00:	2040c1fc 	.word	0x2040c1fc

00400f04 <xTaskGenericCreate>:
{
  400f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400f08:	b083      	sub	sp, #12
  400f0a:	9000      	str	r0, [sp, #0]
  400f0c:	460e      	mov	r6, r1
  400f0e:	4617      	mov	r7, r2
  400f10:	9301      	str	r3, [sp, #4]
  400f12:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  400f16:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  400f1a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400f1c:	2d00      	cmp	r5, #0
  400f1e:	f000 8089 	beq.w	401034 <xTaskGenericCreate+0x130>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  400f22:	2058      	movs	r0, #88	; 0x58
  400f24:	4b5f      	ldr	r3, [pc, #380]	; (4010a4 <xTaskGenericCreate+0x1a0>)
  400f26:	4798      	blx	r3
			if( pxNewTCB != NULL )
  400f28:	4604      	mov	r4, r0
  400f2a:	2800      	cmp	r0, #0
  400f2c:	f000 8088 	beq.w	401040 <xTaskGenericCreate+0x13c>
				pxNewTCB->pxStack = pxStack;
  400f30:	6305      	str	r5, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  400f32:	00ba      	lsls	r2, r7, #2
  400f34:	21a5      	movs	r1, #165	; 0xa5
  400f36:	4628      	mov	r0, r5
  400f38:	4b5b      	ldr	r3, [pc, #364]	; (4010a8 <xTaskGenericCreate+0x1a4>)
  400f3a:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  400f3c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  400f40:	443b      	add	r3, r7
  400f42:	6b25      	ldr	r5, [r4, #48]	; 0x30
  400f44:	eb05 0583 	add.w	r5, r5, r3, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  400f48:	f025 0507 	bic.w	r5, r5, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  400f4c:	7833      	ldrb	r3, [r6, #0]
  400f4e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  400f52:	7833      	ldrb	r3, [r6, #0]
  400f54:	b15b      	cbz	r3, 400f6e <xTaskGenericCreate+0x6a>
  400f56:	4633      	mov	r3, r6
  400f58:	f104 0234 	add.w	r2, r4, #52	; 0x34
  400f5c:	3609      	adds	r6, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  400f5e:	7859      	ldrb	r1, [r3, #1]
  400f60:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  400f64:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  400f68:	b109      	cbz	r1, 400f6e <xTaskGenericCreate+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  400f6a:	42b3      	cmp	r3, r6
  400f6c:	d1f7      	bne.n	400f5e <xTaskGenericCreate+0x5a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  400f6e:	2700      	movs	r7, #0
  400f70:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  400f74:	465e      	mov	r6, fp
  400f76:	2e04      	cmp	r6, #4
  400f78:	bf28      	it	cs
  400f7a:	2604      	movcs	r6, #4
	pxTCB->uxPriority = uxPriority;
  400f7c:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  400f7e:	64a6      	str	r6, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  400f80:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  400f82:	f104 0804 	add.w	r8, r4, #4
  400f86:	4640      	mov	r0, r8
  400f88:	f8df 9170 	ldr.w	r9, [pc, #368]	; 4010fc <xTaskGenericCreate+0x1f8>
  400f8c:	47c8      	blx	r9
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  400f8e:	f104 0018 	add.w	r0, r4, #24
  400f92:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  400f94:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400f96:	f1c6 0605 	rsb	r6, r6, #5
  400f9a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  400f9c:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  400f9e:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  400fa0:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  400fa4:	9a01      	ldr	r2, [sp, #4]
  400fa6:	9900      	ldr	r1, [sp, #0]
  400fa8:	4628      	mov	r0, r5
  400faa:	4b40      	ldr	r3, [pc, #256]	; (4010ac <xTaskGenericCreate+0x1a8>)
  400fac:	4798      	blx	r3
  400fae:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  400fb0:	f1ba 0f00 	cmp.w	sl, #0
  400fb4:	d001      	beq.n	400fba <xTaskGenericCreate+0xb6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  400fb6:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  400fba:	4b3d      	ldr	r3, [pc, #244]	; (4010b0 <xTaskGenericCreate+0x1ac>)
  400fbc:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  400fbe:	4a3d      	ldr	r2, [pc, #244]	; (4010b4 <xTaskGenericCreate+0x1b0>)
  400fc0:	6813      	ldr	r3, [r2, #0]
  400fc2:	3301      	adds	r3, #1
  400fc4:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  400fc6:	4b3c      	ldr	r3, [pc, #240]	; (4010b8 <xTaskGenericCreate+0x1b4>)
  400fc8:	681b      	ldr	r3, [r3, #0]
  400fca:	2b00      	cmp	r3, #0
  400fcc:	d03e      	beq.n	40104c <xTaskGenericCreate+0x148>
				if( xSchedulerRunning == pdFALSE )
  400fce:	4b3b      	ldr	r3, [pc, #236]	; (4010bc <xTaskGenericCreate+0x1b8>)
  400fd0:	681b      	ldr	r3, [r3, #0]
  400fd2:	b933      	cbnz	r3, 400fe2 <xTaskGenericCreate+0xde>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  400fd4:	4b38      	ldr	r3, [pc, #224]	; (4010b8 <xTaskGenericCreate+0x1b4>)
  400fd6:	681b      	ldr	r3, [r3, #0]
  400fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  400fda:	459b      	cmp	fp, r3
  400fdc:	d301      	bcc.n	400fe2 <xTaskGenericCreate+0xde>
						pxCurrentTCB = pxNewTCB;
  400fde:	4b36      	ldr	r3, [pc, #216]	; (4010b8 <xTaskGenericCreate+0x1b4>)
  400fe0:	601c      	str	r4, [r3, #0]
			uxTaskNumber++;
  400fe2:	4a37      	ldr	r2, [pc, #220]	; (4010c0 <xTaskGenericCreate+0x1bc>)
  400fe4:	6813      	ldr	r3, [r2, #0]
  400fe6:	3301      	adds	r3, #1
  400fe8:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  400fea:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  400fec:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  400fee:	4a35      	ldr	r2, [pc, #212]	; (4010c4 <xTaskGenericCreate+0x1c0>)
  400ff0:	6811      	ldr	r1, [r2, #0]
  400ff2:	2301      	movs	r3, #1
  400ff4:	4083      	lsls	r3, r0
  400ff6:	430b      	orrs	r3, r1
  400ff8:	6013      	str	r3, [r2, #0]
  400ffa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400ffe:	4641      	mov	r1, r8
  401000:	4b31      	ldr	r3, [pc, #196]	; (4010c8 <xTaskGenericCreate+0x1c4>)
  401002:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401006:	4b31      	ldr	r3, [pc, #196]	; (4010cc <xTaskGenericCreate+0x1c8>)
  401008:	4798      	blx	r3
		taskEXIT_CRITICAL();
  40100a:	4b31      	ldr	r3, [pc, #196]	; (4010d0 <xTaskGenericCreate+0x1cc>)
  40100c:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  40100e:	4b2b      	ldr	r3, [pc, #172]	; (4010bc <xTaskGenericCreate+0x1b8>)
  401010:	681b      	ldr	r3, [r3, #0]
  401012:	2b00      	cmp	r3, #0
  401014:	d040      	beq.n	401098 <xTaskGenericCreate+0x194>
			if( pxCurrentTCB->uxPriority < uxPriority )
  401016:	4b28      	ldr	r3, [pc, #160]	; (4010b8 <xTaskGenericCreate+0x1b4>)
  401018:	681b      	ldr	r3, [r3, #0]
  40101a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40101c:	459b      	cmp	fp, r3
  40101e:	d93f      	bls.n	4010a0 <xTaskGenericCreate+0x19c>
				taskYIELD_IF_USING_PREEMPTION();
  401020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401024:	4b2b      	ldr	r3, [pc, #172]	; (4010d4 <xTaskGenericCreate+0x1d0>)
  401026:	601a      	str	r2, [r3, #0]
  401028:	f3bf 8f4f 	dsb	sy
  40102c:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  401030:	2001      	movs	r0, #1
  401032:	e032      	b.n	40109a <xTaskGenericCreate+0x196>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401034:	0090      	lsls	r0, r2, #2
  401036:	4b1b      	ldr	r3, [pc, #108]	; (4010a4 <xTaskGenericCreate+0x1a0>)
  401038:	4798      	blx	r3
		if( pxStack != NULL )
  40103a:	4605      	mov	r5, r0
  40103c:	b118      	cbz	r0, 401046 <xTaskGenericCreate+0x142>
  40103e:	e770      	b.n	400f22 <xTaskGenericCreate+0x1e>
				vPortFree( pxStack );
  401040:	4628      	mov	r0, r5
  401042:	4b25      	ldr	r3, [pc, #148]	; (4010d8 <xTaskGenericCreate+0x1d4>)
  401044:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401046:	f04f 30ff 	mov.w	r0, #4294967295
  40104a:	e026      	b.n	40109a <xTaskGenericCreate+0x196>
				pxCurrentTCB =  pxNewTCB;
  40104c:	4b1a      	ldr	r3, [pc, #104]	; (4010b8 <xTaskGenericCreate+0x1b4>)
  40104e:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401050:	6813      	ldr	r3, [r2, #0]
  401052:	2b01      	cmp	r3, #1
  401054:	d1c5      	bne.n	400fe2 <xTaskGenericCreate+0xde>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401056:	4e1c      	ldr	r6, [pc, #112]	; (4010c8 <xTaskGenericCreate+0x1c4>)
  401058:	4630      	mov	r0, r6
  40105a:	4d20      	ldr	r5, [pc, #128]	; (4010dc <xTaskGenericCreate+0x1d8>)
  40105c:	47a8      	blx	r5
  40105e:	f106 0014 	add.w	r0, r6, #20
  401062:	47a8      	blx	r5
  401064:	f106 0028 	add.w	r0, r6, #40	; 0x28
  401068:	47a8      	blx	r5
  40106a:	f106 003c 	add.w	r0, r6, #60	; 0x3c
  40106e:	47a8      	blx	r5
  401070:	f106 0050 	add.w	r0, r6, #80	; 0x50
  401074:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  401076:	4f1a      	ldr	r7, [pc, #104]	; (4010e0 <xTaskGenericCreate+0x1dc>)
  401078:	4638      	mov	r0, r7
  40107a:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  40107c:	4e19      	ldr	r6, [pc, #100]	; (4010e4 <xTaskGenericCreate+0x1e0>)
  40107e:	4630      	mov	r0, r6
  401080:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  401082:	4819      	ldr	r0, [pc, #100]	; (4010e8 <xTaskGenericCreate+0x1e4>)
  401084:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
  401086:	4819      	ldr	r0, [pc, #100]	; (4010ec <xTaskGenericCreate+0x1e8>)
  401088:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  40108a:	4819      	ldr	r0, [pc, #100]	; (4010f0 <xTaskGenericCreate+0x1ec>)
  40108c:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  40108e:	4b19      	ldr	r3, [pc, #100]	; (4010f4 <xTaskGenericCreate+0x1f0>)
  401090:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401092:	4b19      	ldr	r3, [pc, #100]	; (4010f8 <xTaskGenericCreate+0x1f4>)
  401094:	601e      	str	r6, [r3, #0]
  401096:	e7a4      	b.n	400fe2 <xTaskGenericCreate+0xde>
			xReturn = pdPASS;
  401098:	2001      	movs	r0, #1
}
  40109a:	b003      	add	sp, #12
  40109c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
  4010a0:	2001      	movs	r0, #1
	return xReturn;
  4010a2:	e7fa      	b.n	40109a <xTaskGenericCreate+0x196>
  4010a4:	00400719 	.word	0x00400719
  4010a8:	00405dd5 	.word	0x00405dd5
  4010ac:	0040058d 	.word	0x0040058d
  4010b0:	004005d9 	.word	0x004005d9
  4010b4:	2040c264 	.word	0x2040c264
  4010b8:	2040c1f4 	.word	0x2040c1f4
  4010bc:	2040c2c0 	.word	0x2040c2c0
  4010c0:	2040c270 	.word	0x2040c270
  4010c4:	2040c278 	.word	0x2040c278
  4010c8:	2040c200 	.word	0x2040c200
  4010cc:	004004d1 	.word	0x004004d1
  4010d0:	004005fd 	.word	0x004005fd
  4010d4:	e000ed04 	.word	0xe000ed04
  4010d8:	00400789 	.word	0x00400789
  4010dc:	004004b5 	.word	0x004004b5
  4010e0:	2040c27c 	.word	0x2040c27c
  4010e4:	2040c290 	.word	0x2040c290
  4010e8:	2040c2ac 	.word	0x2040c2ac
  4010ec:	2040c2d8 	.word	0x2040c2d8
  4010f0:	2040c2c4 	.word	0x2040c2c4
  4010f4:	2040c1f8 	.word	0x2040c1f8
  4010f8:	2040c1fc 	.word	0x2040c1fc
  4010fc:	004004cb 	.word	0x004004cb

00401100 <vTaskStartScheduler>:
{
  401100:	b510      	push	{r4, lr}
  401102:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401104:	2300      	movs	r3, #0
  401106:	9303      	str	r3, [sp, #12]
  401108:	9302      	str	r3, [sp, #8]
  40110a:	9301      	str	r3, [sp, #4]
  40110c:	9300      	str	r3, [sp, #0]
  40110e:	2282      	movs	r2, #130	; 0x82
  401110:	4911      	ldr	r1, [pc, #68]	; (401158 <vTaskStartScheduler+0x58>)
  401112:	4812      	ldr	r0, [pc, #72]	; (40115c <vTaskStartScheduler+0x5c>)
  401114:	4c12      	ldr	r4, [pc, #72]	; (401160 <vTaskStartScheduler+0x60>)
  401116:	47a0      	blx	r4
		if( xReturn == pdPASS )
  401118:	2801      	cmp	r0, #1
  40111a:	d001      	beq.n	401120 <vTaskStartScheduler+0x20>
}
  40111c:	b004      	add	sp, #16
  40111e:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
  401120:	4b10      	ldr	r3, [pc, #64]	; (401164 <vTaskStartScheduler+0x64>)
  401122:	4798      	blx	r3
	if( xReturn == pdPASS )
  401124:	2801      	cmp	r0, #1
  401126:	d1f9      	bne.n	40111c <vTaskStartScheduler+0x1c>
	__asm volatile
  401128:	f04f 0380 	mov.w	r3, #128	; 0x80
  40112c:	b672      	cpsid	i
  40112e:	f383 8811 	msr	BASEPRI, r3
  401132:	f3bf 8f6f 	isb	sy
  401136:	f3bf 8f4f 	dsb	sy
  40113a:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  40113c:	f04f 32ff 	mov.w	r2, #4294967295
  401140:	4b09      	ldr	r3, [pc, #36]	; (401168 <vTaskStartScheduler+0x68>)
  401142:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401144:	2201      	movs	r2, #1
  401146:	4b09      	ldr	r3, [pc, #36]	; (40116c <vTaskStartScheduler+0x6c>)
  401148:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  40114a:	2200      	movs	r2, #0
  40114c:	4b08      	ldr	r3, [pc, #32]	; (401170 <vTaskStartScheduler+0x70>)
  40114e:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  401150:	4b08      	ldr	r3, [pc, #32]	; (401174 <vTaskStartScheduler+0x74>)
  401152:	4798      	blx	r3
}
  401154:	e7e2      	b.n	40111c <vTaskStartScheduler+0x1c>
  401156:	bf00      	nop
  401158:	00408bc4 	.word	0x00408bc4
  40115c:	0040143d 	.word	0x0040143d
  401160:	00400f05 	.word	0x00400f05
  401164:	00401981 	.word	0x00401981
  401168:	2040c2a4 	.word	0x2040c2a4
  40116c:	2040c2c0 	.word	0x2040c2c0
  401170:	2040c2ec 	.word	0x2040c2ec
  401174:	004006c9 	.word	0x004006c9

00401178 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401178:	4a02      	ldr	r2, [pc, #8]	; (401184 <vTaskSuspendAll+0xc>)
  40117a:	6813      	ldr	r3, [r2, #0]
  40117c:	3301      	adds	r3, #1
  40117e:	6013      	str	r3, [r2, #0]
  401180:	4770      	bx	lr
  401182:	bf00      	nop
  401184:	2040c26c 	.word	0x2040c26c

00401188 <xTaskGetTickCount>:
		xTicks = xTickCount;
  401188:	4b01      	ldr	r3, [pc, #4]	; (401190 <xTaskGetTickCount+0x8>)
  40118a:	6818      	ldr	r0, [r3, #0]
}
  40118c:	4770      	bx	lr
  40118e:	bf00      	nop
  401190:	2040c2ec 	.word	0x2040c2ec

00401194 <xTaskIncrementTick>:
{
  401194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401198:	4b3d      	ldr	r3, [pc, #244]	; (401290 <xTaskIncrementTick+0xfc>)
  40119a:	681b      	ldr	r3, [r3, #0]
  40119c:	2b00      	cmp	r3, #0
  40119e:	d16e      	bne.n	40127e <xTaskIncrementTick+0xea>
		++xTickCount;
  4011a0:	4b3c      	ldr	r3, [pc, #240]	; (401294 <xTaskIncrementTick+0x100>)
  4011a2:	681a      	ldr	r2, [r3, #0]
  4011a4:	3201      	adds	r2, #1
  4011a6:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  4011a8:	f8d3 a000 	ldr.w	sl, [r3]
			if( xConstTickCount == ( TickType_t ) 0U )
  4011ac:	f1ba 0f00 	cmp.w	sl, #0
  4011b0:	d01b      	beq.n	4011ea <xTaskIncrementTick+0x56>
			if( xConstTickCount >= xNextTaskUnblockTime )
  4011b2:	4b39      	ldr	r3, [pc, #228]	; (401298 <xTaskIncrementTick+0x104>)
  4011b4:	681b      	ldr	r3, [r3, #0]
  4011b6:	459a      	cmp	sl, r3
  4011b8:	d224      	bcs.n	401204 <xTaskIncrementTick+0x70>
BaseType_t xSwitchRequired = pdFALSE;
  4011ba:	2600      	movs	r6, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4011bc:	4b37      	ldr	r3, [pc, #220]	; (40129c <xTaskIncrementTick+0x108>)
  4011be:	681b      	ldr	r3, [r3, #0]
  4011c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4011c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4011c6:	4a36      	ldr	r2, [pc, #216]	; (4012a0 <xTaskIncrementTick+0x10c>)
  4011c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  4011cc:	2b02      	cmp	r3, #2
  4011ce:	bf28      	it	cs
  4011d0:	2601      	movcs	r6, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  4011d2:	4b34      	ldr	r3, [pc, #208]	; (4012a4 <xTaskIncrementTick+0x110>)
  4011d4:	681b      	ldr	r3, [r3, #0]
  4011d6:	2b00      	cmp	r3, #0
  4011d8:	d04e      	beq.n	401278 <xTaskIncrementTick+0xe4>
		if( xYieldPending != pdFALSE )
  4011da:	4b33      	ldr	r3, [pc, #204]	; (4012a8 <xTaskIncrementTick+0x114>)
  4011dc:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  4011de:	2b00      	cmp	r3, #0
}
  4011e0:	bf0c      	ite	eq
  4011e2:	4630      	moveq	r0, r6
  4011e4:	2001      	movne	r0, #1
  4011e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				taskSWITCH_DELAYED_LISTS();
  4011ea:	4a30      	ldr	r2, [pc, #192]	; (4012ac <xTaskIncrementTick+0x118>)
  4011ec:	6811      	ldr	r1, [r2, #0]
  4011ee:	4b30      	ldr	r3, [pc, #192]	; (4012b0 <xTaskIncrementTick+0x11c>)
  4011f0:	6818      	ldr	r0, [r3, #0]
  4011f2:	6010      	str	r0, [r2, #0]
  4011f4:	6019      	str	r1, [r3, #0]
  4011f6:	4a2f      	ldr	r2, [pc, #188]	; (4012b4 <xTaskIncrementTick+0x120>)
  4011f8:	6813      	ldr	r3, [r2, #0]
  4011fa:	3301      	adds	r3, #1
  4011fc:	6013      	str	r3, [r2, #0]
  4011fe:	4b2e      	ldr	r3, [pc, #184]	; (4012b8 <xTaskIncrementTick+0x124>)
  401200:	4798      	blx	r3
  401202:	e7d6      	b.n	4011b2 <xTaskIncrementTick+0x1e>
  401204:	2600      	movs	r6, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401206:	4f29      	ldr	r7, [pc, #164]	; (4012ac <xTaskIncrementTick+0x118>)
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401208:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 4012c4 <xTaskIncrementTick+0x130>
						prvAddTaskToReadyList( pxTCB );
  40120c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4012c8 <xTaskIncrementTick+0x134>
  401210:	e021      	b.n	401256 <xTaskIncrementTick+0xc2>
						xNextTaskUnblockTime = portMAX_DELAY;
  401212:	f04f 32ff 	mov.w	r2, #4294967295
  401216:	4b20      	ldr	r3, [pc, #128]	; (401298 <xTaskIncrementTick+0x104>)
  401218:	601a      	str	r2, [r3, #0]
						break;
  40121a:	e7cf      	b.n	4011bc <xTaskIncrementTick+0x28>
							xNextTaskUnblockTime = xItemValue;
  40121c:	4a1e      	ldr	r2, [pc, #120]	; (401298 <xTaskIncrementTick+0x104>)
  40121e:	6013      	str	r3, [r2, #0]
							break;
  401220:	e7cc      	b.n	4011bc <xTaskIncrementTick+0x28>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401222:	f104 0018 	add.w	r0, r4, #24
  401226:	47c8      	blx	r9
						prvAddTaskToReadyList( pxTCB );
  401228:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40122a:	f8d8 2000 	ldr.w	r2, [r8]
  40122e:	2301      	movs	r3, #1
  401230:	4083      	lsls	r3, r0
  401232:	4313      	orrs	r3, r2
  401234:	f8c8 3000 	str.w	r3, [r8]
  401238:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40123c:	4629      	mov	r1, r5
  40123e:	4b18      	ldr	r3, [pc, #96]	; (4012a0 <xTaskIncrementTick+0x10c>)
  401240:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401244:	4b1d      	ldr	r3, [pc, #116]	; (4012bc <xTaskIncrementTick+0x128>)
  401246:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401248:	4b14      	ldr	r3, [pc, #80]	; (40129c <xTaskIncrementTick+0x108>)
  40124a:	681b      	ldr	r3, [r3, #0]
  40124c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40124e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  401250:	429a      	cmp	r2, r3
  401252:	bf28      	it	cs
  401254:	2601      	movcs	r6, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401256:	683b      	ldr	r3, [r7, #0]
  401258:	681b      	ldr	r3, [r3, #0]
  40125a:	2b00      	cmp	r3, #0
  40125c:	d0d9      	beq.n	401212 <xTaskIncrementTick+0x7e>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  40125e:	683b      	ldr	r3, [r7, #0]
  401260:	68db      	ldr	r3, [r3, #12]
  401262:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401264:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
  401266:	459a      	cmp	sl, r3
  401268:	d3d8      	bcc.n	40121c <xTaskIncrementTick+0x88>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40126a:	1d25      	adds	r5, r4, #4
  40126c:	4628      	mov	r0, r5
  40126e:	47c8      	blx	r9
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401270:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  401272:	2b00      	cmp	r3, #0
  401274:	d1d5      	bne.n	401222 <xTaskIncrementTick+0x8e>
  401276:	e7d7      	b.n	401228 <xTaskIncrementTick+0x94>
				vApplicationTickHook();
  401278:	4b11      	ldr	r3, [pc, #68]	; (4012c0 <xTaskIncrementTick+0x12c>)
  40127a:	4798      	blx	r3
  40127c:	e7ad      	b.n	4011da <xTaskIncrementTick+0x46>
		++uxPendedTicks;
  40127e:	4a09      	ldr	r2, [pc, #36]	; (4012a4 <xTaskIncrementTick+0x110>)
  401280:	6813      	ldr	r3, [r2, #0]
  401282:	3301      	adds	r3, #1
  401284:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  401286:	4b0e      	ldr	r3, [pc, #56]	; (4012c0 <xTaskIncrementTick+0x12c>)
  401288:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  40128a:	2600      	movs	r6, #0
  40128c:	e7a5      	b.n	4011da <xTaskIncrementTick+0x46>
  40128e:	bf00      	nop
  401290:	2040c26c 	.word	0x2040c26c
  401294:	2040c2ec 	.word	0x2040c2ec
  401298:	2040c2a4 	.word	0x2040c2a4
  40129c:	2040c1f4 	.word	0x2040c1f4
  4012a0:	2040c200 	.word	0x2040c200
  4012a4:	2040c268 	.word	0x2040c268
  4012a8:	2040c2f0 	.word	0x2040c2f0
  4012ac:	2040c1f8 	.word	0x2040c1f8
  4012b0:	2040c1fc 	.word	0x2040c1fc
  4012b4:	2040c2a8 	.word	0x2040c2a8
  4012b8:	00400e81 	.word	0x00400e81
  4012bc:	004004d1 	.word	0x004004d1
  4012c0:	004058e9 	.word	0x004058e9
  4012c4:	0040051d 	.word	0x0040051d
  4012c8:	2040c278 	.word	0x2040c278

004012cc <xTaskResumeAll>:
{
  4012cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	taskENTER_CRITICAL();
  4012d0:	4b2f      	ldr	r3, [pc, #188]	; (401390 <xTaskResumeAll+0xc4>)
  4012d2:	4798      	blx	r3
		--uxSchedulerSuspended;
  4012d4:	4b2f      	ldr	r3, [pc, #188]	; (401394 <xTaskResumeAll+0xc8>)
  4012d6:	681a      	ldr	r2, [r3, #0]
  4012d8:	3a01      	subs	r2, #1
  4012da:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4012dc:	681b      	ldr	r3, [r3, #0]
  4012de:	2b00      	cmp	r3, #0
  4012e0:	d150      	bne.n	401384 <xTaskResumeAll+0xb8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  4012e2:	4b2d      	ldr	r3, [pc, #180]	; (401398 <xTaskResumeAll+0xcc>)
  4012e4:	681b      	ldr	r3, [r3, #0]
  4012e6:	b333      	cbz	r3, 401336 <xTaskResumeAll+0x6a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4012e8:	4e2c      	ldr	r6, [pc, #176]	; (40139c <xTaskResumeAll+0xd0>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4012ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 4013c0 <xTaskResumeAll+0xf4>
					prvAddTaskToReadyList( pxTCB );
  4012ee:	4f2c      	ldr	r7, [pc, #176]	; (4013a0 <xTaskResumeAll+0xd4>)
  4012f0:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 4013c4 <xTaskResumeAll+0xf8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4012f4:	6833      	ldr	r3, [r6, #0]
  4012f6:	b303      	cbz	r3, 40133a <xTaskResumeAll+0x6e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4012f8:	68f3      	ldr	r3, [r6, #12]
  4012fa:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4012fc:	f104 0018 	add.w	r0, r4, #24
  401300:	47c0      	blx	r8
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401302:	1d25      	adds	r5, r4, #4
  401304:	4628      	mov	r0, r5
  401306:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
  401308:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40130a:	683a      	ldr	r2, [r7, #0]
  40130c:	2301      	movs	r3, #1
  40130e:	4083      	lsls	r3, r0
  401310:	4313      	orrs	r3, r2
  401312:	603b      	str	r3, [r7, #0]
  401314:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401318:	4629      	mov	r1, r5
  40131a:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  40131e:	4b21      	ldr	r3, [pc, #132]	; (4013a4 <xTaskResumeAll+0xd8>)
  401320:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401322:	4b21      	ldr	r3, [pc, #132]	; (4013a8 <xTaskResumeAll+0xdc>)
  401324:	681b      	ldr	r3, [r3, #0]
  401326:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40132a:	429a      	cmp	r2, r3
  40132c:	d3e2      	bcc.n	4012f4 <xTaskResumeAll+0x28>
						xYieldPending = pdTRUE;
  40132e:	2201      	movs	r2, #1
  401330:	4b1e      	ldr	r3, [pc, #120]	; (4013ac <xTaskResumeAll+0xe0>)
  401332:	601a      	str	r2, [r3, #0]
  401334:	e7de      	b.n	4012f4 <xTaskResumeAll+0x28>
BaseType_t xAlreadyYielded = pdFALSE;
  401336:	2400      	movs	r4, #0
  401338:	e025      	b.n	401386 <xTaskResumeAll+0xba>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  40133a:	4b1d      	ldr	r3, [pc, #116]	; (4013b0 <xTaskResumeAll+0xe4>)
  40133c:	681b      	ldr	r3, [r3, #0]
  40133e:	b18b      	cbz	r3, 401364 <xTaskResumeAll+0x98>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401340:	4b1b      	ldr	r3, [pc, #108]	; (4013b0 <xTaskResumeAll+0xe4>)
  401342:	681b      	ldr	r3, [r3, #0]
  401344:	b173      	cbz	r3, 401364 <xTaskResumeAll+0x98>
						if( xTaskIncrementTick() != pdFALSE )
  401346:	4d1b      	ldr	r5, [pc, #108]	; (4013b4 <xTaskResumeAll+0xe8>)
							xYieldPending = pdTRUE;
  401348:	4e18      	ldr	r6, [pc, #96]	; (4013ac <xTaskResumeAll+0xe0>)
						--uxPendedTicks;
  40134a:	4c19      	ldr	r4, [pc, #100]	; (4013b0 <xTaskResumeAll+0xe4>)
  40134c:	e004      	b.n	401358 <xTaskResumeAll+0x8c>
  40134e:	6823      	ldr	r3, [r4, #0]
  401350:	3b01      	subs	r3, #1
  401352:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401354:	6823      	ldr	r3, [r4, #0]
  401356:	b12b      	cbz	r3, 401364 <xTaskResumeAll+0x98>
						if( xTaskIncrementTick() != pdFALSE )
  401358:	47a8      	blx	r5
  40135a:	2800      	cmp	r0, #0
  40135c:	d0f7      	beq.n	40134e <xTaskResumeAll+0x82>
							xYieldPending = pdTRUE;
  40135e:	2301      	movs	r3, #1
  401360:	6033      	str	r3, [r6, #0]
  401362:	e7f4      	b.n	40134e <xTaskResumeAll+0x82>
				if( xYieldPending == pdTRUE )
  401364:	4b11      	ldr	r3, [pc, #68]	; (4013ac <xTaskResumeAll+0xe0>)
  401366:	681b      	ldr	r3, [r3, #0]
  401368:	2b01      	cmp	r3, #1
  40136a:	d001      	beq.n	401370 <xTaskResumeAll+0xa4>
BaseType_t xAlreadyYielded = pdFALSE;
  40136c:	2400      	movs	r4, #0
  40136e:	e00a      	b.n	401386 <xTaskResumeAll+0xba>
					taskYIELD_IF_USING_PREEMPTION();
  401370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401374:	4b10      	ldr	r3, [pc, #64]	; (4013b8 <xTaskResumeAll+0xec>)
  401376:	601a      	str	r2, [r3, #0]
  401378:	f3bf 8f4f 	dsb	sy
  40137c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  401380:	2401      	movs	r4, #1
  401382:	e000      	b.n	401386 <xTaskResumeAll+0xba>
BaseType_t xAlreadyYielded = pdFALSE;
  401384:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401386:	4b0d      	ldr	r3, [pc, #52]	; (4013bc <xTaskResumeAll+0xf0>)
  401388:	4798      	blx	r3
}
  40138a:	4620      	mov	r0, r4
  40138c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401390:	004005d9 	.word	0x004005d9
  401394:	2040c26c 	.word	0x2040c26c
  401398:	2040c264 	.word	0x2040c264
  40139c:	2040c2ac 	.word	0x2040c2ac
  4013a0:	2040c278 	.word	0x2040c278
  4013a4:	004004d1 	.word	0x004004d1
  4013a8:	2040c1f4 	.word	0x2040c1f4
  4013ac:	2040c2f0 	.word	0x2040c2f0
  4013b0:	2040c268 	.word	0x2040c268
  4013b4:	00401195 	.word	0x00401195
  4013b8:	e000ed04 	.word	0xe000ed04
  4013bc:	004005fd 	.word	0x004005fd
  4013c0:	0040051d 	.word	0x0040051d
  4013c4:	2040c200 	.word	0x2040c200

004013c8 <vTaskDelay>:
	{
  4013c8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  4013ca:	b940      	cbnz	r0, 4013de <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
  4013cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4013d0:	4b12      	ldr	r3, [pc, #72]	; (40141c <vTaskDelay+0x54>)
  4013d2:	601a      	str	r2, [r3, #0]
  4013d4:	f3bf 8f4f 	dsb	sy
  4013d8:	f3bf 8f6f 	isb	sy
  4013dc:	bd10      	pop	{r4, pc}
  4013de:	4604      	mov	r4, r0
			vTaskSuspendAll();
  4013e0:	4b0f      	ldr	r3, [pc, #60]	; (401420 <vTaskDelay+0x58>)
  4013e2:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  4013e4:	4b0f      	ldr	r3, [pc, #60]	; (401424 <vTaskDelay+0x5c>)
  4013e6:	681b      	ldr	r3, [r3, #0]
  4013e8:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4013ea:	4b0f      	ldr	r3, [pc, #60]	; (401428 <vTaskDelay+0x60>)
  4013ec:	6818      	ldr	r0, [r3, #0]
  4013ee:	3004      	adds	r0, #4
  4013f0:	4b0e      	ldr	r3, [pc, #56]	; (40142c <vTaskDelay+0x64>)
  4013f2:	4798      	blx	r3
  4013f4:	b948      	cbnz	r0, 40140a <vTaskDelay+0x42>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4013f6:	4b0c      	ldr	r3, [pc, #48]	; (401428 <vTaskDelay+0x60>)
  4013f8:	681a      	ldr	r2, [r3, #0]
  4013fa:	490d      	ldr	r1, [pc, #52]	; (401430 <vTaskDelay+0x68>)
  4013fc:	680b      	ldr	r3, [r1, #0]
  4013fe:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401400:	2201      	movs	r2, #1
  401402:	4082      	lsls	r2, r0
  401404:	ea23 0302 	bic.w	r3, r3, r2
  401408:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40140a:	4620      	mov	r0, r4
  40140c:	4b09      	ldr	r3, [pc, #36]	; (401434 <vTaskDelay+0x6c>)
  40140e:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  401410:	4b09      	ldr	r3, [pc, #36]	; (401438 <vTaskDelay+0x70>)
  401412:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  401414:	2800      	cmp	r0, #0
  401416:	d1e1      	bne.n	4013dc <vTaskDelay+0x14>
  401418:	e7d8      	b.n	4013cc <vTaskDelay+0x4>
  40141a:	bf00      	nop
  40141c:	e000ed04 	.word	0xe000ed04
  401420:	00401179 	.word	0x00401179
  401424:	2040c2ec 	.word	0x2040c2ec
  401428:	2040c1f4 	.word	0x2040c1f4
  40142c:	0040051d 	.word	0x0040051d
  401430:	2040c278 	.word	0x2040c278
  401434:	00400ead 	.word	0x00400ead
  401438:	004012cd 	.word	0x004012cd

0040143c <prvIdleTask>:
{
  40143c:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  40143e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4014c8 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401442:	4e19      	ldr	r6, [pc, #100]	; (4014a8 <prvIdleTask+0x6c>)
				taskYIELD();
  401444:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4014cc <prvIdleTask+0x90>
  401448:	e02a      	b.n	4014a0 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40144a:	4b18      	ldr	r3, [pc, #96]	; (4014ac <prvIdleTask+0x70>)
  40144c:	681b      	ldr	r3, [r3, #0]
  40144e:	2b01      	cmp	r3, #1
  401450:	d81e      	bhi.n	401490 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401452:	682b      	ldr	r3, [r5, #0]
  401454:	2b00      	cmp	r3, #0
  401456:	d0f8      	beq.n	40144a <prvIdleTask+0xe>
			vTaskSuspendAll();
  401458:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40145a:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  40145c:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  40145e:	2c00      	cmp	r4, #0
  401460:	d0f7      	beq.n	401452 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  401462:	4b13      	ldr	r3, [pc, #76]	; (4014b0 <prvIdleTask+0x74>)
  401464:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401466:	68f3      	ldr	r3, [r6, #12]
  401468:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40146a:	1d20      	adds	r0, r4, #4
  40146c:	4b11      	ldr	r3, [pc, #68]	; (4014b4 <prvIdleTask+0x78>)
  40146e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401470:	4a11      	ldr	r2, [pc, #68]	; (4014b8 <prvIdleTask+0x7c>)
  401472:	6813      	ldr	r3, [r2, #0]
  401474:	3b01      	subs	r3, #1
  401476:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401478:	682b      	ldr	r3, [r5, #0]
  40147a:	3b01      	subs	r3, #1
  40147c:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  40147e:	4b0f      	ldr	r3, [pc, #60]	; (4014bc <prvIdleTask+0x80>)
  401480:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  401482:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401484:	f8df a048 	ldr.w	sl, [pc, #72]	; 4014d0 <prvIdleTask+0x94>
  401488:	47d0      	blx	sl
		vPortFree( pxTCB );
  40148a:	4620      	mov	r0, r4
  40148c:	47d0      	blx	sl
  40148e:	e7e0      	b.n	401452 <prvIdleTask+0x16>
				taskYIELD();
  401490:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401494:	f8c9 3000 	str.w	r3, [r9]
  401498:	f3bf 8f4f 	dsb	sy
  40149c:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4014a0:	4d07      	ldr	r5, [pc, #28]	; (4014c0 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  4014a2:	4f08      	ldr	r7, [pc, #32]	; (4014c4 <prvIdleTask+0x88>)
  4014a4:	e7d5      	b.n	401452 <prvIdleTask+0x16>
  4014a6:	bf00      	nop
  4014a8:	2040c2d8 	.word	0x2040c2d8
  4014ac:	2040c200 	.word	0x2040c200
  4014b0:	004005d9 	.word	0x004005d9
  4014b4:	0040051d 	.word	0x0040051d
  4014b8:	2040c264 	.word	0x2040c264
  4014bc:	004005fd 	.word	0x004005fd
  4014c0:	2040c274 	.word	0x2040c274
  4014c4:	004012cd 	.word	0x004012cd
  4014c8:	00401179 	.word	0x00401179
  4014cc:	e000ed04 	.word	0xe000ed04
  4014d0:	00400789 	.word	0x00400789

004014d4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4014d4:	4b25      	ldr	r3, [pc, #148]	; (40156c <vTaskSwitchContext+0x98>)
  4014d6:	681b      	ldr	r3, [r3, #0]
  4014d8:	2b00      	cmp	r3, #0
  4014da:	d12e      	bne.n	40153a <vTaskSwitchContext+0x66>
{
  4014dc:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4014de:	2200      	movs	r2, #0
  4014e0:	4b23      	ldr	r3, [pc, #140]	; (401570 <vTaskSwitchContext+0x9c>)
  4014e2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4014e4:	4b23      	ldr	r3, [pc, #140]	; (401574 <vTaskSwitchContext+0xa0>)
  4014e6:	681b      	ldr	r3, [r3, #0]
  4014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4014ea:	681a      	ldr	r2, [r3, #0]
  4014ec:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4014f0:	d027      	beq.n	401542 <vTaskSwitchContext+0x6e>
  4014f2:	4b20      	ldr	r3, [pc, #128]	; (401574 <vTaskSwitchContext+0xa0>)
  4014f4:	6818      	ldr	r0, [r3, #0]
  4014f6:	6819      	ldr	r1, [r3, #0]
  4014f8:	3134      	adds	r1, #52	; 0x34
  4014fa:	4b1f      	ldr	r3, [pc, #124]	; (401578 <vTaskSwitchContext+0xa4>)
  4014fc:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4014fe:	4b1f      	ldr	r3, [pc, #124]	; (40157c <vTaskSwitchContext+0xa8>)
  401500:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401502:	fab3 f383 	clz	r3, r3
  401506:	b2db      	uxtb	r3, r3
  401508:	f1c3 031f 	rsb	r3, r3, #31
  40150c:	4a1c      	ldr	r2, [pc, #112]	; (401580 <vTaskSwitchContext+0xac>)
  40150e:	0099      	lsls	r1, r3, #2
  401510:	18c8      	adds	r0, r1, r3
  401512:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  401516:	6844      	ldr	r4, [r0, #4]
  401518:	6864      	ldr	r4, [r4, #4]
  40151a:	6044      	str	r4, [r0, #4]
  40151c:	4419      	add	r1, r3
  40151e:	4602      	mov	r2, r0
  401520:	3208      	adds	r2, #8
  401522:	4294      	cmp	r4, r2
  401524:	d01a      	beq.n	40155c <vTaskSwitchContext+0x88>
  401526:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40152a:	4a15      	ldr	r2, [pc, #84]	; (401580 <vTaskSwitchContext+0xac>)
  40152c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401530:	685b      	ldr	r3, [r3, #4]
  401532:	68da      	ldr	r2, [r3, #12]
  401534:	4b0f      	ldr	r3, [pc, #60]	; (401574 <vTaskSwitchContext+0xa0>)
  401536:	601a      	str	r2, [r3, #0]
  401538:	bd10      	pop	{r4, pc}
		xYieldPending = pdTRUE;
  40153a:	2201      	movs	r2, #1
  40153c:	4b0c      	ldr	r3, [pc, #48]	; (401570 <vTaskSwitchContext+0x9c>)
  40153e:	601a      	str	r2, [r3, #0]
  401540:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  401542:	685a      	ldr	r2, [r3, #4]
  401544:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401548:	d1d3      	bne.n	4014f2 <vTaskSwitchContext+0x1e>
  40154a:	689a      	ldr	r2, [r3, #8]
  40154c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401550:	d1cf      	bne.n	4014f2 <vTaskSwitchContext+0x1e>
  401552:	68db      	ldr	r3, [r3, #12]
  401554:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  401558:	d1cb      	bne.n	4014f2 <vTaskSwitchContext+0x1e>
  40155a:	e7d0      	b.n	4014fe <vTaskSwitchContext+0x2a>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40155c:	6860      	ldr	r0, [r4, #4]
  40155e:	460a      	mov	r2, r1
  401560:	4907      	ldr	r1, [pc, #28]	; (401580 <vTaskSwitchContext+0xac>)
  401562:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  401566:	6050      	str	r0, [r2, #4]
  401568:	e7dd      	b.n	401526 <vTaskSwitchContext+0x52>
  40156a:	bf00      	nop
  40156c:	2040c26c 	.word	0x2040c26c
  401570:	2040c2f0 	.word	0x2040c2f0
  401574:	2040c1f4 	.word	0x2040c1f4
  401578:	004058d1 	.word	0x004058d1
  40157c:	2040c278 	.word	0x2040c278
  401580:	2040c200 	.word	0x2040c200

00401584 <vTaskPlaceOnEventList>:
{
  401584:	b538      	push	{r3, r4, r5, lr}
  401586:	460d      	mov	r5, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401588:	4c11      	ldr	r4, [pc, #68]	; (4015d0 <vTaskPlaceOnEventList+0x4c>)
  40158a:	6821      	ldr	r1, [r4, #0]
  40158c:	3118      	adds	r1, #24
  40158e:	4b11      	ldr	r3, [pc, #68]	; (4015d4 <vTaskPlaceOnEventList+0x50>)
  401590:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401592:	6820      	ldr	r0, [r4, #0]
  401594:	3004      	adds	r0, #4
  401596:	4b10      	ldr	r3, [pc, #64]	; (4015d8 <vTaskPlaceOnEventList+0x54>)
  401598:	4798      	blx	r3
  40159a:	b940      	cbnz	r0, 4015ae <vTaskPlaceOnEventList+0x2a>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40159c:	6822      	ldr	r2, [r4, #0]
  40159e:	490f      	ldr	r1, [pc, #60]	; (4015dc <vTaskPlaceOnEventList+0x58>)
  4015a0:	680b      	ldr	r3, [r1, #0]
  4015a2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4015a4:	2201      	movs	r2, #1
  4015a6:	4082      	lsls	r2, r0
  4015a8:	ea23 0302 	bic.w	r3, r3, r2
  4015ac:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  4015ae:	f1b5 3fff 	cmp.w	r5, #4294967295
  4015b2:	d005      	beq.n	4015c0 <vTaskPlaceOnEventList+0x3c>
			xTimeToWake = xTickCount + xTicksToWait;
  4015b4:	4b0a      	ldr	r3, [pc, #40]	; (4015e0 <vTaskPlaceOnEventList+0x5c>)
  4015b6:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4015b8:	4428      	add	r0, r5
  4015ba:	4b0a      	ldr	r3, [pc, #40]	; (4015e4 <vTaskPlaceOnEventList+0x60>)
  4015bc:	4798      	blx	r3
  4015be:	bd38      	pop	{r3, r4, r5, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4015c0:	4b03      	ldr	r3, [pc, #12]	; (4015d0 <vTaskPlaceOnEventList+0x4c>)
  4015c2:	6819      	ldr	r1, [r3, #0]
  4015c4:	3104      	adds	r1, #4
  4015c6:	4808      	ldr	r0, [pc, #32]	; (4015e8 <vTaskPlaceOnEventList+0x64>)
  4015c8:	4b08      	ldr	r3, [pc, #32]	; (4015ec <vTaskPlaceOnEventList+0x68>)
  4015ca:	4798      	blx	r3
  4015cc:	bd38      	pop	{r3, r4, r5, pc}
  4015ce:	bf00      	nop
  4015d0:	2040c1f4 	.word	0x2040c1f4
  4015d4:	004004e9 	.word	0x004004e9
  4015d8:	0040051d 	.word	0x0040051d
  4015dc:	2040c278 	.word	0x2040c278
  4015e0:	2040c2ec 	.word	0x2040c2ec
  4015e4:	00400ead 	.word	0x00400ead
  4015e8:	2040c2c4 	.word	0x2040c2c4
  4015ec:	004004d1 	.word	0x004004d1

004015f0 <vTaskPlaceOnEventListRestricted>:
	{
  4015f0:	b570      	push	{r4, r5, r6, lr}
  4015f2:	460e      	mov	r6, r1
  4015f4:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4015f6:	4c11      	ldr	r4, [pc, #68]	; (40163c <vTaskPlaceOnEventListRestricted+0x4c>)
  4015f8:	6821      	ldr	r1, [r4, #0]
  4015fa:	3118      	adds	r1, #24
  4015fc:	4b10      	ldr	r3, [pc, #64]	; (401640 <vTaskPlaceOnEventListRestricted+0x50>)
  4015fe:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401600:	6820      	ldr	r0, [r4, #0]
  401602:	3004      	adds	r0, #4
  401604:	4b0f      	ldr	r3, [pc, #60]	; (401644 <vTaskPlaceOnEventListRestricted+0x54>)
  401606:	4798      	blx	r3
  401608:	b940      	cbnz	r0, 40161c <vTaskPlaceOnEventListRestricted+0x2c>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40160a:	6822      	ldr	r2, [r4, #0]
  40160c:	490e      	ldr	r1, [pc, #56]	; (401648 <vTaskPlaceOnEventListRestricted+0x58>)
  40160e:	680b      	ldr	r3, [r1, #0]
  401610:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401612:	2201      	movs	r2, #1
  401614:	4082      	lsls	r2, r0
  401616:	ea23 0302 	bic.w	r3, r3, r2
  40161a:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  40161c:	2d01      	cmp	r5, #1
  40161e:	d005      	beq.n	40162c <vTaskPlaceOnEventListRestricted+0x3c>
				xTimeToWake = xTickCount + xTicksToWait;
  401620:	4b0a      	ldr	r3, [pc, #40]	; (40164c <vTaskPlaceOnEventListRestricted+0x5c>)
  401622:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401624:	4430      	add	r0, r6
  401626:	4b0a      	ldr	r3, [pc, #40]	; (401650 <vTaskPlaceOnEventListRestricted+0x60>)
  401628:	4798      	blx	r3
  40162a:	bd70      	pop	{r4, r5, r6, pc}
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40162c:	4b03      	ldr	r3, [pc, #12]	; (40163c <vTaskPlaceOnEventListRestricted+0x4c>)
  40162e:	6819      	ldr	r1, [r3, #0]
  401630:	3104      	adds	r1, #4
  401632:	4808      	ldr	r0, [pc, #32]	; (401654 <vTaskPlaceOnEventListRestricted+0x64>)
  401634:	4b02      	ldr	r3, [pc, #8]	; (401640 <vTaskPlaceOnEventListRestricted+0x50>)
  401636:	4798      	blx	r3
  401638:	bd70      	pop	{r4, r5, r6, pc}
  40163a:	bf00      	nop
  40163c:	2040c1f4 	.word	0x2040c1f4
  401640:	004004d1 	.word	0x004004d1
  401644:	0040051d 	.word	0x0040051d
  401648:	2040c278 	.word	0x2040c278
  40164c:	2040c2ec 	.word	0x2040c2ec
  401650:	00400ead 	.word	0x00400ead
  401654:	2040c2c4 	.word	0x2040c2c4

00401658 <xTaskRemoveFromEventList>:
{
  401658:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40165a:	68c3      	ldr	r3, [r0, #12]
  40165c:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  40165e:	f104 0518 	add.w	r5, r4, #24
  401662:	4628      	mov	r0, r5
  401664:	4b14      	ldr	r3, [pc, #80]	; (4016b8 <xTaskRemoveFromEventList+0x60>)
  401666:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401668:	4b14      	ldr	r3, [pc, #80]	; (4016bc <xTaskRemoveFromEventList+0x64>)
  40166a:	681b      	ldr	r3, [r3, #0]
  40166c:	b9e3      	cbnz	r3, 4016a8 <xTaskRemoveFromEventList+0x50>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  40166e:	1d25      	adds	r5, r4, #4
  401670:	4628      	mov	r0, r5
  401672:	4b11      	ldr	r3, [pc, #68]	; (4016b8 <xTaskRemoveFromEventList+0x60>)
  401674:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  401676:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401678:	4a11      	ldr	r2, [pc, #68]	; (4016c0 <xTaskRemoveFromEventList+0x68>)
  40167a:	6811      	ldr	r1, [r2, #0]
  40167c:	2301      	movs	r3, #1
  40167e:	4083      	lsls	r3, r0
  401680:	430b      	orrs	r3, r1
  401682:	6013      	str	r3, [r2, #0]
  401684:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401688:	4629      	mov	r1, r5
  40168a:	4b0e      	ldr	r3, [pc, #56]	; (4016c4 <xTaskRemoveFromEventList+0x6c>)
  40168c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401690:	4b0d      	ldr	r3, [pc, #52]	; (4016c8 <xTaskRemoveFromEventList+0x70>)
  401692:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401694:	4b0d      	ldr	r3, [pc, #52]	; (4016cc <xTaskRemoveFromEventList+0x74>)
  401696:	681b      	ldr	r3, [r3, #0]
  401698:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40169c:	429a      	cmp	r2, r3
  40169e:	d908      	bls.n	4016b2 <xTaskRemoveFromEventList+0x5a>
		xYieldPending = pdTRUE;
  4016a0:	2001      	movs	r0, #1
  4016a2:	4b0b      	ldr	r3, [pc, #44]	; (4016d0 <xTaskRemoveFromEventList+0x78>)
  4016a4:	6018      	str	r0, [r3, #0]
  4016a6:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4016a8:	4629      	mov	r1, r5
  4016aa:	480a      	ldr	r0, [pc, #40]	; (4016d4 <xTaskRemoveFromEventList+0x7c>)
  4016ac:	4b06      	ldr	r3, [pc, #24]	; (4016c8 <xTaskRemoveFromEventList+0x70>)
  4016ae:	4798      	blx	r3
  4016b0:	e7f0      	b.n	401694 <xTaskRemoveFromEventList+0x3c>
		xReturn = pdFALSE;
  4016b2:	2000      	movs	r0, #0
}
  4016b4:	bd38      	pop	{r3, r4, r5, pc}
  4016b6:	bf00      	nop
  4016b8:	0040051d 	.word	0x0040051d
  4016bc:	2040c26c 	.word	0x2040c26c
  4016c0:	2040c278 	.word	0x2040c278
  4016c4:	2040c200 	.word	0x2040c200
  4016c8:	004004d1 	.word	0x004004d1
  4016cc:	2040c1f4 	.word	0x2040c1f4
  4016d0:	2040c2f0 	.word	0x2040c2f0
  4016d4:	2040c2ac 	.word	0x2040c2ac

004016d8 <vTaskSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4016d8:	4b03      	ldr	r3, [pc, #12]	; (4016e8 <vTaskSetTimeOutState+0x10>)
  4016da:	681b      	ldr	r3, [r3, #0]
  4016dc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4016de:	4b03      	ldr	r3, [pc, #12]	; (4016ec <vTaskSetTimeOutState+0x14>)
  4016e0:	681b      	ldr	r3, [r3, #0]
  4016e2:	6043      	str	r3, [r0, #4]
  4016e4:	4770      	bx	lr
  4016e6:	bf00      	nop
  4016e8:	2040c2a8 	.word	0x2040c2a8
  4016ec:	2040c2ec 	.word	0x2040c2ec

004016f0 <xTaskCheckForTimeOut>:
{
  4016f0:	b538      	push	{r3, r4, r5, lr}
  4016f2:	4604      	mov	r4, r0
  4016f4:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4016f6:	4b12      	ldr	r3, [pc, #72]	; (401740 <xTaskCheckForTimeOut+0x50>)
  4016f8:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  4016fa:	4b12      	ldr	r3, [pc, #72]	; (401744 <xTaskCheckForTimeOut+0x54>)
  4016fc:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  4016fe:	682b      	ldr	r3, [r5, #0]
  401700:	f1b3 3fff 	cmp.w	r3, #4294967295
  401704:	d018      	beq.n	401738 <xTaskCheckForTimeOut+0x48>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401706:	4910      	ldr	r1, [pc, #64]	; (401748 <xTaskCheckForTimeOut+0x58>)
  401708:	6809      	ldr	r1, [r1, #0]
  40170a:	6820      	ldr	r0, [r4, #0]
  40170c:	4288      	cmp	r0, r1
  40170e:	d002      	beq.n	401716 <xTaskCheckForTimeOut+0x26>
  401710:	6861      	ldr	r1, [r4, #4]
  401712:	428a      	cmp	r2, r1
  401714:	d212      	bcs.n	40173c <xTaskCheckForTimeOut+0x4c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  401716:	6861      	ldr	r1, [r4, #4]
  401718:	1a50      	subs	r0, r2, r1
  40171a:	4283      	cmp	r3, r0
  40171c:	d804      	bhi.n	401728 <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
  40171e:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  401720:	4b0a      	ldr	r3, [pc, #40]	; (40174c <xTaskCheckForTimeOut+0x5c>)
  401722:	4798      	blx	r3
}
  401724:	4620      	mov	r0, r4
  401726:	bd38      	pop	{r3, r4, r5, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  401728:	1a8a      	subs	r2, r1, r2
  40172a:	4413      	add	r3, r2
  40172c:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  40172e:	4620      	mov	r0, r4
  401730:	4b07      	ldr	r3, [pc, #28]	; (401750 <xTaskCheckForTimeOut+0x60>)
  401732:	4798      	blx	r3
			xReturn = pdFALSE;
  401734:	2400      	movs	r4, #0
  401736:	e7f3      	b.n	401720 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
  401738:	2400      	movs	r4, #0
  40173a:	e7f1      	b.n	401720 <xTaskCheckForTimeOut+0x30>
			xReturn = pdTRUE;
  40173c:	2401      	movs	r4, #1
  40173e:	e7ef      	b.n	401720 <xTaskCheckForTimeOut+0x30>
  401740:	004005d9 	.word	0x004005d9
  401744:	2040c2ec 	.word	0x2040c2ec
  401748:	2040c2a8 	.word	0x2040c2a8
  40174c:	004005fd 	.word	0x004005fd
  401750:	004016d9 	.word	0x004016d9

00401754 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  401754:	2201      	movs	r2, #1
  401756:	4b01      	ldr	r3, [pc, #4]	; (40175c <vTaskMissedYield+0x8>)
  401758:	601a      	str	r2, [r3, #0]
  40175a:	4770      	bx	lr
  40175c:	2040c2f0 	.word	0x2040c2f0

00401760 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  401760:	4b05      	ldr	r3, [pc, #20]	; (401778 <xTaskGetSchedulerState+0x18>)
  401762:	681b      	ldr	r3, [r3, #0]
  401764:	b133      	cbz	r3, 401774 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401766:	4b05      	ldr	r3, [pc, #20]	; (40177c <xTaskGetSchedulerState+0x1c>)
  401768:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  40176a:	2b00      	cmp	r3, #0
  40176c:	bf0c      	ite	eq
  40176e:	2002      	moveq	r0, #2
  401770:	2000      	movne	r0, #0
  401772:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  401774:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  401776:	4770      	bx	lr
  401778:	2040c2c0 	.word	0x2040c2c0
  40177c:	2040c26c 	.word	0x2040c26c

00401780 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401780:	2800      	cmp	r0, #0
  401782:	d044      	beq.n	40180e <vTaskPriorityInherit+0x8e>
	{
  401784:	b538      	push	{r3, r4, r5, lr}
  401786:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401788:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40178a:	4921      	ldr	r1, [pc, #132]	; (401810 <vTaskPriorityInherit+0x90>)
  40178c:	6809      	ldr	r1, [r1, #0]
  40178e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401790:	428a      	cmp	r2, r1
  401792:	d214      	bcs.n	4017be <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  401794:	6981      	ldr	r1, [r0, #24]
  401796:	2900      	cmp	r1, #0
  401798:	db05      	blt.n	4017a6 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40179a:	491d      	ldr	r1, [pc, #116]	; (401810 <vTaskPriorityInherit+0x90>)
  40179c:	6809      	ldr	r1, [r1, #0]
  40179e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4017a0:	f1c1 0105 	rsb	r1, r1, #5
  4017a4:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4017a6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4017aa:	491a      	ldr	r1, [pc, #104]	; (401814 <vTaskPriorityInherit+0x94>)
  4017ac:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4017b0:	6961      	ldr	r1, [r4, #20]
  4017b2:	4291      	cmp	r1, r2
  4017b4:	d004      	beq.n	4017c0 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4017b6:	4a16      	ldr	r2, [pc, #88]	; (401810 <vTaskPriorityInherit+0x90>)
  4017b8:	6812      	ldr	r2, [r2, #0]
  4017ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4017bc:	62e2      	str	r2, [r4, #44]	; 0x2c
  4017be:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4017c0:	1d25      	adds	r5, r4, #4
  4017c2:	4628      	mov	r0, r5
  4017c4:	4b14      	ldr	r3, [pc, #80]	; (401818 <vTaskPriorityInherit+0x98>)
  4017c6:	4798      	blx	r3
  4017c8:	b970      	cbnz	r0, 4017e8 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4017ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4017cc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4017d0:	4a10      	ldr	r2, [pc, #64]	; (401814 <vTaskPriorityInherit+0x94>)
  4017d2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4017d6:	b93a      	cbnz	r2, 4017e8 <vTaskPriorityInherit+0x68>
  4017d8:	4810      	ldr	r0, [pc, #64]	; (40181c <vTaskPriorityInherit+0x9c>)
  4017da:	6802      	ldr	r2, [r0, #0]
  4017dc:	2101      	movs	r1, #1
  4017de:	fa01 f303 	lsl.w	r3, r1, r3
  4017e2:	ea22 0303 	bic.w	r3, r2, r3
  4017e6:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4017e8:	4b09      	ldr	r3, [pc, #36]	; (401810 <vTaskPriorityInherit+0x90>)
  4017ea:	681b      	ldr	r3, [r3, #0]
  4017ec:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4017ee:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  4017f0:	4a0a      	ldr	r2, [pc, #40]	; (40181c <vTaskPriorityInherit+0x9c>)
  4017f2:	6811      	ldr	r1, [r2, #0]
  4017f4:	2301      	movs	r3, #1
  4017f6:	4083      	lsls	r3, r0
  4017f8:	430b      	orrs	r3, r1
  4017fa:	6013      	str	r3, [r2, #0]
  4017fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401800:	4629      	mov	r1, r5
  401802:	4b04      	ldr	r3, [pc, #16]	; (401814 <vTaskPriorityInherit+0x94>)
  401804:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401808:	4b05      	ldr	r3, [pc, #20]	; (401820 <vTaskPriorityInherit+0xa0>)
  40180a:	4798      	blx	r3
  40180c:	bd38      	pop	{r3, r4, r5, pc}
  40180e:	4770      	bx	lr
  401810:	2040c1f4 	.word	0x2040c1f4
  401814:	2040c200 	.word	0x2040c200
  401818:	0040051d 	.word	0x0040051d
  40181c:	2040c278 	.word	0x2040c278
  401820:	004004d1 	.word	0x004004d1

00401824 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  401824:	2800      	cmp	r0, #0
  401826:	d033      	beq.n	401890 <xTaskPriorityDisinherit+0x6c>
	{
  401828:	b538      	push	{r3, r4, r5, lr}
  40182a:	4604      	mov	r4, r0
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
  40182c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40182e:	3a01      	subs	r2, #1
  401830:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401832:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  401834:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401836:	4288      	cmp	r0, r1
  401838:	d02c      	beq.n	401894 <xTaskPriorityDisinherit+0x70>
  40183a:	bb5a      	cbnz	r2, 401894 <xTaskPriorityDisinherit+0x70>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40183c:	1d25      	adds	r5, r4, #4
  40183e:	4628      	mov	r0, r5
  401840:	4b15      	ldr	r3, [pc, #84]	; (401898 <xTaskPriorityDisinherit+0x74>)
  401842:	4798      	blx	r3
  401844:	b970      	cbnz	r0, 401864 <xTaskPriorityDisinherit+0x40>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401846:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401848:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  40184c:	4a13      	ldr	r2, [pc, #76]	; (40189c <xTaskPriorityDisinherit+0x78>)
  40184e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401852:	b93a      	cbnz	r2, 401864 <xTaskPriorityDisinherit+0x40>
  401854:	4812      	ldr	r0, [pc, #72]	; (4018a0 <xTaskPriorityDisinherit+0x7c>)
  401856:	6802      	ldr	r2, [r0, #0]
  401858:	2101      	movs	r1, #1
  40185a:	fa01 f303 	lsl.w	r3, r1, r3
  40185e:	ea22 0303 	bic.w	r3, r2, r3
  401862:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  401864:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  401866:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401868:	f1c0 0305 	rsb	r3, r0, #5
  40186c:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  40186e:	4a0c      	ldr	r2, [pc, #48]	; (4018a0 <xTaskPriorityDisinherit+0x7c>)
  401870:	6811      	ldr	r1, [r2, #0]
  401872:	2401      	movs	r4, #1
  401874:	fa04 f300 	lsl.w	r3, r4, r0
  401878:	430b      	orrs	r3, r1
  40187a:	6013      	str	r3, [r2, #0]
  40187c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401880:	4629      	mov	r1, r5
  401882:	4b06      	ldr	r3, [pc, #24]	; (40189c <xTaskPriorityDisinherit+0x78>)
  401884:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401888:	4b06      	ldr	r3, [pc, #24]	; (4018a4 <xTaskPriorityDisinherit+0x80>)
  40188a:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  40188c:	4620      	mov	r0, r4
  40188e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  401890:	2000      	movs	r0, #0
  401892:	4770      	bx	lr
  401894:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401896:	bd38      	pop	{r3, r4, r5, pc}
  401898:	0040051d 	.word	0x0040051d
  40189c:	2040c200 	.word	0x2040c200
  4018a0:	2040c278 	.word	0x2040c278
  4018a4:	004004d1 	.word	0x004004d1

004018a8 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  4018a8:	4b05      	ldr	r3, [pc, #20]	; (4018c0 <pvTaskIncrementMutexHeldCount+0x18>)
  4018aa:	681b      	ldr	r3, [r3, #0]
  4018ac:	b123      	cbz	r3, 4018b8 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  4018ae:	4b04      	ldr	r3, [pc, #16]	; (4018c0 <pvTaskIncrementMutexHeldCount+0x18>)
  4018b0:	681a      	ldr	r2, [r3, #0]
  4018b2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  4018b4:	3301      	adds	r3, #1
  4018b6:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  4018b8:	4b01      	ldr	r3, [pc, #4]	; (4018c0 <pvTaskIncrementMutexHeldCount+0x18>)
  4018ba:	6818      	ldr	r0, [r3, #0]
	}
  4018bc:	4770      	bx	lr
  4018be:	bf00      	nop
  4018c0:	2040c1f4 	.word	0x2040c1f4

004018c4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  4018c4:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  4018c6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4018c8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  4018ca:	4291      	cmp	r1, r2
  4018cc:	d80c      	bhi.n	4018e8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  4018ce:	1ad2      	subs	r2, r2, r3
  4018d0:	6983      	ldr	r3, [r0, #24]
  4018d2:	429a      	cmp	r2, r3
  4018d4:	d301      	bcc.n	4018da <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  4018d6:	2001      	movs	r0, #1
  4018d8:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  4018da:	1d01      	adds	r1, r0, #4
  4018dc:	4b09      	ldr	r3, [pc, #36]	; (401904 <prvInsertTimerInActiveList+0x40>)
  4018de:	6818      	ldr	r0, [r3, #0]
  4018e0:	4b09      	ldr	r3, [pc, #36]	; (401908 <prvInsertTimerInActiveList+0x44>)
  4018e2:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4018e4:	2000      	movs	r0, #0
  4018e6:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4018e8:	429a      	cmp	r2, r3
  4018ea:	d203      	bcs.n	4018f4 <prvInsertTimerInActiveList+0x30>
  4018ec:	4299      	cmp	r1, r3
  4018ee:	d301      	bcc.n	4018f4 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  4018f0:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  4018f2:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4018f4:	1d01      	adds	r1, r0, #4
  4018f6:	4b05      	ldr	r3, [pc, #20]	; (40190c <prvInsertTimerInActiveList+0x48>)
  4018f8:	6818      	ldr	r0, [r3, #0]
  4018fa:	4b03      	ldr	r3, [pc, #12]	; (401908 <prvInsertTimerInActiveList+0x44>)
  4018fc:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4018fe:	2000      	movs	r0, #0
  401900:	bd08      	pop	{r3, pc}
  401902:	bf00      	nop
  401904:	2040c2f8 	.word	0x2040c2f8
  401908:	004004e9 	.word	0x004004e9
  40190c:	2040c2f4 	.word	0x2040c2f4

00401910 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401910:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  401912:	4b10      	ldr	r3, [pc, #64]	; (401954 <prvCheckForValidListAndQueue+0x44>)
  401914:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  401916:	4b10      	ldr	r3, [pc, #64]	; (401958 <prvCheckForValidListAndQueue+0x48>)
  401918:	681b      	ldr	r3, [r3, #0]
  40191a:	b113      	cbz	r3, 401922 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  40191c:	4b0f      	ldr	r3, [pc, #60]	; (40195c <prvCheckForValidListAndQueue+0x4c>)
  40191e:	4798      	blx	r3
  401920:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  401922:	4d0f      	ldr	r5, [pc, #60]	; (401960 <prvCheckForValidListAndQueue+0x50>)
  401924:	4628      	mov	r0, r5
  401926:	4e0f      	ldr	r6, [pc, #60]	; (401964 <prvCheckForValidListAndQueue+0x54>)
  401928:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  40192a:	4c0f      	ldr	r4, [pc, #60]	; (401968 <prvCheckForValidListAndQueue+0x58>)
  40192c:	4620      	mov	r0, r4
  40192e:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  401930:	4b0e      	ldr	r3, [pc, #56]	; (40196c <prvCheckForValidListAndQueue+0x5c>)
  401932:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  401934:	4b0e      	ldr	r3, [pc, #56]	; (401970 <prvCheckForValidListAndQueue+0x60>)
  401936:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  401938:	2200      	movs	r2, #0
  40193a:	2110      	movs	r1, #16
  40193c:	2005      	movs	r0, #5
  40193e:	4b0d      	ldr	r3, [pc, #52]	; (401974 <prvCheckForValidListAndQueue+0x64>)
  401940:	4798      	blx	r3
  401942:	4b05      	ldr	r3, [pc, #20]	; (401958 <prvCheckForValidListAndQueue+0x48>)
  401944:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
  401946:	2800      	cmp	r0, #0
  401948:	d0e8      	beq.n	40191c <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  40194a:	490b      	ldr	r1, [pc, #44]	; (401978 <prvCheckForValidListAndQueue+0x68>)
  40194c:	4b0b      	ldr	r3, [pc, #44]	; (40197c <prvCheckForValidListAndQueue+0x6c>)
  40194e:	4798      	blx	r3
  401950:	e7e4      	b.n	40191c <prvCheckForValidListAndQueue+0xc>
  401952:	bf00      	nop
  401954:	004005d9 	.word	0x004005d9
  401958:	2040c328 	.word	0x2040c328
  40195c:	004005fd 	.word	0x004005fd
  401960:	2040c2fc 	.word	0x2040c2fc
  401964:	004004b5 	.word	0x004004b5
  401968:	2040c310 	.word	0x2040c310
  40196c:	2040c2f4 	.word	0x2040c2f4
  401970:	2040c2f8 	.word	0x2040c2f8
  401974:	004009ad 	.word	0x004009ad
  401978:	00408bcc 	.word	0x00408bcc
  40197c:	00400df5 	.word	0x00400df5

00401980 <xTimerCreateTimerTask>:
{
  401980:	b510      	push	{r4, lr}
  401982:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  401984:	4b0a      	ldr	r3, [pc, #40]	; (4019b0 <xTimerCreateTimerTask+0x30>)
  401986:	4798      	blx	r3
	if( xTimerQueue != NULL )
  401988:	4b0a      	ldr	r3, [pc, #40]	; (4019b4 <xTimerCreateTimerTask+0x34>)
  40198a:	681b      	ldr	r3, [r3, #0]
  40198c:	b16b      	cbz	r3, 4019aa <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  40198e:	2300      	movs	r3, #0
  401990:	9303      	str	r3, [sp, #12]
  401992:	9302      	str	r3, [sp, #8]
  401994:	9301      	str	r3, [sp, #4]
  401996:	2204      	movs	r2, #4
  401998:	9200      	str	r2, [sp, #0]
  40199a:	f44f 7282 	mov.w	r2, #260	; 0x104
  40199e:	4906      	ldr	r1, [pc, #24]	; (4019b8 <xTimerCreateTimerTask+0x38>)
  4019a0:	4806      	ldr	r0, [pc, #24]	; (4019bc <xTimerCreateTimerTask+0x3c>)
  4019a2:	4c07      	ldr	r4, [pc, #28]	; (4019c0 <xTimerCreateTimerTask+0x40>)
  4019a4:	47a0      	blx	r4
}
  4019a6:	b004      	add	sp, #16
  4019a8:	bd10      	pop	{r4, pc}
BaseType_t xReturn = pdFAIL;
  4019aa:	2000      	movs	r0, #0
	return xReturn;
  4019ac:	e7fb      	b.n	4019a6 <xTimerCreateTimerTask+0x26>
  4019ae:	bf00      	nop
  4019b0:	00401911 	.word	0x00401911
  4019b4:	2040c328 	.word	0x2040c328
  4019b8:	00408bd4 	.word	0x00408bd4
  4019bc:	00401ac1 	.word	0x00401ac1
  4019c0:	00400f05 	.word	0x00400f05

004019c4 <xTimerGenericCommand>:
{
  4019c4:	b530      	push	{r4, r5, lr}
  4019c6:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
  4019c8:	4c10      	ldr	r4, [pc, #64]	; (401a0c <xTimerGenericCommand+0x48>)
  4019ca:	6825      	ldr	r5, [r4, #0]
  4019cc:	b1dd      	cbz	r5, 401a06 <xTimerGenericCommand+0x42>
  4019ce:	461c      	mov	r4, r3
		xMessage.xMessageID = xCommandID;
  4019d0:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  4019d2:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  4019d4:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4019d6:	2905      	cmp	r1, #5
  4019d8:	dc0e      	bgt.n	4019f8 <xTimerGenericCommand+0x34>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  4019da:	4b0d      	ldr	r3, [pc, #52]	; (401a10 <xTimerGenericCommand+0x4c>)
  4019dc:	4798      	blx	r3
  4019de:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  4019e0:	f04f 0300 	mov.w	r3, #0
  4019e4:	bf0c      	ite	eq
  4019e6:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4019e8:	461a      	movne	r2, r3
  4019ea:	4669      	mov	r1, sp
  4019ec:	4807      	ldr	r0, [pc, #28]	; (401a0c <xTimerGenericCommand+0x48>)
  4019ee:	6800      	ldr	r0, [r0, #0]
  4019f0:	4c08      	ldr	r4, [pc, #32]	; (401a14 <xTimerGenericCommand+0x50>)
  4019f2:	47a0      	blx	r4
}
  4019f4:	b005      	add	sp, #20
  4019f6:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4019f8:	2300      	movs	r3, #0
  4019fa:	4622      	mov	r2, r4
  4019fc:	4669      	mov	r1, sp
  4019fe:	4628      	mov	r0, r5
  401a00:	4c05      	ldr	r4, [pc, #20]	; (401a18 <xTimerGenericCommand+0x54>)
  401a02:	47a0      	blx	r4
  401a04:	e7f6      	b.n	4019f4 <xTimerGenericCommand+0x30>
BaseType_t xReturn = pdFAIL;
  401a06:	2000      	movs	r0, #0
	return xReturn;
  401a08:	e7f4      	b.n	4019f4 <xTimerGenericCommand+0x30>
  401a0a:	bf00      	nop
  401a0c:	2040c328 	.word	0x2040c328
  401a10:	00401761 	.word	0x00401761
  401a14:	004009fd 	.word	0x004009fd
  401a18:	00400b69 	.word	0x00400b69

00401a1c <prvSampleTimeNow>:
{
  401a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401a20:	b082      	sub	sp, #8
  401a22:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  401a24:	4b1f      	ldr	r3, [pc, #124]	; (401aa4 <prvSampleTimeNow+0x88>)
  401a26:	4798      	blx	r3
  401a28:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  401a2a:	4b1f      	ldr	r3, [pc, #124]	; (401aa8 <prvSampleTimeNow+0x8c>)
  401a2c:	681b      	ldr	r3, [r3, #0]
  401a2e:	4298      	cmp	r0, r3
  401a30:	d310      	bcc.n	401a54 <prvSampleTimeNow+0x38>
		*pxTimerListsWereSwitched = pdFALSE;
  401a32:	2300      	movs	r3, #0
  401a34:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  401a38:	4b1b      	ldr	r3, [pc, #108]	; (401aa8 <prvSampleTimeNow+0x8c>)
  401a3a:	601f      	str	r7, [r3, #0]
}
  401a3c:	4638      	mov	r0, r7
  401a3e:	b002      	add	sp, #8
  401a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401a44:	2100      	movs	r1, #0
  401a46:	9100      	str	r1, [sp, #0]
  401a48:	460b      	mov	r3, r1
  401a4a:	4652      	mov	r2, sl
  401a4c:	4620      	mov	r0, r4
  401a4e:	4c17      	ldr	r4, [pc, #92]	; (401aac <prvSampleTimeNow+0x90>)
  401a50:	47a0      	blx	r4
  401a52:	e001      	b.n	401a58 <prvSampleTimeNow+0x3c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401a54:	4d16      	ldr	r5, [pc, #88]	; (401ab0 <prvSampleTimeNow+0x94>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401a56:	4e17      	ldr	r6, [pc, #92]	; (401ab4 <prvSampleTimeNow+0x98>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401a58:	682b      	ldr	r3, [r5, #0]
  401a5a:	681a      	ldr	r2, [r3, #0]
  401a5c:	b1c2      	cbz	r2, 401a90 <prvSampleTimeNow+0x74>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401a5e:	68db      	ldr	r3, [r3, #12]
  401a60:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401a64:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401a66:	f104 0904 	add.w	r9, r4, #4
  401a6a:	4648      	mov	r0, r9
  401a6c:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401a6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401a70:	4620      	mov	r0, r4
  401a72:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401a74:	69e3      	ldr	r3, [r4, #28]
  401a76:	2b01      	cmp	r3, #1
  401a78:	d1ee      	bne.n	401a58 <prvSampleTimeNow+0x3c>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  401a7a:	69a3      	ldr	r3, [r4, #24]
  401a7c:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  401a7e:	459a      	cmp	sl, r3
  401a80:	d2e0      	bcs.n	401a44 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  401a82:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401a84:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401a86:	4649      	mov	r1, r9
  401a88:	6828      	ldr	r0, [r5, #0]
  401a8a:	4b0b      	ldr	r3, [pc, #44]	; (401ab8 <prvSampleTimeNow+0x9c>)
  401a8c:	4798      	blx	r3
  401a8e:	e7e3      	b.n	401a58 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
  401a90:	4a0a      	ldr	r2, [pc, #40]	; (401abc <prvSampleTimeNow+0xa0>)
  401a92:	6810      	ldr	r0, [r2, #0]
  401a94:	4906      	ldr	r1, [pc, #24]	; (401ab0 <prvSampleTimeNow+0x94>)
  401a96:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  401a98:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  401a9a:	2301      	movs	r3, #1
  401a9c:	f8c8 3000 	str.w	r3, [r8]
  401aa0:	e7ca      	b.n	401a38 <prvSampleTimeNow+0x1c>
  401aa2:	bf00      	nop
  401aa4:	00401189 	.word	0x00401189
  401aa8:	2040c324 	.word	0x2040c324
  401aac:	004019c5 	.word	0x004019c5
  401ab0:	2040c2f4 	.word	0x2040c2f4
  401ab4:	0040051d 	.word	0x0040051d
  401ab8:	004004e9 	.word	0x004004e9
  401abc:	2040c2f8 	.word	0x2040c2f8

00401ac0 <prvTimerTask>:
{
  401ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401ac4:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401ac6:	4e63      	ldr	r6, [pc, #396]	; (401c54 <prvTimerTask+0x194>)
	vTaskSuspendAll();
  401ac8:	4f63      	ldr	r7, [pc, #396]	; (401c58 <prvTimerTask+0x198>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401aca:	4d64      	ldr	r5, [pc, #400]	; (401c5c <prvTimerTask+0x19c>)
					portYIELD_WITHIN_API();
  401acc:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 401c80 <prvTimerTask+0x1c0>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401ad0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 401c84 <prvTimerTask+0x1c4>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401ad4:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  401ad6:	681a      	ldr	r2, [r3, #0]
  401ad8:	2a00      	cmp	r2, #0
  401ada:	f000 80a9 	beq.w	401c30 <prvTimerTask+0x170>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401ade:	68db      	ldr	r3, [r3, #12]
  401ae0:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
  401ae4:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401ae6:	a804      	add	r0, sp, #16
  401ae8:	4b5d      	ldr	r3, [pc, #372]	; (401c60 <prvTimerTask+0x1a0>)
  401aea:	4798      	blx	r3
  401aec:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
  401aee:	9b04      	ldr	r3, [sp, #16]
  401af0:	2b00      	cmp	r3, #0
  401af2:	d137      	bne.n	401b64 <prvTimerTask+0xa4>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401af4:	4550      	cmp	r0, sl
  401af6:	d211      	bcs.n	401b1c <prvTimerTask+0x5c>
  401af8:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401afa:	ebaa 0104 	sub.w	r1, sl, r4
  401afe:	6828      	ldr	r0, [r5, #0]
  401b00:	4b58      	ldr	r3, [pc, #352]	; (401c64 <prvTimerTask+0x1a4>)
  401b02:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401b04:	4b58      	ldr	r3, [pc, #352]	; (401c68 <prvTimerTask+0x1a8>)
  401b06:	4798      	blx	r3
  401b08:	bb70      	cbnz	r0, 401b68 <prvTimerTask+0xa8>
					portYIELD_WITHIN_API();
  401b0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401b0e:	f8c9 3000 	str.w	r3, [r9]
  401b12:	f3bf 8f4f 	dsb	sy
  401b16:	f3bf 8f6f 	isb	sy
  401b1a:	e025      	b.n	401b68 <prvTimerTask+0xa8>
				( void ) xTaskResumeAll();
  401b1c:	4b52      	ldr	r3, [pc, #328]	; (401c68 <prvTimerTask+0x1a8>)
  401b1e:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401b20:	6833      	ldr	r3, [r6, #0]
  401b22:	68db      	ldr	r3, [r3, #12]
  401b24:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401b28:	f10b 0004 	add.w	r0, fp, #4
  401b2c:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401b2e:	f8db 301c 	ldr.w	r3, [fp, #28]
  401b32:	2b01      	cmp	r3, #1
  401b34:	d004      	beq.n	401b40 <prvTimerTask+0x80>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401b36:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
  401b3a:	4658      	mov	r0, fp
  401b3c:	4798      	blx	r3
  401b3e:	e013      	b.n	401b68 <prvTimerTask+0xa8>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  401b40:	f8db 1018 	ldr.w	r1, [fp, #24]
  401b44:	4653      	mov	r3, sl
  401b46:	4622      	mov	r2, r4
  401b48:	4451      	add	r1, sl
  401b4a:	4658      	mov	r0, fp
  401b4c:	4c47      	ldr	r4, [pc, #284]	; (401c6c <prvTimerTask+0x1ac>)
  401b4e:	47a0      	blx	r4
  401b50:	2801      	cmp	r0, #1
  401b52:	d1f0      	bne.n	401b36 <prvTimerTask+0x76>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401b54:	2100      	movs	r1, #0
  401b56:	9100      	str	r1, [sp, #0]
  401b58:	460b      	mov	r3, r1
  401b5a:	4652      	mov	r2, sl
  401b5c:	4658      	mov	r0, fp
  401b5e:	4c44      	ldr	r4, [pc, #272]	; (401c70 <prvTimerTask+0x1b0>)
  401b60:	47a0      	blx	r4
  401b62:	e7e8      	b.n	401b36 <prvTimerTask+0x76>
			( void ) xTaskResumeAll();
  401b64:	4b40      	ldr	r3, [pc, #256]	; (401c68 <prvTimerTask+0x1a8>)
  401b66:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401b68:	4c42      	ldr	r4, [pc, #264]	; (401c74 <prvTimerTask+0x1b4>)
  401b6a:	e006      	b.n	401b7a <prvTimerTask+0xba>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  401b6c:	9907      	ldr	r1, [sp, #28]
  401b6e:	9806      	ldr	r0, [sp, #24]
  401b70:	9b05      	ldr	r3, [sp, #20]
  401b72:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  401b74:	9b04      	ldr	r3, [sp, #16]
  401b76:	2b00      	cmp	r3, #0
  401b78:	da09      	bge.n	401b8e <prvTimerTask+0xce>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401b7a:	2300      	movs	r3, #0
  401b7c:	461a      	mov	r2, r3
  401b7e:	a904      	add	r1, sp, #16
  401b80:	6828      	ldr	r0, [r5, #0]
  401b82:	47a0      	blx	r4
  401b84:	2800      	cmp	r0, #0
  401b86:	d0a5      	beq.n	401ad4 <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  401b88:	9b04      	ldr	r3, [sp, #16]
  401b8a:	2b00      	cmp	r3, #0
  401b8c:	dbee      	blt.n	401b6c <prvTimerTask+0xac>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  401b8e:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  401b92:	f8da 3014 	ldr.w	r3, [sl, #20]
  401b96:	b113      	cbz	r3, 401b9e <prvTimerTask+0xde>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401b98:	f10a 0004 	add.w	r0, sl, #4
  401b9c:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401b9e:	a803      	add	r0, sp, #12
  401ba0:	4b2f      	ldr	r3, [pc, #188]	; (401c60 <prvTimerTask+0x1a0>)
  401ba2:	4798      	blx	r3
			switch( xMessage.xMessageID )
  401ba4:	9b04      	ldr	r3, [sp, #16]
  401ba6:	2b09      	cmp	r3, #9
  401ba8:	d8e7      	bhi.n	401b7a <prvTimerTask+0xba>
  401baa:	a201      	add	r2, pc, #4	; (adr r2, 401bb0 <prvTimerTask+0xf0>)
  401bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401bb0:	00401bd9 	.word	0x00401bd9
  401bb4:	00401bd9 	.word	0x00401bd9
  401bb8:	00401bd9 	.word	0x00401bd9
  401bbc:	00401b7b 	.word	0x00401b7b
  401bc0:	00401c15 	.word	0x00401c15
  401bc4:	00401c29 	.word	0x00401c29
  401bc8:	00401bd9 	.word	0x00401bd9
  401bcc:	00401bd9 	.word	0x00401bd9
  401bd0:	00401b7b 	.word	0x00401b7b
  401bd4:	00401c15 	.word	0x00401c15
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  401bd8:	9c05      	ldr	r4, [sp, #20]
  401bda:	f8da 1018 	ldr.w	r1, [sl, #24]
  401bde:	4623      	mov	r3, r4
  401be0:	4602      	mov	r2, r0
  401be2:	4421      	add	r1, r4
  401be4:	4650      	mov	r0, sl
  401be6:	4c21      	ldr	r4, [pc, #132]	; (401c6c <prvTimerTask+0x1ac>)
  401be8:	47a0      	blx	r4
  401bea:	2801      	cmp	r0, #1
  401bec:	d1bc      	bne.n	401b68 <prvTimerTask+0xa8>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401bee:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  401bf2:	4650      	mov	r0, sl
  401bf4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401bf6:	f8da 301c 	ldr.w	r3, [sl, #28]
  401bfa:	2b01      	cmp	r3, #1
  401bfc:	d1b4      	bne.n	401b68 <prvTimerTask+0xa8>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  401bfe:	f8da 2018 	ldr.w	r2, [sl, #24]
  401c02:	2100      	movs	r1, #0
  401c04:	9100      	str	r1, [sp, #0]
  401c06:	460b      	mov	r3, r1
  401c08:	9805      	ldr	r0, [sp, #20]
  401c0a:	4402      	add	r2, r0
  401c0c:	4650      	mov	r0, sl
  401c0e:	4c18      	ldr	r4, [pc, #96]	; (401c70 <prvTimerTask+0x1b0>)
  401c10:	47a0      	blx	r4
  401c12:	e7a9      	b.n	401b68 <prvTimerTask+0xa8>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  401c14:	9905      	ldr	r1, [sp, #20]
  401c16:	f8ca 1018 	str.w	r1, [sl, #24]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  401c1a:	4603      	mov	r3, r0
  401c1c:	4602      	mov	r2, r0
  401c1e:	4401      	add	r1, r0
  401c20:	4650      	mov	r0, sl
  401c22:	4c12      	ldr	r4, [pc, #72]	; (401c6c <prvTimerTask+0x1ac>)
  401c24:	47a0      	blx	r4
  401c26:	e79f      	b.n	401b68 <prvTimerTask+0xa8>
					vPortFree( pxTimer );
  401c28:	4650      	mov	r0, sl
  401c2a:	4b13      	ldr	r3, [pc, #76]	; (401c78 <prvTimerTask+0x1b8>)
  401c2c:	4798      	blx	r3
  401c2e:	e79b      	b.n	401b68 <prvTimerTask+0xa8>
	vTaskSuspendAll();
  401c30:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401c32:	a804      	add	r0, sp, #16
  401c34:	4b0a      	ldr	r3, [pc, #40]	; (401c60 <prvTimerTask+0x1a0>)
  401c36:	4798      	blx	r3
  401c38:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
  401c3a:	9b04      	ldr	r3, [sp, #16]
  401c3c:	2b00      	cmp	r3, #0
  401c3e:	d191      	bne.n	401b64 <prvTimerTask+0xa4>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  401c40:	4b0e      	ldr	r3, [pc, #56]	; (401c7c <prvTimerTask+0x1bc>)
  401c42:	681b      	ldr	r3, [r3, #0]
  401c44:	681a      	ldr	r2, [r3, #0]
  401c46:	fab2 f282 	clz	r2, r2
  401c4a:	0952      	lsrs	r2, r2, #5
  401c4c:	f04f 0a00 	mov.w	sl, #0
  401c50:	e753      	b.n	401afa <prvTimerTask+0x3a>
  401c52:	bf00      	nop
  401c54:	2040c2f4 	.word	0x2040c2f4
  401c58:	00401179 	.word	0x00401179
  401c5c:	2040c328 	.word	0x2040c328
  401c60:	00401a1d 	.word	0x00401a1d
  401c64:	00400e29 	.word	0x00400e29
  401c68:	004012cd 	.word	0x004012cd
  401c6c:	004018c5 	.word	0x004018c5
  401c70:	004019c5 	.word	0x004019c5
  401c74:	00400c79 	.word	0x00400c79
  401c78:	00400789 	.word	0x00400789
  401c7c:	2040c2f8 	.word	0x2040c2f8
  401c80:	e000ed04 	.word	0xe000ed04
  401c84:	0040051d 	.word	0x0040051d

00401c88 <chip_isr>:

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  401c88:	2810      	cmp	r0, #16
  401c8a:	d108      	bne.n	401c9e <chip_isr+0x16>
  401c8c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401c90:	d105      	bne.n	401c9e <chip_isr+0x16>
{
  401c92:	b508      	push	{r3, lr}
		if (gpfIsr) {
  401c94:	4b02      	ldr	r3, [pc, #8]	; (401ca0 <chip_isr+0x18>)
  401c96:	681b      	ldr	r3, [r3, #0]
  401c98:	b103      	cbz	r3, 401c9c <chip_isr+0x14>
			gpfIsr();
  401c9a:	4798      	blx	r3
  401c9c:	bd08      	pop	{r3, pc}
  401c9e:	4770      	bx	lr
  401ca0:	2040c32c 	.word	0x2040c32c

00401ca4 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  401ca4:	b150      	cbz	r0, 401cbc <nm_bsp_sleep+0x18>
{
  401ca6:	b570      	push	{r4, r5, r6, lr}
  401ca8:	1e44      	subs	r4, r0, #1
		delay_ms(4);
  401caa:	4e05      	ldr	r6, [pc, #20]	; (401cc0 <nm_bsp_sleep+0x1c>)
  401cac:	4d05      	ldr	r5, [pc, #20]	; (401cc4 <nm_bsp_sleep+0x20>)
  401cae:	4630      	mov	r0, r6
  401cb0:	47a8      	blx	r5
	while(u32TimeMsec--) {
  401cb2:	3c01      	subs	r4, #1
  401cb4:	f1b4 3fff 	cmp.w	r4, #4294967295
  401cb8:	d1f9      	bne.n	401cae <nm_bsp_sleep+0xa>
  401cba:	bd70      	pop	{r4, r5, r6, pc}
  401cbc:	4770      	bx	lr
  401cbe:	bf00      	nop
  401cc0:	00031635 	.word	0x00031635
  401cc4:	20400001 	.word	0x20400001

00401cc8 <nm_bsp_reset>:
{
  401cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401ccc:	4f09      	ldr	r7, [pc, #36]	; (401cf4 <nm_bsp_reset+0x2c>)
  401cce:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  401cd2:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  401cd6:	4d08      	ldr	r5, [pc, #32]	; (401cf8 <nm_bsp_reset+0x30>)
  401cd8:	2608      	movs	r6, #8
  401cda:	636e      	str	r6, [r5, #52]	; 0x34
	nm_bsp_sleep(100);
  401cdc:	2064      	movs	r0, #100	; 0x64
  401cde:	4c07      	ldr	r4, [pc, #28]	; (401cfc <nm_bsp_reset+0x34>)
  401ce0:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401ce2:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	nm_bsp_sleep(100);
  401ce6:	2064      	movs	r0, #100	; 0x64
  401ce8:	47a0      	blx	r4
  401cea:	632e      	str	r6, [r5, #48]	; 0x30
	nm_bsp_sleep(100);
  401cec:	2064      	movs	r0, #100	; 0x64
  401cee:	47a0      	blx	r4
  401cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401cf4:	400e1200 	.word	0x400e1200
  401cf8:	400e1000 	.word	0x400e1000
  401cfc:	00401ca5 	.word	0x00401ca5

00401d00 <nm_bsp_init>:
{
  401d00:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  401d02:	2200      	movs	r2, #0
  401d04:	4b14      	ldr	r3, [pc, #80]	; (401d58 <nm_bsp_init+0x58>)
  401d06:	601a      	str	r2, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  401d08:	200a      	movs	r0, #10
  401d0a:	4c14      	ldr	r4, [pc, #80]	; (401d5c <nm_bsp_init+0x5c>)
  401d0c:	47a0      	blx	r4
  401d0e:	200b      	movs	r0, #11
  401d10:	47a0      	blx	r4
  401d12:	200c      	movs	r0, #12
  401d14:	47a0      	blx	r4
  401d16:	2010      	movs	r0, #16
  401d18:	47a0      	blx	r4
  401d1a:	2011      	movs	r0, #17
  401d1c:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401d1e:	4b10      	ldr	r3, [pc, #64]	; (401d60 <nm_bsp_init+0x60>)
  401d20:	2208      	movs	r2, #8
  401d22:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401d24:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401d28:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401d2a:	4a0e      	ldr	r2, [pc, #56]	; (401d64 <nm_bsp_init+0x64>)
  401d2c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  401d30:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401d32:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401d36:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401d38:	2204      	movs	r2, #4
  401d3a:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401d3c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401d40:	631a      	str	r2, [r3, #48]	; 0x30
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  401d42:	4b09      	ldr	r3, [pc, #36]	; (401d68 <nm_bsp_init+0x68>)
  401d44:	681b      	ldr	r3, [r3, #0]
  401d46:	f013 0f01 	tst.w	r3, #1
  401d4a:	d001      	beq.n	401d50 <nm_bsp_init+0x50>
  401d4c:	4b06      	ldr	r3, [pc, #24]	; (401d68 <nm_bsp_init+0x68>)
  401d4e:	681b      	ldr	r3, [r3, #0]
	nm_bsp_reset();
  401d50:	4b06      	ldr	r3, [pc, #24]	; (401d6c <nm_bsp_init+0x6c>)
  401d52:	4798      	blx	r3
}
  401d54:	2000      	movs	r0, #0
  401d56:	bd10      	pop	{r4, pc}
  401d58:	2040c32c 	.word	0x2040c32c
  401d5c:	00404f21 	.word	0x00404f21
  401d60:	400e1000 	.word	0x400e1000
  401d64:	400e1200 	.word	0x400e1200
  401d68:	e000e010 	.word	0xe000e010
  401d6c:	00401cc9 	.word	0x00401cc9

00401d70 <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  401d70:	b530      	push	{r4, r5, lr}
  401d72:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  401d74:	4b14      	ldr	r3, [pc, #80]	; (401dc8 <nm_bsp_register_isr+0x58>)
  401d76:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  401d78:	2010      	movs	r0, #16
  401d7a:	4b14      	ldr	r3, [pc, #80]	; (401dcc <nm_bsp_register_isr+0x5c>)
  401d7c:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  401d7e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401d82:	207c      	movs	r0, #124	; 0x7c
  401d84:	4b12      	ldr	r3, [pc, #72]	; (401dd0 <nm_bsp_register_isr+0x60>)
  401d86:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  401d88:	4c12      	ldr	r4, [pc, #72]	; (401dd4 <nm_bsp_register_isr+0x64>)
  401d8a:	2201      	movs	r2, #1
  401d8c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401d90:	4620      	mov	r0, r4
  401d92:	4b11      	ldr	r3, [pc, #68]	; (401dd8 <nm_bsp_register_isr+0x68>)
  401d94:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  401d96:	4b11      	ldr	r3, [pc, #68]	; (401ddc <nm_bsp_register_isr+0x6c>)
  401d98:	9300      	str	r3, [sp, #0]
  401d9a:	2351      	movs	r3, #81	; 0x51
  401d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401da0:	2110      	movs	r1, #16
  401da2:	4620      	mov	r0, r4
  401da4:	4d0e      	ldr	r5, [pc, #56]	; (401de0 <nm_bsp_register_isr+0x70>)
  401da6:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  401da8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401dac:	4620      	mov	r0, r4
  401dae:	4b0d      	ldr	r3, [pc, #52]	; (401de4 <nm_bsp_register_isr+0x74>)
  401db0:	4798      	blx	r3
  401db2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401db6:	4b0c      	ldr	r3, [pc, #48]	; (401de8 <nm_bsp_register_isr+0x78>)
  401db8:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  401dba:	2200      	movs	r2, #0
  401dbc:	2110      	movs	r1, #16
  401dbe:	4620      	mov	r0, r4
  401dc0:	4b0a      	ldr	r3, [pc, #40]	; (401dec <nm_bsp_register_isr+0x7c>)
  401dc2:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  401dc4:	b003      	add	sp, #12
  401dc6:	bd30      	pop	{r4, r5, pc}
  401dc8:	2040c32c 	.word	0x2040c32c
  401dcc:	00404f21 	.word	0x00404f21
  401dd0:	00404b29 	.word	0x00404b29
  401dd4:	400e1400 	.word	0x400e1400
  401dd8:	004049ed 	.word	0x004049ed
  401ddc:	00401c89 	.word	0x00401c89
  401de0:	00404ca9 	.word	0x00404ca9
  401de4:	00404b19 	.word	0x00404b19
  401de8:	e000e100 	.word	0xe000e100
  401dec:	00404d7d 	.word	0x00404d7d

00401df0 <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  401df0:	b508      	push	{r3, lr}
	if (u8Enable) {
  401df2:	b928      	cbnz	r0, 401e00 <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  401df4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401df8:	4804      	ldr	r0, [pc, #16]	; (401e0c <nm_bsp_interrupt_ctrl+0x1c>)
  401dfa:	4b05      	ldr	r3, [pc, #20]	; (401e10 <nm_bsp_interrupt_ctrl+0x20>)
  401dfc:	4798      	blx	r3
  401dfe:	bd08      	pop	{r3, pc}
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  401e00:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401e04:	4801      	ldr	r0, [pc, #4]	; (401e0c <nm_bsp_interrupt_ctrl+0x1c>)
  401e06:	4b03      	ldr	r3, [pc, #12]	; (401e14 <nm_bsp_interrupt_ctrl+0x24>)
  401e08:	4798      	blx	r3
  401e0a:	bd08      	pop	{r3, pc}
  401e0c:	400e1400 	.word	0x400e1400
  401e10:	00404b1d 	.word	0x00404b1d
  401e14:	00404b19 	.word	0x00404b19

00401e18 <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  401e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_PUDR = mask;
  401e1a:	4c39      	ldr	r4, [pc, #228]	; (401f00 <nm_bus_init+0xe8>)
  401e1c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  401e20:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401e22:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401e26:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401e28:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401e2a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401e2e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  401e30:	430b      	orrs	r3, r1
  401e32:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401e34:	6f63      	ldr	r3, [r4, #116]	; 0x74
  401e36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  401e3a:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  401e3c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401e40:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401e42:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401e46:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401e48:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401e4a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401e4e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  401e50:	4313      	orrs	r3, r2
  401e52:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401e54:	6f63      	ldr	r3, [r4, #116]	; 0x74
  401e56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  401e5a:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  401e5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  401e60:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401e62:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401e66:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401e68:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401e6a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401e6e:	6f20      	ldr	r0, [r4, #112]	; 0x70
  401e70:	4318      	orrs	r0, r3
  401e72:	6720      	str	r0, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401e74:	6f60      	ldr	r0, [r4, #116]	; 0x74
  401e76:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
  401e7a:	6760      	str	r0, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401e7c:	6061      	str	r1, [r4, #4]
  401e7e:	6062      	str	r2, [r4, #4]
  401e80:	6063      	str	r3, [r4, #4]
  401e82:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  401e86:	6066      	str	r6, [r4, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  401e88:	6026      	str	r6, [r4, #0]
	PIOD->PIO_OER = (1<<25);
  401e8a:	6126      	str	r6, [r4, #16]
	SPI_DEASSERT_CS();
  401e8c:	6326      	str	r6, [r4, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  401e8e:	4d1d      	ldr	r5, [pc, #116]	; (401f04 <nm_bus_init+0xec>)
  401e90:	4628      	mov	r0, r5
  401e92:	4b1d      	ldr	r3, [pc, #116]	; (401f08 <nm_bus_init+0xf0>)
  401e94:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  401e96:	2302      	movs	r3, #2
  401e98:	602b      	str	r3, [r5, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  401e9a:	2380      	movs	r3, #128	; 0x80
  401e9c:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  401e9e:	686b      	ldr	r3, [r5, #4]
  401ea0:	f043 0301 	orr.w	r3, r3, #1
  401ea4:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  401ea6:	686b      	ldr	r3, [r5, #4]
  401ea8:	f043 0310 	orr.w	r3, r3, #16
  401eac:	606b      	str	r3, [r5, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  401eae:	2101      	movs	r1, #1
  401eb0:	4628      	mov	r0, r5
  401eb2:	4b16      	ldr	r3, [pc, #88]	; (401f0c <nm_bus_init+0xf4>)
  401eb4:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  401eb6:	2200      	movs	r2, #0
  401eb8:	2101      	movs	r1, #1
  401eba:	4628      	mov	r0, r5
  401ebc:	4b14      	ldr	r3, [pc, #80]	; (401f10 <nm_bus_init+0xf8>)
  401ebe:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  401ec0:	2201      	movs	r2, #1
  401ec2:	4611      	mov	r1, r2
  401ec4:	4628      	mov	r0, r5
  401ec6:	4b13      	ldr	r3, [pc, #76]	; (401f14 <nm_bus_init+0xfc>)
  401ec8:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  401eca:	2200      	movs	r2, #0
  401ecc:	2101      	movs	r1, #1
  401ece:	4628      	mov	r0, r5
  401ed0:	4b11      	ldr	r3, [pc, #68]	; (401f18 <nm_bus_init+0x100>)
  401ed2:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  401ed4:	4911      	ldr	r1, [pc, #68]	; (401f1c <nm_bus_init+0x104>)
  401ed6:	4812      	ldr	r0, [pc, #72]	; (401f20 <nm_bus_init+0x108>)
  401ed8:	4b12      	ldr	r3, [pc, #72]	; (401f24 <nm_bus_init+0x10c>)
  401eda:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  401edc:	b2c2      	uxtb	r2, r0
  401ede:	2101      	movs	r1, #1
  401ee0:	4628      	mov	r0, r5
  401ee2:	4b11      	ldr	r3, [pc, #68]	; (401f28 <nm_bus_init+0x110>)
  401ee4:	4798      	blx	r3
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  401ee6:	2300      	movs	r3, #0
  401ee8:	461a      	mov	r2, r3
  401eea:	2101      	movs	r1, #1
  401eec:	4628      	mov	r0, r5
  401eee:	4f0f      	ldr	r7, [pc, #60]	; (401f2c <nm_bus_init+0x114>)
  401ef0:	47b8      	blx	r7
	p_spi->SPI_CR = SPI_CR_SPIEN;
  401ef2:	2301      	movs	r3, #1
  401ef4:	602b      	str	r3, [r5, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
	
	SPI_DEASSERT_CS();
  401ef6:	6326      	str	r6, [r4, #48]	; 0x30
	nm_bsp_reset();
  401ef8:	4b0d      	ldr	r3, [pc, #52]	; (401f30 <nm_bus_init+0x118>)
  401efa:	4798      	blx	r3
#endif
	return result;
}
  401efc:	2000      	movs	r0, #0
  401efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401f00:	400e1400 	.word	0x400e1400
  401f04:	40008000 	.word	0x40008000
  401f08:	00404f75 	.word	0x00404f75
  401f0c:	00404fa1 	.word	0x00404fa1
  401f10:	0040501b 	.word	0x0040501b
  401f14:	00405039 	.word	0x00405039
  401f18:	00405057 	.word	0x00405057
  401f1c:	11e1a300 	.word	0x11e1a300
  401f20:	02dc6c00 	.word	0x02dc6c00
  401f24:	0040506b 	.word	0x0040506b
  401f28:	00405081 	.word	0x00405081
  401f2c:	004050a9 	.word	0x004050a9
  401f30:	00401cc9 	.word	0x00401cc9

00401f34 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  401f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f38:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  401f3a:	2803      	cmp	r0, #3
  401f3c:	d144      	bne.n	401fc8 <nm_bus_ioctl+0x94>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  401f3e:	680e      	ldr	r6, [r1, #0]
  401f40:	684d      	ldr	r5, [r1, #4]
  401f42:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
  401f44:	2300      	movs	r3, #0
  401f46:	f88d 3004 	strb.w	r3, [sp, #4]
	uint16_t rxd_data = 0;
  401f4a:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (!pu8Mosi) {
  401f4e:	b186      	cbz	r6, 401f72 <nm_bus_ioctl+0x3e>
	else if(!pu8Miso) {
  401f50:	2d00      	cmp	r5, #0
  401f52:	d136      	bne.n	401fc2 <nm_bus_ioctl+0x8e>
		u8SkipMiso = 1;
  401f54:	f04f 0801 	mov.w	r8, #1
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  401f58:	4699      	mov	r9, r3
		pu8Miso = &u8Dummy;
  401f5a:	ad01      	add	r5, sp, #4
	SPI_ASSERT_CS();
  401f5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401f60:	4b20      	ldr	r3, [pc, #128]	; (401fe4 <nm_bus_ioctl+0xb0>)
  401f62:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  401f64:	b32c      	cbz	r4, 401fb2 <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  401f66:	4f20      	ldr	r7, [pc, #128]	; (401fe8 <nm_bus_ioctl+0xb4>)
  401f68:	f8df b094 	ldr.w	fp, [pc, #148]	; 402000 <nm_bus_ioctl+0xcc>
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  401f6c:	f8df a094 	ldr.w	sl, [pc, #148]	; 402004 <nm_bus_ioctl+0xd0>
  401f70:	e006      	b.n	401f80 <nm_bus_ioctl+0x4c>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  401f72:	f04f 0800 	mov.w	r8, #0
		u8SkipMosi = 1;
  401f76:	f04f 0901 	mov.w	r9, #1
		pu8Mosi = &u8Dummy;
  401f7a:	ae01      	add	r6, sp, #4
  401f7c:	e7ee      	b.n	401f5c <nm_bus_ioctl+0x28>
	while (u16Sz) {
  401f7e:	b1c4      	cbz	r4, 401fb2 <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  401f80:	2300      	movs	r3, #0
  401f82:	461a      	mov	r2, r3
  401f84:	7831      	ldrb	r1, [r6, #0]
  401f86:	4638      	mov	r0, r7
  401f88:	47d8      	blx	fp
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  401f8a:	f10d 0205 	add.w	r2, sp, #5
  401f8e:	f10d 0106 	add.w	r1, sp, #6
  401f92:	4638      	mov	r0, r7
  401f94:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  401f96:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  401f9a:	702b      	strb	r3, [r5, #0]
		u16Sz--;
  401f9c:	3c01      	subs	r4, #1
  401f9e:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  401fa0:	f1b8 0f00 	cmp.w	r8, #0
  401fa4:	d100      	bne.n	401fa8 <nm_bus_ioctl+0x74>
			pu8Miso++;
  401fa6:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  401fa8:	f1b9 0f00 	cmp.w	r9, #0
  401fac:	d1e7      	bne.n	401f7e <nm_bus_ioctl+0x4a>
			pu8Mosi++;
  401fae:	3601      	adds	r6, #1
  401fb0:	e7e5      	b.n	401f7e <nm_bus_ioctl+0x4a>
	SPI_DEASSERT_CS();
  401fb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401fb6:	4b0b      	ldr	r3, [pc, #44]	; (401fe4 <nm_bus_ioctl+0xb0>)
  401fb8:	631a      	str	r2, [r3, #48]	; 0x30
	return M2M_SUCCESS;
  401fba:	2000      	movs	r0, #0
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  401fbc:	b003      	add	sp, #12
  401fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return M2M_ERR_BUS_FAIL;
  401fc2:	f06f 0005 	mvn.w	r0, #5
		break;
  401fc6:	e7f9      	b.n	401fbc <nm_bus_ioctl+0x88>
			M2M_ERR("Invalid IOCTL command!\n");
  401fc8:	f240 121f 	movw	r2, #287	; 0x11f
  401fcc:	4907      	ldr	r1, [pc, #28]	; (401fec <nm_bus_ioctl+0xb8>)
  401fce:	4808      	ldr	r0, [pc, #32]	; (401ff0 <nm_bus_ioctl+0xbc>)
  401fd0:	4c08      	ldr	r4, [pc, #32]	; (401ff4 <nm_bus_ioctl+0xc0>)
  401fd2:	47a0      	blx	r4
  401fd4:	4808      	ldr	r0, [pc, #32]	; (401ff8 <nm_bus_ioctl+0xc4>)
  401fd6:	47a0      	blx	r4
  401fd8:	4808      	ldr	r0, [pc, #32]	; (401ffc <nm_bus_ioctl+0xc8>)
  401fda:	47a0      	blx	r4
			s8Ret = -1;
  401fdc:	f04f 30ff 	mov.w	r0, #4294967295
			break;
  401fe0:	e7ec      	b.n	401fbc <nm_bus_ioctl+0x88>
  401fe2:	bf00      	nop
  401fe4:	400e1400 	.word	0x400e1400
  401fe8:	40008000 	.word	0x40008000
  401fec:	00408bdc 	.word	0x00408bdc
  401ff0:	00408bec 	.word	0x00408bec
  401ff4:	00405c79 	.word	0x00405c79
  401ff8:	00408c00 	.word	0x00408c00
  401ffc:	00408c18 	.word	0x00408c18
  402000:	00404fe7 	.word	0x00404fe7
  402004:	00404fb7 	.word	0x00404fb7

00402008 <nm_bus_deinit>:
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  402008:	2202      	movs	r2, #2
  40200a:	4b0e      	ldr	r3, [pc, #56]	; (402044 <nm_bus_deinit+0x3c>)
  40200c:	601a      	str	r2, [r3, #0]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40200e:	f503 2359 	add.w	r3, r3, #888832	; 0xd9000
  402012:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  402016:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40201a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40201c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402020:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  402024:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402026:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40202a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40202e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402030:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402034:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  402038:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40203a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
	return M2M_SUCCESS;
}
  40203e:	2000      	movs	r0, #0
  402040:	4770      	bx	lr
  402042:	bf00      	nop
  402044:	40008000 	.word	0x40008000

00402048 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  402048:	b13a      	cbz	r2, 40205a <m2m_memcpy+0x12>
  40204a:	3901      	subs	r1, #1
  40204c:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  40204e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  402052:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  402056:	4290      	cmp	r0, r2
  402058:	d1f9      	bne.n	40204e <m2m_memcpy+0x6>
  40205a:	4770      	bx	lr

0040205c <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  40205c:	b122      	cbz	r2, 402068 <m2m_memset+0xc>
  40205e:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  402060:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  402064:	4290      	cmp	r0, r2
  402066:	d1fb      	bne.n	402060 <m2m_memset+0x4>
  402068:	4770      	bx	lr

0040206a <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  40206a:	7803      	ldrb	r3, [r0, #0]
  40206c:	b143      	cbz	r3, 402080 <m2m_strlen+0x16>
  40206e:	2300      	movs	r3, #0
	{
		u16StrLen ++;
  402070:	3301      	adds	r3, #1
  402072:	b29b      	uxth	r3, r3
	while(*pcStr)
  402074:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  402078:	2a00      	cmp	r2, #0
  40207a:	d1f9      	bne.n	402070 <m2m_strlen+0x6>
		pcStr++;
	}
	return u16StrLen;
}
  40207c:	4618      	mov	r0, r3
  40207e:	4770      	bx	lr
	uint16	u16StrLen = 0;
  402080:	2300      	movs	r3, #0
  402082:	e7fb      	b.n	40207c <m2m_strlen+0x12>

00402084 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  402084:	4a02      	ldr	r2, [pc, #8]	; (402090 <isr+0xc>)
  402086:	7813      	ldrb	r3, [r2, #0]
  402088:	3301      	adds	r3, #1
  40208a:	b2db      	uxtb	r3, r3
  40208c:	7013      	strb	r3, [r2, #0]
  40208e:	4770      	bx	lr
  402090:	2040c333 	.word	0x2040c333

00402094 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  402094:	4770      	bx	lr
	...

00402098 <hif_set_rx_done>:
{
  402098:	b500      	push	{lr}
  40209a:	b083      	sub	sp, #12
	nm_bsp_interrupt_ctrl(1);
  40209c:	2001      	movs	r0, #1
  40209e:	4b0b      	ldr	r3, [pc, #44]	; (4020cc <hif_set_rx_done+0x34>)
  4020a0:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  4020a2:	a901      	add	r1, sp, #4
  4020a4:	f241 0070 	movw	r0, #4208	; 0x1070
  4020a8:	4b09      	ldr	r3, [pc, #36]	; (4020d0 <hif_set_rx_done+0x38>)
  4020aa:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  4020ac:	4603      	mov	r3, r0
  4020ae:	b118      	cbz	r0, 4020b8 <hif_set_rx_done+0x20>
}
  4020b0:	4618      	mov	r0, r3
  4020b2:	b003      	add	sp, #12
  4020b4:	f85d fb04 	ldr.w	pc, [sp], #4
	reg |= (1<<1);
  4020b8:	9901      	ldr	r1, [sp, #4]
  4020ba:	f041 0102 	orr.w	r1, r1, #2
  4020be:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  4020c0:	f241 0070 	movw	r0, #4208	; 0x1070
  4020c4:	4b03      	ldr	r3, [pc, #12]	; (4020d4 <hif_set_rx_done+0x3c>)
  4020c6:	4798      	blx	r3
  4020c8:	4603      	mov	r3, r0
  4020ca:	e7f1      	b.n	4020b0 <hif_set_rx_done+0x18>
  4020cc:	00401df1 	.word	0x00401df1
  4020d0:	00403385 	.word	0x00403385
  4020d4:	00403391 	.word	0x00403391

004020d8 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  4020d8:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  4020da:	4b12      	ldr	r3, [pc, #72]	; (402124 <hif_chip_wake+0x4c>)
  4020dc:	781b      	ldrb	r3, [r3, #0]
  4020de:	b94b      	cbnz	r3, 4020f4 <hif_chip_wake+0x1c>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  4020e0:	4b11      	ldr	r3, [pc, #68]	; (402128 <hif_chip_wake+0x50>)
  4020e2:	781b      	ldrb	r3, [r3, #0]
  4020e4:	b2db      	uxtb	r3, r3
  4020e6:	2b03      	cmp	r3, #3
  4020e8:	d00c      	beq.n	402104 <hif_chip_wake+0x2c>
  4020ea:	4b0f      	ldr	r3, [pc, #60]	; (402128 <hif_chip_wake+0x50>)
  4020ec:	781b      	ldrb	r3, [r3, #0]
  4020ee:	b2db      	uxtb	r3, r3
  4020f0:	2b04      	cmp	r3, #4
  4020f2:	d007      	beq.n	402104 <hif_chip_wake+0x2c>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  4020f4:	4a0b      	ldr	r2, [pc, #44]	; (402124 <hif_chip_wake+0x4c>)
  4020f6:	7813      	ldrb	r3, [r2, #0]
  4020f8:	3301      	adds	r3, #1
  4020fa:	b2db      	uxtb	r3, r3
  4020fc:	7013      	strb	r3, [r2, #0]
  4020fe:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  402100:	4618      	mov	r0, r3
  402102:	bd08      	pop	{r3, pc}
			ret = nm_clkless_wake();
  402104:	4b09      	ldr	r3, [pc, #36]	; (40212c <hif_chip_wake+0x54>)
  402106:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  402108:	4603      	mov	r3, r0
  40210a:	2800      	cmp	r0, #0
  40210c:	d1f8      	bne.n	402100 <hif_chip_wake+0x28>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  40210e:	f245 6178 	movw	r1, #22136	; 0x5678
  402112:	f241 0074 	movw	r0, #4212	; 0x1074
  402116:	4b06      	ldr	r3, [pc, #24]	; (402130 <hif_chip_wake+0x58>)
  402118:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40211a:	4603      	mov	r3, r0
  40211c:	2800      	cmp	r0, #0
  40211e:	d0e9      	beq.n	4020f4 <hif_chip_wake+0x1c>
  402120:	e7ee      	b.n	402100 <hif_chip_wake+0x28>
  402122:	bf00      	nop
  402124:	2040c331 	.word	0x2040c331
  402128:	2040c330 	.word	0x2040c330
  40212c:	00402ef5 	.word	0x00402ef5
  402130:	00403391 	.word	0x00403391

00402134 <hif_chip_sleep>:

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  402134:	4b1e      	ldr	r3, [pc, #120]	; (4021b0 <hif_chip_sleep+0x7c>)
  402136:	781b      	ldrb	r3, [r3, #0]
  402138:	b123      	cbz	r3, 402144 <hif_chip_sleep+0x10>
	{
		gu8ChipSleep--;
  40213a:	4a1d      	ldr	r2, [pc, #116]	; (4021b0 <hif_chip_sleep+0x7c>)
  40213c:	7813      	ldrb	r3, [r2, #0]
  40213e:	3b01      	subs	r3, #1
  402140:	b2db      	uxtb	r3, r3
  402142:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  402144:	4b1a      	ldr	r3, [pc, #104]	; (4021b0 <hif_chip_sleep+0x7c>)
  402146:	781b      	ldrb	r3, [r3, #0]
  402148:	2b00      	cmp	r3, #0
  40214a:	d12e      	bne.n	4021aa <hif_chip_sleep+0x76>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  40214c:	4b19      	ldr	r3, [pc, #100]	; (4021b4 <hif_chip_sleep+0x80>)
  40214e:	781b      	ldrb	r3, [r3, #0]
  402150:	b2db      	uxtb	r3, r3
  402152:	2b03      	cmp	r3, #3
  402154:	d006      	beq.n	402164 <hif_chip_sleep+0x30>
  402156:	4b17      	ldr	r3, [pc, #92]	; (4021b4 <hif_chip_sleep+0x80>)
  402158:	781b      	ldrb	r3, [r3, #0]
  40215a:	b2db      	uxtb	r3, r3
  40215c:	2b04      	cmp	r3, #4
  40215e:	d001      	beq.n	402164 <hif_chip_sleep+0x30>
	sint8 ret = M2M_SUCCESS;
  402160:	2300      	movs	r3, #0
  402162:	e023      	b.n	4021ac <hif_chip_sleep+0x78>
{
  402164:	b500      	push	{lr}
  402166:	b083      	sub	sp, #12
		{
			uint32 reg = 0;
  402168:	2300      	movs	r3, #0
  40216a:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  40216c:	f244 3121 	movw	r1, #17185	; 0x4321
  402170:	f241 0074 	movw	r0, #4212	; 0x1074
  402174:	4b10      	ldr	r3, [pc, #64]	; (4021b8 <hif_chip_sleep+0x84>)
  402176:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  402178:	4603      	mov	r3, r0
  40217a:	b118      	cbz	r0, 402184 <hif_chip_sleep+0x50>
		{
		}
	}
ERR1:
	return ret;
}
  40217c:	4618      	mov	r0, r3
  40217e:	b003      	add	sp, #12
  402180:	f85d fb04 	ldr.w	pc, [sp], #4
			ret = nm_read_reg_with_ret(0x1, &reg);
  402184:	a901      	add	r1, sp, #4
  402186:	2001      	movs	r0, #1
  402188:	4b0c      	ldr	r3, [pc, #48]	; (4021bc <hif_chip_sleep+0x88>)
  40218a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40218c:	4603      	mov	r3, r0
  40218e:	2800      	cmp	r0, #0
  402190:	d1f4      	bne.n	40217c <hif_chip_sleep+0x48>
			if(reg&0x2)
  402192:	9901      	ldr	r1, [sp, #4]
  402194:	f011 0f02 	tst.w	r1, #2
  402198:	d0f0      	beq.n	40217c <hif_chip_sleep+0x48>
				reg &=~(1 << 1);
  40219a:	f021 0102 	bic.w	r1, r1, #2
  40219e:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  4021a0:	2001      	movs	r0, #1
  4021a2:	4b05      	ldr	r3, [pc, #20]	; (4021b8 <hif_chip_sleep+0x84>)
  4021a4:	4798      	blx	r3
  4021a6:	4603      	mov	r3, r0
  4021a8:	e7e8      	b.n	40217c <hif_chip_sleep+0x48>
	sint8 ret = M2M_SUCCESS;
  4021aa:	2300      	movs	r3, #0
}
  4021ac:	4618      	mov	r0, r3
  4021ae:	4770      	bx	lr
  4021b0:	2040c331 	.word	0x2040c331
  4021b4:	2040c330 	.word	0x2040c330
  4021b8:	00403391 	.word	0x00403391
  4021bc:	00403385 	.word	0x00403385

004021c0 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  4021c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4021c4:	b087      	sub	sp, #28
  4021c6:	4607      	mov	r7, r0
  4021c8:	4688      	mov	r8, r1
  4021ca:	4692      	mov	sl, r2
  4021cc:	4699      	mov	r9, r3
  4021ce:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4021d0:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  4021d4:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  4021d8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  4021dc:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  4021e0:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  4021e4:	2308      	movs	r3, #8
  4021e6:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  4021ea:	2c00      	cmp	r4, #0
  4021ec:	f000 809f 	beq.w	40232e <hif_send+0x16e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  4021f0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4021f4:	fa16 f383 	uxtah	r3, r6, r3
  4021f8:	442b      	add	r3, r5
  4021fa:	b29b      	uxth	r3, r3
  4021fc:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
  402200:	4b5c      	ldr	r3, [pc, #368]	; (402374 <hif_send+0x1b4>)
  402202:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  402204:	4683      	mov	fp, r0
  402206:	2800      	cmp	r0, #0
  402208:	f040 80a2 	bne.w	402350 <hif_send+0x190>
	{
		volatile uint32 reg, dma_addr = 0;
  40220c:	2300      	movs	r3, #0
  40220e:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  402210:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  402214:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  402216:	9b02      	ldr	r3, [sp, #8]
  402218:	431f      	orrs	r7, r3
  40221a:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  40221c:	9b02      	ldr	r3, [sp, #8]
  40221e:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
  402222:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  402224:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  402228:	9b02      	ldr	r3, [sp, #8]
  40222a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40222e:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  402230:	9902      	ldr	r1, [sp, #8]
  402232:	f241 008c 	movw	r0, #4236	; 0x108c
  402236:	4b50      	ldr	r3, [pc, #320]	; (402378 <hif_send+0x1b8>)
  402238:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  40223a:	4683      	mov	fp, r0
  40223c:	2800      	cmp	r0, #0
  40223e:	f040 8091 	bne.w	402364 <hif_send+0x1a4>


		reg = 0;
  402242:	2300      	movs	r3, #0
  402244:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  402246:	9b02      	ldr	r3, [sp, #8]
  402248:	f043 0302 	orr.w	r3, r3, #2
  40224c:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  40224e:	9902      	ldr	r1, [sp, #8]
  402250:	f241 0078 	movw	r0, #4216	; 0x1078
  402254:	4b48      	ldr	r3, [pc, #288]	; (402378 <hif_send+0x1b8>)
  402256:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  402258:	4683      	mov	fp, r0
  40225a:	2800      	cmp	r0, #0
  40225c:	f040 8082 	bne.w	402364 <hif_send+0x1a4>
		dma_addr = 0;
  402260:	2300      	movs	r3, #0
  402262:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  402264:	f8ad 3006 	strh.w	r3, [sp, #6]
  402268:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40226c:	b29b      	uxth	r3, r3
  40226e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  402272:	d216      	bcs.n	4022a2 <hif_send+0xe2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  402274:	f241 0878 	movw	r8, #4216	; 0x1078
  402278:	4f40      	ldr	r7, [pc, #256]	; (40237c <hif_send+0x1bc>)
  40227a:	a902      	add	r1, sp, #8
  40227c:	4640      	mov	r0, r8
  40227e:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  402280:	b978      	cbnz	r0, 4022a2 <hif_send+0xe2>
			if (!(reg & 0x2))
  402282:	9b02      	ldr	r3, [sp, #8]
  402284:	f013 0f02 	tst.w	r3, #2
  402288:	d059      	beq.n	40233e <hif_send+0x17e>
		for(cnt = 0; cnt < 1000; cnt ++)
  40228a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40228e:	3301      	adds	r3, #1
  402290:	b29b      	uxth	r3, r3
  402292:	f8ad 3006 	strh.w	r3, [sp, #6]
  402296:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40229a:	b29b      	uxth	r3, r3
  40229c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4022a0:	d3eb      	bcc.n	40227a <hif_send+0xba>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  4022a2:	9b03      	ldr	r3, [sp, #12]
  4022a4:	2b00      	cmp	r3, #0
  4022a6:	d061      	beq.n	40236c <hif_send+0x1ac>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  4022a8:	9b03      	ldr	r3, [sp, #12]
  4022aa:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  4022ac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4022b0:	b29b      	uxth	r3, r3
  4022b2:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  4022b6:	9804      	ldr	r0, [sp, #16]
  4022b8:	2208      	movs	r2, #8
  4022ba:	a905      	add	r1, sp, #20
  4022bc:	4b30      	ldr	r3, [pc, #192]	; (402380 <hif_send+0x1c0>)
  4022be:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  4022c0:	4683      	mov	fp, r0
  4022c2:	2800      	cmp	r0, #0
  4022c4:	d14e      	bne.n	402364 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  4022c6:	9b04      	ldr	r3, [sp, #16]
  4022c8:	3308      	adds	r3, #8
  4022ca:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  4022cc:	f1ba 0f00 	cmp.w	sl, #0
  4022d0:	d00a      	beq.n	4022e8 <hif_send+0x128>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  4022d2:	9804      	ldr	r0, [sp, #16]
  4022d4:	464a      	mov	r2, r9
  4022d6:	4651      	mov	r1, sl
  4022d8:	4b29      	ldr	r3, [pc, #164]	; (402380 <hif_send+0x1c0>)
  4022da:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4022dc:	4683      	mov	fp, r0
  4022de:	2800      	cmp	r0, #0
  4022e0:	d140      	bne.n	402364 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  4022e2:	9b04      	ldr	r3, [sp, #16]
  4022e4:	444b      	add	r3, r9
  4022e6:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  4022e8:	b17c      	cbz	r4, 40230a <hif_send+0x14a>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  4022ea:	9b04      	ldr	r3, [sp, #16]
  4022ec:	eba5 0509 	sub.w	r5, r5, r9
  4022f0:	441d      	add	r5, r3
  4022f2:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  4022f4:	9804      	ldr	r0, [sp, #16]
  4022f6:	4632      	mov	r2, r6
  4022f8:	4621      	mov	r1, r4
  4022fa:	4b21      	ldr	r3, [pc, #132]	; (402380 <hif_send+0x1c0>)
  4022fc:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4022fe:	4683      	mov	fp, r0
  402300:	2800      	cmp	r0, #0
  402302:	d12f      	bne.n	402364 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  402304:	9b04      	ldr	r3, [sp, #16]
  402306:	441e      	add	r6, r3
  402308:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  40230a:	9b03      	ldr	r3, [sp, #12]
  40230c:	009b      	lsls	r3, r3, #2
  40230e:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  402310:	9b02      	ldr	r3, [sp, #8]
  402312:	f043 0302 	orr.w	r3, r3, #2
  402316:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  402318:	9902      	ldr	r1, [sp, #8]
  40231a:	f241 006c 	movw	r0, #4204	; 0x106c
  40231e:	4b16      	ldr	r3, [pc, #88]	; (402378 <hif_send+0x1b8>)
  402320:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  402322:	4683      	mov	fp, r0
  402324:	b9f0      	cbnz	r0, 402364 <hif_send+0x1a4>
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR1;
	}
	ret = hif_chip_sleep();
  402326:	4b17      	ldr	r3, [pc, #92]	; (402384 <hif_send+0x1c4>)
  402328:	4798      	blx	r3
  40232a:	4683      	mov	fp, r0
  40232c:	e01a      	b.n	402364 <hif_send+0x1a4>
		strHif.u16Length += u16CtrlBufSize;
  40232e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  402332:	fa19 f383 	uxtah	r3, r9, r3
  402336:	b29b      	uxth	r3, r3
  402338:	f8ad 3016 	strh.w	r3, [sp, #22]
  40233c:	e760      	b.n	402200 <hif_send+0x40>
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  40233e:	a903      	add	r1, sp, #12
  402340:	4811      	ldr	r0, [pc, #68]	; (402388 <hif_send+0x1c8>)
  402342:	4b0e      	ldr	r3, [pc, #56]	; (40237c <hif_send+0x1bc>)
  402344:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  402346:	2800      	cmp	r0, #0
  402348:	d0ab      	beq.n	4022a2 <hif_send+0xe2>
					dma_addr = 0;
  40234a:	2300      	movs	r3, #0
  40234c:	9303      	str	r3, [sp, #12]
  40234e:	e7a8      	b.n	4022a2 <hif_send+0xe2>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  402350:	f240 129f 	movw	r2, #415	; 0x19f
  402354:	490d      	ldr	r1, [pc, #52]	; (40238c <hif_send+0x1cc>)
  402356:	480e      	ldr	r0, [pc, #56]	; (402390 <hif_send+0x1d0>)
  402358:	4c0e      	ldr	r4, [pc, #56]	; (402394 <hif_send+0x1d4>)
  40235a:	47a0      	blx	r4
  40235c:	480e      	ldr	r0, [pc, #56]	; (402398 <hif_send+0x1d8>)
  40235e:	47a0      	blx	r4
  402360:	480e      	ldr	r0, [pc, #56]	; (40239c <hif_send+0x1dc>)
  402362:	47a0      	blx	r4

ERR1:
	return ret;
}
  402364:	4658      	mov	r0, fp
  402366:	b007      	add	sp, #28
  402368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret =  M2M_ERR_MEM_ALLOC;
  40236c:	f06f 0b02 	mvn.w	fp, #2
  402370:	e7f8      	b.n	402364 <hif_send+0x1a4>
  402372:	bf00      	nop
  402374:	004020d9 	.word	0x004020d9
  402378:	00403391 	.word	0x00403391
  40237c:	00403385 	.word	0x00403385
  402380:	004033f9 	.word	0x004033f9
  402384:	00402135 	.word	0x00402135
  402388:	00150400 	.word	0x00150400
  40238c:	00408c1c 	.word	0x00408c1c
  402390:	00408bec 	.word	0x00408bec
  402394:	00405c79 	.word	0x00405c79
  402398:	00408e70 	.word	0x00408e70
  40239c:	00408c18 	.word	0x00408c18

004023a0 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  4023a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4023a4:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  4023a6:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 4026a0 <hif_handle_isr+0x300>
	ret = hif_chip_wake();
  4023aa:	4fa2      	ldr	r7, [pc, #648]	; (402634 <hif_handle_isr+0x294>)
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  4023ac:	4ea2      	ldr	r6, [pc, #648]	; (402638 <hif_handle_isr+0x298>)
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  4023ae:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 4026a4 <hif_handle_isr+0x304>
	while (gu8Interrupt) {
  4023b2:	e0d5      	b.n	402560 <hif_handle_isr+0x1c0>
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  4023b4:	2204      	movs	r2, #4
  4023b6:	a904      	add	r1, sp, #16
  4023b8:	9805      	ldr	r0, [sp, #20]
  4023ba:	4ba0      	ldr	r3, [pc, #640]	; (40263c <hif_handle_isr+0x29c>)
  4023bc:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  4023be:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4023c2:	b29b      	uxth	r3, r3
  4023c4:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  4023c8:	4604      	mov	r4, r0
  4023ca:	2800      	cmp	r0, #0
  4023cc:	d130      	bne.n	402430 <hif_handle_isr+0x90>
					if(strHif.u16Length != size)
  4023ce:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4023d2:	b29b      	uxth	r3, r3
  4023d4:	429d      	cmp	r5, r3
  4023d6:	d005      	beq.n	4023e4 <hif_handle_isr+0x44>
						if((size - strHif.u16Length) > 4)
  4023d8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4023dc:	b29b      	uxth	r3, r3
  4023de:	1aeb      	subs	r3, r5, r3
  4023e0:	2b04      	cmp	r3, #4
  4023e2:	dc33      	bgt.n	40244c <hif_handle_isr+0xac>
					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  4023e4:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4023e8:	b2db      	uxtb	r3, r3
  4023ea:	2b01      	cmp	r3, #1
  4023ec:	d047      	beq.n	40247e <hif_handle_isr+0xde>
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  4023ee:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4023f2:	b2db      	uxtb	r3, r3
  4023f4:	2b02      	cmp	r3, #2
  4023f6:	d05f      	beq.n	4024b8 <hif_handle_isr+0x118>
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  4023f8:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4023fc:	b2db      	uxtb	r3, r3
  4023fe:	2b04      	cmp	r3, #4
  402400:	d068      	beq.n	4024d4 <hif_handle_isr+0x134>
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  402402:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402406:	b2db      	uxtb	r3, r3
  402408:	2b06      	cmp	r3, #6
  40240a:	d071      	beq.n	4024f0 <hif_handle_isr+0x150>
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  40240c:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402410:	b2db      	uxtb	r3, r3
  402412:	2b07      	cmp	r3, #7
  402414:	d07a      	beq.n	40250c <hif_handle_isr+0x16c>
						M2M_ERR("(hif) invalid group ID\n");
  402416:	f240 2202 	movw	r2, #514	; 0x202
  40241a:	4641      	mov	r1, r8
  40241c:	4630      	mov	r0, r6
  40241e:	4c88      	ldr	r4, [pc, #544]	; (402640 <hif_handle_isr+0x2a0>)
  402420:	47a0      	blx	r4
  402422:	4888      	ldr	r0, [pc, #544]	; (402644 <hif_handle_isr+0x2a4>)
  402424:	47a0      	blx	r4
  402426:	4888      	ldr	r0, [pc, #544]	; (402648 <hif_handle_isr+0x2a8>)
  402428:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  40242a:	f06f 0405 	mvn.w	r4, #5
  40242e:	e096      	b.n	40255e <hif_handle_isr+0x1be>
						M2M_ERR("(hif) address bus fail\n");
  402430:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  402434:	4641      	mov	r1, r8
  402436:	4630      	mov	r0, r6
  402438:	4d81      	ldr	r5, [pc, #516]	; (402640 <hif_handle_isr+0x2a0>)
  40243a:	47a8      	blx	r5
  40243c:	4883      	ldr	r0, [pc, #524]	; (40264c <hif_handle_isr+0x2ac>)
  40243e:	47a8      	blx	r5
  402440:	4881      	ldr	r0, [pc, #516]	; (402648 <hif_handle_isr+0x2a8>)
  402442:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  402444:	2001      	movs	r0, #1
  402446:	4b82      	ldr	r3, [pc, #520]	; (402650 <hif_handle_isr+0x2b0>)
  402448:	4798      	blx	r3
  40244a:	e088      	b.n	40255e <hif_handle_isr+0x1be>
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  40244c:	f240 12df 	movw	r2, #479	; 0x1df
  402450:	4641      	mov	r1, r8
  402452:	4630      	mov	r0, r6
  402454:	4c7a      	ldr	r4, [pc, #488]	; (402640 <hif_handle_isr+0x2a0>)
  402456:	47a0      	blx	r4
  402458:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  40245c:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402460:	f89d 1011 	ldrb.w	r1, [sp, #17]
  402464:	9100      	str	r1, [sp, #0]
  402466:	b292      	uxth	r2, r2
  402468:	4629      	mov	r1, r5
  40246a:	487a      	ldr	r0, [pc, #488]	; (402654 <hif_handle_isr+0x2b4>)
  40246c:	47a0      	blx	r4
  40246e:	4876      	ldr	r0, [pc, #472]	; (402648 <hif_handle_isr+0x2a8>)
  402470:	47a0      	blx	r4
							nm_bsp_interrupt_ctrl(1);
  402472:	2001      	movs	r0, #1
  402474:	4b76      	ldr	r3, [pc, #472]	; (402650 <hif_handle_isr+0x2b0>)
  402476:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  402478:	f06f 0405 	mvn.w	r4, #5
  40247c:	e06f      	b.n	40255e <hif_handle_isr+0x1be>
						if(pfWifiCb)
  40247e:	4b76      	ldr	r3, [pc, #472]	; (402658 <hif_handle_isr+0x2b8>)
  402480:	681b      	ldr	r3, [r3, #0]
  402482:	b143      	cbz	r3, 402496 <hif_handle_isr+0xf6>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402484:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402488:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  40248c:	3908      	subs	r1, #8
  40248e:	9a05      	ldr	r2, [sp, #20]
  402490:	3208      	adds	r2, #8
  402492:	b289      	uxth	r1, r1
  402494:	4798      	blx	r3
					if(!gu8HifSizeDone)
  402496:	4b71      	ldr	r3, [pc, #452]	; (40265c <hif_handle_isr+0x2bc>)
  402498:	781b      	ldrb	r3, [r3, #0]
  40249a:	2b00      	cmp	r3, #0
  40249c:	d15c      	bne.n	402558 <hif_handle_isr+0x1b8>
						M2M_ERR("(hif) host app didn't set RX Done\n");
  40249e:	f240 2209 	movw	r2, #521	; 0x209
  4024a2:	4641      	mov	r1, r8
  4024a4:	4630      	mov	r0, r6
  4024a6:	4c66      	ldr	r4, [pc, #408]	; (402640 <hif_handle_isr+0x2a0>)
  4024a8:	47a0      	blx	r4
  4024aa:	486d      	ldr	r0, [pc, #436]	; (402660 <hif_handle_isr+0x2c0>)
  4024ac:	47a0      	blx	r4
  4024ae:	4866      	ldr	r0, [pc, #408]	; (402648 <hif_handle_isr+0x2a8>)
  4024b0:	47a0      	blx	r4
						ret = hif_set_rx_done();
  4024b2:	4b6c      	ldr	r3, [pc, #432]	; (402664 <hif_handle_isr+0x2c4>)
  4024b4:	4798      	blx	r3
  4024b6:	e04f      	b.n	402558 <hif_handle_isr+0x1b8>
						if(pfIpCb)
  4024b8:	4b6b      	ldr	r3, [pc, #428]	; (402668 <hif_handle_isr+0x2c8>)
  4024ba:	681b      	ldr	r3, [r3, #0]
  4024bc:	2b00      	cmp	r3, #0
  4024be:	d0ea      	beq.n	402496 <hif_handle_isr+0xf6>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4024c0:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4024c4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4024c8:	3908      	subs	r1, #8
  4024ca:	9a05      	ldr	r2, [sp, #20]
  4024cc:	3208      	adds	r2, #8
  4024ce:	b289      	uxth	r1, r1
  4024d0:	4798      	blx	r3
  4024d2:	e7e0      	b.n	402496 <hif_handle_isr+0xf6>
						if(pfOtaCb)
  4024d4:	4b65      	ldr	r3, [pc, #404]	; (40266c <hif_handle_isr+0x2cc>)
  4024d6:	681b      	ldr	r3, [r3, #0]
  4024d8:	2b00      	cmp	r3, #0
  4024da:	d0dc      	beq.n	402496 <hif_handle_isr+0xf6>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4024dc:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4024e0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4024e4:	3908      	subs	r1, #8
  4024e6:	9a05      	ldr	r2, [sp, #20]
  4024e8:	3208      	adds	r2, #8
  4024ea:	b289      	uxth	r1, r1
  4024ec:	4798      	blx	r3
  4024ee:	e7d2      	b.n	402496 <hif_handle_isr+0xf6>
						if(pfCryptoCb)
  4024f0:	4b5f      	ldr	r3, [pc, #380]	; (402670 <hif_handle_isr+0x2d0>)
  4024f2:	681b      	ldr	r3, [r3, #0]
  4024f4:	2b00      	cmp	r3, #0
  4024f6:	d0ce      	beq.n	402496 <hif_handle_isr+0xf6>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4024f8:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4024fc:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402500:	3908      	subs	r1, #8
  402502:	9a05      	ldr	r2, [sp, #20]
  402504:	3208      	adds	r2, #8
  402506:	b289      	uxth	r1, r1
  402508:	4798      	blx	r3
  40250a:	e7c4      	b.n	402496 <hif_handle_isr+0xf6>
						if(pfSigmaCb)
  40250c:	4b59      	ldr	r3, [pc, #356]	; (402674 <hif_handle_isr+0x2d4>)
  40250e:	681b      	ldr	r3, [r3, #0]
  402510:	2b00      	cmp	r3, #0
  402512:	d0c0      	beq.n	402496 <hif_handle_isr+0xf6>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402514:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402518:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  40251c:	3908      	subs	r1, #8
  40251e:	9a05      	ldr	r2, [sp, #20]
  402520:	3208      	adds	r2, #8
  402522:	b289      	uxth	r1, r1
  402524:	4798      	blx	r3
  402526:	e7b6      	b.n	402496 <hif_handle_isr+0xf6>
					M2M_ERR("(hif) Wrong Size\n");
  402528:	f240 2211 	movw	r2, #529	; 0x211
  40252c:	4641      	mov	r1, r8
  40252e:	4630      	mov	r0, r6
  402530:	4c43      	ldr	r4, [pc, #268]	; (402640 <hif_handle_isr+0x2a0>)
  402532:	47a0      	blx	r4
  402534:	4850      	ldr	r0, [pc, #320]	; (402678 <hif_handle_isr+0x2d8>)
  402536:	47a0      	blx	r4
  402538:	4843      	ldr	r0, [pc, #268]	; (402648 <hif_handle_isr+0x2a8>)
  40253a:	47a0      	blx	r4
					ret = M2M_ERR_RCV;
  40253c:	f06f 0401 	mvn.w	r4, #1
  402540:	e02f      	b.n	4025a2 <hif_handle_isr+0x202>
				M2M_ERR("(hif) False interrupt %lx",reg);
  402542:	f44f 7206 	mov.w	r2, #536	; 0x218
  402546:	4641      	mov	r1, r8
  402548:	4630      	mov	r0, r6
  40254a:	4c3d      	ldr	r4, [pc, #244]	; (402640 <hif_handle_isr+0x2a0>)
  40254c:	47a0      	blx	r4
  40254e:	9903      	ldr	r1, [sp, #12]
  402550:	484a      	ldr	r0, [pc, #296]	; (40267c <hif_handle_isr+0x2dc>)
  402552:	47a0      	blx	r4
  402554:	483c      	ldr	r0, [pc, #240]	; (402648 <hif_handle_isr+0x2a8>)
  402556:	47a0      	blx	r4
	ret = hif_chip_sleep();
  402558:	4b49      	ldr	r3, [pc, #292]	; (402680 <hif_handle_isr+0x2e0>)
  40255a:	4798      	blx	r3
  40255c:	4604      	mov	r4, r0
			if(ret == M2M_SUCCESS) {
  40255e:	bb04      	cbnz	r4, 4025a2 <hif_handle_isr+0x202>
	while (gu8Interrupt) {
  402560:	f899 3000 	ldrb.w	r3, [r9]
  402564:	2b00      	cmp	r3, #0
  402566:	f000 809f 	beq.w	4026a8 <hif_handle_isr+0x308>
		gu8Interrupt--;
  40256a:	f899 3000 	ldrb.w	r3, [r9]
  40256e:	3b01      	subs	r3, #1
  402570:	b2db      	uxtb	r3, r3
  402572:	f889 3000 	strb.w	r3, [r9]
  402576:	e01f      	b.n	4025b8 <hif_handle_isr+0x218>
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  402578:	f240 221e 	movw	r2, #542	; 0x21e
  40257c:	4641      	mov	r1, r8
  40257e:	4630      	mov	r0, r6
  402580:	4d2f      	ldr	r5, [pc, #188]	; (402640 <hif_handle_isr+0x2a0>)
  402582:	47a8      	blx	r5
  402584:	483f      	ldr	r0, [pc, #252]	; (402684 <hif_handle_isr+0x2e4>)
  402586:	47a8      	blx	r5
  402588:	482f      	ldr	r0, [pc, #188]	; (402648 <hif_handle_isr+0x2a8>)
  40258a:	47a8      	blx	r5
  40258c:	e009      	b.n	4025a2 <hif_handle_isr+0x202>
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  40258e:	f44f 7209 	mov.w	r2, #548	; 0x224
  402592:	4641      	mov	r1, r8
  402594:	4630      	mov	r0, r6
  402596:	4d2a      	ldr	r5, [pc, #168]	; (402640 <hif_handle_isr+0x2a0>)
  402598:	47a8      	blx	r5
  40259a:	483b      	ldr	r0, [pc, #236]	; (402688 <hif_handle_isr+0x2e8>)
  40259c:	47a8      	blx	r5
  40259e:	482a      	ldr	r0, [pc, #168]	; (402648 <hif_handle_isr+0x2a8>)
  4025a0:	47a8      	blx	r5
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  4025a2:	f240 2243 	movw	r2, #579	; 0x243
  4025a6:	4939      	ldr	r1, [pc, #228]	; (40268c <hif_handle_isr+0x2ec>)
  4025a8:	4630      	mov	r0, r6
  4025aa:	4d25      	ldr	r5, [pc, #148]	; (402640 <hif_handle_isr+0x2a0>)
  4025ac:	47a8      	blx	r5
  4025ae:	4621      	mov	r1, r4
  4025b0:	4837      	ldr	r0, [pc, #220]	; (402690 <hif_handle_isr+0x2f0>)
  4025b2:	47a8      	blx	r5
  4025b4:	4824      	ldr	r0, [pc, #144]	; (402648 <hif_handle_isr+0x2a8>)
  4025b6:	47a8      	blx	r5
	ret = hif_chip_wake();
  4025b8:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  4025ba:	4604      	mov	r4, r0
  4025bc:	2800      	cmp	r0, #0
  4025be:	d1e6      	bne.n	40258e <hif_handle_isr+0x1ee>
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  4025c0:	a903      	add	r1, sp, #12
  4025c2:	f241 0070 	movw	r0, #4208	; 0x1070
  4025c6:	4b33      	ldr	r3, [pc, #204]	; (402694 <hif_handle_isr+0x2f4>)
  4025c8:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  4025ca:	4604      	mov	r4, r0
  4025cc:	2800      	cmp	r0, #0
  4025ce:	d1d3      	bne.n	402578 <hif_handle_isr+0x1d8>
			if(reg & 0x1)	/* New interrupt has been received */
  4025d0:	9b03      	ldr	r3, [sp, #12]
  4025d2:	f013 0f01 	tst.w	r3, #1
  4025d6:	d0b4      	beq.n	402542 <hif_handle_isr+0x1a2>
				nm_bsp_interrupt_ctrl(0);
  4025d8:	4b1d      	ldr	r3, [pc, #116]	; (402650 <hif_handle_isr+0x2b0>)
  4025da:	4798      	blx	r3
				reg &= ~(1<<0);
  4025dc:	9903      	ldr	r1, [sp, #12]
  4025de:	f021 0101 	bic.w	r1, r1, #1
  4025e2:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  4025e4:	f241 0070 	movw	r0, #4208	; 0x1070
  4025e8:	4b2b      	ldr	r3, [pc, #172]	; (402698 <hif_handle_isr+0x2f8>)
  4025ea:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  4025ec:	4604      	mov	r4, r0
  4025ee:	2800      	cmp	r0, #0
  4025f0:	d1d7      	bne.n	4025a2 <hif_handle_isr+0x202>
				gu8HifSizeDone = 0;
  4025f2:	2200      	movs	r2, #0
  4025f4:	4b19      	ldr	r3, [pc, #100]	; (40265c <hif_handle_isr+0x2bc>)
  4025f6:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  4025f8:	9d03      	ldr	r5, [sp, #12]
  4025fa:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  4025fe:	2d00      	cmp	r5, #0
  402600:	d092      	beq.n	402528 <hif_handle_isr+0x188>
					uint32 address = 0;
  402602:	a906      	add	r1, sp, #24
  402604:	f841 2d04 	str.w	r2, [r1, #-4]!
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  402608:	f241 0084 	movw	r0, #4228	; 0x1084
  40260c:	4b21      	ldr	r3, [pc, #132]	; (402694 <hif_handle_isr+0x2f4>)
  40260e:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  402610:	4604      	mov	r4, r0
  402612:	2800      	cmp	r0, #0
  402614:	f43f aece 	beq.w	4023b4 <hif_handle_isr+0x14>
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  402618:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  40261c:	4641      	mov	r1, r8
  40261e:	4630      	mov	r0, r6
  402620:	4d07      	ldr	r5, [pc, #28]	; (402640 <hif_handle_isr+0x2a0>)
  402622:	47a8      	blx	r5
  402624:	481d      	ldr	r0, [pc, #116]	; (40269c <hif_handle_isr+0x2fc>)
  402626:	47a8      	blx	r5
  402628:	4807      	ldr	r0, [pc, #28]	; (402648 <hif_handle_isr+0x2a8>)
  40262a:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  40262c:	2001      	movs	r0, #1
  40262e:	4b08      	ldr	r3, [pc, #32]	; (402650 <hif_handle_isr+0x2b0>)
  402630:	4798      	blx	r3
  402632:	e794      	b.n	40255e <hif_handle_isr+0x1be>
  402634:	004020d9 	.word	0x004020d9
  402638:	00408bec 	.word	0x00408bec
  40263c:	0040339d 	.word	0x0040339d
  402640:	00405c79 	.word	0x00405c79
  402644:	00408cdc 	.word	0x00408cdc
  402648:	00408c18 	.word	0x00408c18
  40264c:	00408c84 	.word	0x00408c84
  402650:	00401df1 	.word	0x00401df1
  402654:	00408c9c 	.word	0x00408c9c
  402658:	2040c348 	.word	0x2040c348
  40265c:	2040c332 	.word	0x2040c332
  402660:	00408cf4 	.word	0x00408cf4
  402664:	00402099 	.word	0x00402099
  402668:	2040c33c 	.word	0x2040c33c
  40266c:	2040c340 	.word	0x2040c340
  402670:	2040c334 	.word	0x2040c334
  402674:	2040c344 	.word	0x2040c344
  402678:	00408d18 	.word	0x00408d18
  40267c:	00408d2c 	.word	0x00408d2c
  402680:	00402135 	.word	0x00402135
  402684:	00408d48 	.word	0x00408d48
  402688:	00408d6c 	.word	0x00408d6c
  40268c:	00408c30 	.word	0x00408c30
  402690:	00408d8c 	.word	0x00408d8c
  402694:	00403385 	.word	0x00403385
  402698:	00403391 	.word	0x00403391
  40269c:	00408c5c 	.word	0x00408c5c
  4026a0:	2040c333 	.word	0x2040c333
  4026a4:	00408c28 	.word	0x00408c28
			}
		}
	}

	return ret;
}
  4026a8:	2000      	movs	r0, #0
  4026aa:	b007      	add	sp, #28
  4026ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

004026b0 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  4026b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4026b4:	b083      	sub	sp, #12
  4026b6:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  4026b8:	2a00      	cmp	r2, #0
  4026ba:	bf18      	it	ne
  4026bc:	2900      	cmpne	r1, #0
  4026be:	d003      	beq.n	4026c8 <hif_receive+0x18>
  4026c0:	4605      	mov	r5, r0
  4026c2:	460f      	mov	r7, r1
  4026c4:	4616      	mov	r6, r2
  4026c6:	b9b8      	cbnz	r0, 4026f8 <hif_receive+0x48>
	{
		if(isDone)
  4026c8:	b14c      	cbz	r4, 4026de <hif_receive+0x2e>
		{
			gu8HifSizeDone = 1;
  4026ca:	2201      	movs	r2, #1
  4026cc:	4b32      	ldr	r3, [pc, #200]	; (402798 <hif_receive+0xe8>)
  4026ce:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  4026d0:	4b32      	ldr	r3, [pc, #200]	; (40279c <hif_receive+0xec>)
  4026d2:	4798      	blx	r3
  4026d4:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  4026d6:	4618      	mov	r0, r3
  4026d8:	b003      	add	sp, #12
  4026da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
  4026de:	f240 2269 	movw	r2, #617	; 0x269
  4026e2:	492f      	ldr	r1, [pc, #188]	; (4027a0 <hif_receive+0xf0>)
  4026e4:	482f      	ldr	r0, [pc, #188]	; (4027a4 <hif_receive+0xf4>)
  4026e6:	4c30      	ldr	r4, [pc, #192]	; (4027a8 <hif_receive+0xf8>)
  4026e8:	47a0      	blx	r4
  4026ea:	4830      	ldr	r0, [pc, #192]	; (4027ac <hif_receive+0xfc>)
  4026ec:	47a0      	blx	r4
  4026ee:	4830      	ldr	r0, [pc, #192]	; (4027b0 <hif_receive+0x100>)
  4026f0:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4026f2:	f06f 030b 	mvn.w	r3, #11
  4026f6:	e7ee      	b.n	4026d6 <hif_receive+0x26>
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  4026f8:	4669      	mov	r1, sp
  4026fa:	f241 0070 	movw	r0, #4208	; 0x1070
  4026fe:	4b2d      	ldr	r3, [pc, #180]	; (4027b4 <hif_receive+0x104>)
  402700:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402702:	4603      	mov	r3, r0
  402704:	2800      	cmp	r0, #0
  402706:	d1e6      	bne.n	4026d6 <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  402708:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  40270c:	a901      	add	r1, sp, #4
  40270e:	f241 0084 	movw	r0, #4228	; 0x1084
  402712:	4b28      	ldr	r3, [pc, #160]	; (4027b4 <hif_receive+0x104>)
  402714:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402716:	4603      	mov	r3, r0
  402718:	2800      	cmp	r0, #0
  40271a:	d1dc      	bne.n	4026d6 <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  40271c:	f3c8 088b 	ubfx	r8, r8, #2, #12
	if(u16Sz > size)
  402720:	4546      	cmp	r6, r8
  402722:	d81c      	bhi.n	40275e <hif_receive+0xae>
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  402724:	9b01      	ldr	r3, [sp, #4]
  402726:	429d      	cmp	r5, r3
  402728:	d328      	bcc.n	40277c <hif_receive+0xcc>
  40272a:	eb05 0906 	add.w	r9, r5, r6
  40272e:	4443      	add	r3, r8
  402730:	4599      	cmp	r9, r3
  402732:	d823      	bhi.n	40277c <hif_receive+0xcc>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  402734:	4632      	mov	r2, r6
  402736:	4639      	mov	r1, r7
  402738:	4628      	mov	r0, r5
  40273a:	4b1f      	ldr	r3, [pc, #124]	; (4027b8 <hif_receive+0x108>)
  40273c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  40273e:	4603      	mov	r3, r0
  402740:	2800      	cmp	r0, #0
  402742:	d1c8      	bne.n	4026d6 <hif_receive+0x26>
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  402744:	9a01      	ldr	r2, [sp, #4]
  402746:	4490      	add	r8, r2
  402748:	45c8      	cmp	r8, r9
  40274a:	d001      	beq.n	402750 <hif_receive+0xa0>
  40274c:	2c00      	cmp	r4, #0
  40274e:	d0c2      	beq.n	4026d6 <hif_receive+0x26>
		gu8HifSizeDone = 1;
  402750:	2201      	movs	r2, #1
  402752:	4b11      	ldr	r3, [pc, #68]	; (402798 <hif_receive+0xe8>)
  402754:	701a      	strb	r2, [r3, #0]
		ret = hif_set_rx_done();
  402756:	4b11      	ldr	r3, [pc, #68]	; (40279c <hif_receive+0xec>)
  402758:	4798      	blx	r3
  40275a:	4603      	mov	r3, r0
  40275c:	e7bb      	b.n	4026d6 <hif_receive+0x26>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  40275e:	f240 227a 	movw	r2, #634	; 0x27a
  402762:	490f      	ldr	r1, [pc, #60]	; (4027a0 <hif_receive+0xf0>)
  402764:	480f      	ldr	r0, [pc, #60]	; (4027a4 <hif_receive+0xf4>)
  402766:	4c10      	ldr	r4, [pc, #64]	; (4027a8 <hif_receive+0xf8>)
  402768:	47a0      	blx	r4
  40276a:	4642      	mov	r2, r8
  40276c:	4631      	mov	r1, r6
  40276e:	4813      	ldr	r0, [pc, #76]	; (4027bc <hif_receive+0x10c>)
  402770:	47a0      	blx	r4
  402772:	480f      	ldr	r0, [pc, #60]	; (4027b0 <hif_receive+0x100>)
  402774:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  402776:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  40277a:	e7ac      	b.n	4026d6 <hif_receive+0x26>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  40277c:	f44f 7220 	mov.w	r2, #640	; 0x280
  402780:	4907      	ldr	r1, [pc, #28]	; (4027a0 <hif_receive+0xf0>)
  402782:	4808      	ldr	r0, [pc, #32]	; (4027a4 <hif_receive+0xf4>)
  402784:	4c08      	ldr	r4, [pc, #32]	; (4027a8 <hif_receive+0xf8>)
  402786:	47a0      	blx	r4
  402788:	480d      	ldr	r0, [pc, #52]	; (4027c0 <hif_receive+0x110>)
  40278a:	47a0      	blx	r4
  40278c:	4808      	ldr	r0, [pc, #32]	; (4027b0 <hif_receive+0x100>)
  40278e:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  402790:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  402794:	e79f      	b.n	4026d6 <hif_receive+0x26>
  402796:	bf00      	nop
  402798:	2040c332 	.word	0x2040c332
  40279c:	00402099 	.word	0x00402099
  4027a0:	00408c40 	.word	0x00408c40
  4027a4:	00408bec 	.word	0x00408bec
  4027a8:	00405c79 	.word	0x00405c79
  4027ac:	00408dbc 	.word	0x00408dbc
  4027b0:	00408c18 	.word	0x00408c18
  4027b4:	00403385 	.word	0x00403385
  4027b8:	0040339d 	.word	0x0040339d
  4027bc:	00408ddc 	.word	0x00408ddc
  4027c0:	00408e20 	.word	0x00408e20

004027c4 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  4027c4:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  4027c6:	1e43      	subs	r3, r0, #1
  4027c8:	2b06      	cmp	r3, #6
  4027ca:	d81d      	bhi.n	402808 <hif_register_cb+0x44>
  4027cc:	e8df f003 	tbb	[pc, r3]
  4027d0:	0c100408 	.word	0x0c100408
  4027d4:	141c      	.short	0x141c
  4027d6:	18          	.byte	0x18
  4027d7:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  4027d8:	4b13      	ldr	r3, [pc, #76]	; (402828 <hif_register_cb+0x64>)
  4027da:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  4027dc:	2000      	movs	r0, #0
			break;
  4027de:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  4027e0:	4b12      	ldr	r3, [pc, #72]	; (40282c <hif_register_cb+0x68>)
  4027e2:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  4027e4:	2000      	movs	r0, #0
			break;
  4027e6:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  4027e8:	4b11      	ldr	r3, [pc, #68]	; (402830 <hif_register_cb+0x6c>)
  4027ea:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  4027ec:	2000      	movs	r0, #0
			break;
  4027ee:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  4027f0:	4b10      	ldr	r3, [pc, #64]	; (402834 <hif_register_cb+0x70>)
  4027f2:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  4027f4:	2000      	movs	r0, #0
			break;
  4027f6:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  4027f8:	4b0f      	ldr	r3, [pc, #60]	; (402838 <hif_register_cb+0x74>)
  4027fa:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  4027fc:	2000      	movs	r0, #0
			break;
  4027fe:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  402800:	4b0e      	ldr	r3, [pc, #56]	; (40283c <hif_register_cb+0x78>)
  402802:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402804:	2000      	movs	r0, #0
			break;
  402806:	bd38      	pop	{r3, r4, r5, pc}
  402808:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  40280a:	f240 22b9 	movw	r2, #697	; 0x2b9
  40280e:	490c      	ldr	r1, [pc, #48]	; (402840 <hif_register_cb+0x7c>)
  402810:	480c      	ldr	r0, [pc, #48]	; (402844 <hif_register_cb+0x80>)
  402812:	4d0d      	ldr	r5, [pc, #52]	; (402848 <hif_register_cb+0x84>)
  402814:	47a8      	blx	r5
  402816:	4621      	mov	r1, r4
  402818:	480c      	ldr	r0, [pc, #48]	; (40284c <hif_register_cb+0x88>)
  40281a:	47a8      	blx	r5
  40281c:	480c      	ldr	r0, [pc, #48]	; (402850 <hif_register_cb+0x8c>)
  40281e:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  402820:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  402824:	bd38      	pop	{r3, r4, r5, pc}
  402826:	bf00      	nop
  402828:	2040c33c 	.word	0x2040c33c
  40282c:	2040c348 	.word	0x2040c348
  402830:	2040c340 	.word	0x2040c340
  402834:	2040c338 	.word	0x2040c338
  402838:	2040c334 	.word	0x2040c334
  40283c:	2040c344 	.word	0x2040c344
  402840:	00408c4c 	.word	0x00408c4c
  402844:	00408bec 	.word	0x00408bec
  402848:	00405c79 	.word	0x00405c79
  40284c:	00408e64 	.word	0x00408e64
  402850:	00408c18 	.word	0x00408c18

00402854 <hif_init>:
{
  402854:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  402856:	2400      	movs	r4, #0
  402858:	4b09      	ldr	r3, [pc, #36]	; (402880 <hif_init+0x2c>)
  40285a:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  40285c:	4b09      	ldr	r3, [pc, #36]	; (402884 <hif_init+0x30>)
  40285e:	601c      	str	r4, [r3, #0]
	gu8ChipSleep = 0;
  402860:	4b09      	ldr	r3, [pc, #36]	; (402888 <hif_init+0x34>)
  402862:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  402864:	4b09      	ldr	r3, [pc, #36]	; (40288c <hif_init+0x38>)
  402866:	701c      	strb	r4, [r3, #0]
	gu8Interrupt = 0;
  402868:	4b09      	ldr	r3, [pc, #36]	; (402890 <hif_init+0x3c>)
  40286a:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  40286c:	4809      	ldr	r0, [pc, #36]	; (402894 <hif_init+0x40>)
  40286e:	4b0a      	ldr	r3, [pc, #40]	; (402898 <hif_init+0x44>)
  402870:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  402872:	490a      	ldr	r1, [pc, #40]	; (40289c <hif_init+0x48>)
  402874:	2003      	movs	r0, #3
  402876:	4b0a      	ldr	r3, [pc, #40]	; (4028a0 <hif_init+0x4c>)
  402878:	4798      	blx	r3
}
  40287a:	4620      	mov	r0, r4
  40287c:	bd10      	pop	{r4, pc}
  40287e:	bf00      	nop
  402880:	2040c348 	.word	0x2040c348
  402884:	2040c33c 	.word	0x2040c33c
  402888:	2040c331 	.word	0x2040c331
  40288c:	2040c330 	.word	0x2040c330
  402890:	2040c333 	.word	0x2040c333
  402894:	00402085 	.word	0x00402085
  402898:	00401d71 	.word	0x00401d71
  40289c:	00402095 	.word	0x00402095
  4028a0:	004027c5 	.word	0x004027c5

004028a4 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  4028a4:	b530      	push	{r4, r5, lr}
  4028a6:	b09f      	sub	sp, #124	; 0x7c
  4028a8:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  4028aa:	282c      	cmp	r0, #44	; 0x2c
  4028ac:	d02e      	beq.n	40290c <m2m_wifi_cb+0x68>
  4028ae:	4604      	mov	r4, r0
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  4028b0:	281b      	cmp	r0, #27
  4028b2:	d03b      	beq.n	40292c <m2m_wifi_cb+0x88>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  4028b4:	2806      	cmp	r0, #6
  4028b6:	d049      	beq.n	40294c <m2m_wifi_cb+0xa8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  4028b8:	280e      	cmp	r0, #14
  4028ba:	d025      	beq.n	402908 <m2m_wifi_cb+0x64>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  4028bc:	2832      	cmp	r0, #50	; 0x32
  4028be:	d055      	beq.n	40296c <m2m_wifi_cb+0xc8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  4028c0:	282f      	cmp	r0, #47	; 0x2f
  4028c2:	d063      	beq.n	40298c <m2m_wifi_cb+0xe8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  4028c4:	2834      	cmp	r0, #52	; 0x34
  4028c6:	d076      	beq.n	4029b6 <m2m_wifi_cb+0x112>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  4028c8:	2811      	cmp	r0, #17
  4028ca:	f000 8093 	beq.w	4029f4 <m2m_wifi_cb+0x150>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  4028ce:	2813      	cmp	r0, #19
  4028d0:	f000 80a8 	beq.w	402a24 <m2m_wifi_cb+0x180>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  4028d4:	2804      	cmp	r0, #4
  4028d6:	f000 80b7 	beq.w	402a48 <m2m_wifi_cb+0x1a4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  4028da:	2865      	cmp	r0, #101	; 0x65
  4028dc:	f000 80c6 	beq.w	402a6c <m2m_wifi_cb+0x1c8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  4028e0:	2809      	cmp	r0, #9
  4028e2:	f000 80d5 	beq.w	402a90 <m2m_wifi_cb+0x1ec>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  4028e6:	282a      	cmp	r0, #42	; 0x2a
  4028e8:	f000 80e4 	beq.w	402ab4 <m2m_wifi_cb+0x210>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  4028ec:	2820      	cmp	r0, #32
  4028ee:	f000 80f3 	beq.w	402ad8 <m2m_wifi_cb+0x234>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  4028f2:	f44f 7295 	mov.w	r2, #298	; 0x12a
  4028f6:	4986      	ldr	r1, [pc, #536]	; (402b10 <m2m_wifi_cb+0x26c>)
  4028f8:	4886      	ldr	r0, [pc, #536]	; (402b14 <m2m_wifi_cb+0x270>)
  4028fa:	4d87      	ldr	r5, [pc, #540]	; (402b18 <m2m_wifi_cb+0x274>)
  4028fc:	47a8      	blx	r5
  4028fe:	4621      	mov	r1, r4
  402900:	4886      	ldr	r0, [pc, #536]	; (402b1c <m2m_wifi_cb+0x278>)
  402902:	47a8      	blx	r5
  402904:	4886      	ldr	r0, [pc, #536]	; (402b20 <m2m_wifi_cb+0x27c>)
  402906:	47a8      	blx	r5
	}
}
  402908:	b01f      	add	sp, #124	; 0x7c
  40290a:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  40290c:	2300      	movs	r3, #0
  40290e:	2204      	movs	r2, #4
  402910:	a903      	add	r1, sp, #12
  402912:	4628      	mov	r0, r5
  402914:	4c83      	ldr	r4, [pc, #524]	; (402b24 <m2m_wifi_cb+0x280>)
  402916:	47a0      	blx	r4
  402918:	2800      	cmp	r0, #0
  40291a:	d1f5      	bne.n	402908 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  40291c:	4b82      	ldr	r3, [pc, #520]	; (402b28 <m2m_wifi_cb+0x284>)
  40291e:	681b      	ldr	r3, [r3, #0]
  402920:	2b00      	cmp	r3, #0
  402922:	d0f1      	beq.n	402908 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  402924:	a903      	add	r1, sp, #12
  402926:	202c      	movs	r0, #44	; 0x2c
  402928:	4798      	blx	r3
  40292a:	e7ed      	b.n	402908 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  40292c:	2300      	movs	r3, #0
  40292e:	2208      	movs	r2, #8
  402930:	a903      	add	r1, sp, #12
  402932:	4628      	mov	r0, r5
  402934:	4c7b      	ldr	r4, [pc, #492]	; (402b24 <m2m_wifi_cb+0x280>)
  402936:	47a0      	blx	r4
  402938:	2800      	cmp	r0, #0
  40293a:	d1e5      	bne.n	402908 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  40293c:	4b7a      	ldr	r3, [pc, #488]	; (402b28 <m2m_wifi_cb+0x284>)
  40293e:	681b      	ldr	r3, [r3, #0]
  402940:	2b00      	cmp	r3, #0
  402942:	d0e1      	beq.n	402908 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  402944:	a903      	add	r1, sp, #12
  402946:	201b      	movs	r0, #27
  402948:	4798      	blx	r3
  40294a:	e7dd      	b.n	402908 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  40294c:	2301      	movs	r3, #1
  40294e:	2230      	movs	r2, #48	; 0x30
  402950:	a903      	add	r1, sp, #12
  402952:	4628      	mov	r0, r5
  402954:	4c73      	ldr	r4, [pc, #460]	; (402b24 <m2m_wifi_cb+0x280>)
  402956:	47a0      	blx	r4
  402958:	2800      	cmp	r0, #0
  40295a:	d1d5      	bne.n	402908 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  40295c:	4b72      	ldr	r3, [pc, #456]	; (402b28 <m2m_wifi_cb+0x284>)
  40295e:	681b      	ldr	r3, [r3, #0]
  402960:	2b00      	cmp	r3, #0
  402962:	d0d1      	beq.n	402908 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  402964:	a903      	add	r1, sp, #12
  402966:	2006      	movs	r0, #6
  402968:	4798      	blx	r3
  40296a:	e7cd      	b.n	402908 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  40296c:	2300      	movs	r3, #0
  40296e:	2210      	movs	r2, #16
  402970:	a903      	add	r1, sp, #12
  402972:	4628      	mov	r0, r5
  402974:	4c6b      	ldr	r4, [pc, #428]	; (402b24 <m2m_wifi_cb+0x280>)
  402976:	47a0      	blx	r4
  402978:	2800      	cmp	r0, #0
  40297a:	d1c5      	bne.n	402908 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  40297c:	4b6a      	ldr	r3, [pc, #424]	; (402b28 <m2m_wifi_cb+0x284>)
  40297e:	681b      	ldr	r3, [r3, #0]
  402980:	2b00      	cmp	r3, #0
  402982:	d0c1      	beq.n	402908 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  402984:	a903      	add	r1, sp, #12
  402986:	2032      	movs	r0, #50	; 0x32
  402988:	4798      	blx	r3
  40298a:	e7bd      	b.n	402908 <m2m_wifi_cb+0x64>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  40298c:	2264      	movs	r2, #100	; 0x64
  40298e:	2100      	movs	r1, #0
  402990:	a803      	add	r0, sp, #12
  402992:	4b66      	ldr	r3, [pc, #408]	; (402b2c <m2m_wifi_cb+0x288>)
  402994:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  402996:	2300      	movs	r3, #0
  402998:	2264      	movs	r2, #100	; 0x64
  40299a:	a903      	add	r1, sp, #12
  40299c:	4628      	mov	r0, r5
  40299e:	4c61      	ldr	r4, [pc, #388]	; (402b24 <m2m_wifi_cb+0x280>)
  4029a0:	47a0      	blx	r4
  4029a2:	2800      	cmp	r0, #0
  4029a4:	d1b0      	bne.n	402908 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  4029a6:	4b60      	ldr	r3, [pc, #384]	; (402b28 <m2m_wifi_cb+0x284>)
  4029a8:	681b      	ldr	r3, [r3, #0]
  4029aa:	2b00      	cmp	r3, #0
  4029ac:	d0ac      	beq.n	402908 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  4029ae:	a903      	add	r1, sp, #12
  4029b0:	202f      	movs	r0, #47	; 0x2f
  4029b2:	4798      	blx	r3
  4029b4:	e7a8      	b.n	402908 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  4029b6:	2300      	movs	r3, #0
  4029b8:	2204      	movs	r2, #4
  4029ba:	a903      	add	r1, sp, #12
  4029bc:	4628      	mov	r0, r5
  4029be:	4c59      	ldr	r4, [pc, #356]	; (402b24 <m2m_wifi_cb+0x280>)
  4029c0:	47a0      	blx	r4
  4029c2:	2800      	cmp	r0, #0
  4029c4:	d1a0      	bne.n	402908 <m2m_wifi_cb+0x64>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  4029c6:	485a      	ldr	r0, [pc, #360]	; (402b30 <m2m_wifi_cb+0x28c>)
  4029c8:	4c53      	ldr	r4, [pc, #332]	; (402b18 <m2m_wifi_cb+0x274>)
  4029ca:	47a0      	blx	r4
  4029cc:	9903      	ldr	r1, [sp, #12]
  4029ce:	b2cb      	uxtb	r3, r1
  4029d0:	9300      	str	r3, [sp, #0]
  4029d2:	f3c1 2307 	ubfx	r3, r1, #8, #8
  4029d6:	f3c1 4207 	ubfx	r2, r1, #16, #8
  4029da:	0e09      	lsrs	r1, r1, #24
  4029dc:	4855      	ldr	r0, [pc, #340]	; (402b34 <m2m_wifi_cb+0x290>)
  4029de:	47a0      	blx	r4
  4029e0:	484f      	ldr	r0, [pc, #316]	; (402b20 <m2m_wifi_cb+0x27c>)
  4029e2:	47a0      	blx	r4
			if (gpfAppWifiCb)
  4029e4:	4b50      	ldr	r3, [pc, #320]	; (402b28 <m2m_wifi_cb+0x284>)
  4029e6:	681b      	ldr	r3, [r3, #0]
  4029e8:	2b00      	cmp	r3, #0
  4029ea:	d08d      	beq.n	402908 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  4029ec:	2100      	movs	r1, #0
  4029ee:	2034      	movs	r0, #52	; 0x34
  4029f0:	4798      	blx	r3
  4029f2:	e789      	b.n	402908 <m2m_wifi_cb+0x64>
		gu8scanInProgress = 0;
  4029f4:	2300      	movs	r3, #0
  4029f6:	4a50      	ldr	r2, [pc, #320]	; (402b38 <m2m_wifi_cb+0x294>)
  4029f8:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  4029fa:	2204      	movs	r2, #4
  4029fc:	a903      	add	r1, sp, #12
  4029fe:	4628      	mov	r0, r5
  402a00:	4c48      	ldr	r4, [pc, #288]	; (402b24 <m2m_wifi_cb+0x280>)
  402a02:	47a0      	blx	r4
  402a04:	2800      	cmp	r0, #0
  402a06:	f47f af7f 	bne.w	402908 <m2m_wifi_cb+0x64>
			gu8ChNum = strState.u8NumofCh;
  402a0a:	f89d 200c 	ldrb.w	r2, [sp, #12]
  402a0e:	4b4b      	ldr	r3, [pc, #300]	; (402b3c <m2m_wifi_cb+0x298>)
  402a10:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  402a12:	4b45      	ldr	r3, [pc, #276]	; (402b28 <m2m_wifi_cb+0x284>)
  402a14:	681b      	ldr	r3, [r3, #0]
  402a16:	2b00      	cmp	r3, #0
  402a18:	f43f af76 	beq.w	402908 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  402a1c:	a903      	add	r1, sp, #12
  402a1e:	2011      	movs	r0, #17
  402a20:	4798      	blx	r3
  402a22:	e771      	b.n	402908 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  402a24:	2300      	movs	r3, #0
  402a26:	222c      	movs	r2, #44	; 0x2c
  402a28:	a903      	add	r1, sp, #12
  402a2a:	4628      	mov	r0, r5
  402a2c:	4c3d      	ldr	r4, [pc, #244]	; (402b24 <m2m_wifi_cb+0x280>)
  402a2e:	47a0      	blx	r4
  402a30:	2800      	cmp	r0, #0
  402a32:	f47f af69 	bne.w	402908 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402a36:	4b3c      	ldr	r3, [pc, #240]	; (402b28 <m2m_wifi_cb+0x284>)
  402a38:	681b      	ldr	r3, [r3, #0]
  402a3a:	2b00      	cmp	r3, #0
  402a3c:	f43f af64 	beq.w	402908 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  402a40:	a903      	add	r1, sp, #12
  402a42:	2013      	movs	r0, #19
  402a44:	4798      	blx	r3
  402a46:	e75f      	b.n	402908 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  402a48:	2300      	movs	r3, #0
  402a4a:	2204      	movs	r2, #4
  402a4c:	a91c      	add	r1, sp, #112	; 0x70
  402a4e:	4628      	mov	r0, r5
  402a50:	4c34      	ldr	r4, [pc, #208]	; (402b24 <m2m_wifi_cb+0x280>)
  402a52:	47a0      	blx	r4
  402a54:	2800      	cmp	r0, #0
  402a56:	f47f af57 	bne.w	402908 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402a5a:	4b33      	ldr	r3, [pc, #204]	; (402b28 <m2m_wifi_cb+0x284>)
  402a5c:	681b      	ldr	r3, [r3, #0]
  402a5e:	2b00      	cmp	r3, #0
  402a60:	f43f af52 	beq.w	402908 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  402a64:	a91c      	add	r1, sp, #112	; 0x70
  402a66:	2004      	movs	r0, #4
  402a68:	4798      	blx	r3
  402a6a:	e74d      	b.n	402908 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  402a6c:	2300      	movs	r3, #0
  402a6e:	2204      	movs	r2, #4
  402a70:	a91c      	add	r1, sp, #112	; 0x70
  402a72:	4628      	mov	r0, r5
  402a74:	4c2b      	ldr	r4, [pc, #172]	; (402b24 <m2m_wifi_cb+0x280>)
  402a76:	47a0      	blx	r4
  402a78:	2800      	cmp	r0, #0
  402a7a:	f47f af45 	bne.w	402908 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402a7e:	4b2a      	ldr	r3, [pc, #168]	; (402b28 <m2m_wifi_cb+0x284>)
  402a80:	681b      	ldr	r3, [r3, #0]
  402a82:	2b00      	cmp	r3, #0
  402a84:	f43f af40 	beq.w	402908 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  402a88:	a91c      	add	r1, sp, #112	; 0x70
  402a8a:	2065      	movs	r0, #101	; 0x65
  402a8c:	4798      	blx	r3
  402a8e:	e73b      	b.n	402908 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  402a90:	2301      	movs	r3, #1
  402a92:	2264      	movs	r2, #100	; 0x64
  402a94:	a903      	add	r1, sp, #12
  402a96:	4628      	mov	r0, r5
  402a98:	4c22      	ldr	r4, [pc, #136]	; (402b24 <m2m_wifi_cb+0x280>)
  402a9a:	47a0      	blx	r4
  402a9c:	2800      	cmp	r0, #0
  402a9e:	f47f af33 	bne.w	402908 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  402aa2:	4b21      	ldr	r3, [pc, #132]	; (402b28 <m2m_wifi_cb+0x284>)
  402aa4:	681b      	ldr	r3, [r3, #0]
  402aa6:	2b00      	cmp	r3, #0
  402aa8:	f43f af2e 	beq.w	402908 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  402aac:	a903      	add	r1, sp, #12
  402aae:	2009      	movs	r0, #9
  402ab0:	4798      	blx	r3
  402ab2:	e729      	b.n	402908 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  402ab4:	2301      	movs	r3, #1
  402ab6:	2204      	movs	r2, #4
  402ab8:	a903      	add	r1, sp, #12
  402aba:	4628      	mov	r0, r5
  402abc:	4c19      	ldr	r4, [pc, #100]	; (402b24 <m2m_wifi_cb+0x280>)
  402abe:	47a0      	blx	r4
  402ac0:	2800      	cmp	r0, #0
  402ac2:	f47f af21 	bne.w	402908 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  402ac6:	4b18      	ldr	r3, [pc, #96]	; (402b28 <m2m_wifi_cb+0x284>)
  402ac8:	681b      	ldr	r3, [r3, #0]
  402aca:	2b00      	cmp	r3, #0
  402acc:	f43f af1c 	beq.w	402908 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  402ad0:	a903      	add	r1, sp, #12
  402ad2:	202a      	movs	r0, #42	; 0x2a
  402ad4:	4798      	blx	r3
  402ad6:	e717      	b.n	402908 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  402ad8:	2300      	movs	r3, #0
  402ada:	2208      	movs	r2, #8
  402adc:	a903      	add	r1, sp, #12
  402ade:	4628      	mov	r0, r5
  402ae0:	4c10      	ldr	r4, [pc, #64]	; (402b24 <m2m_wifi_cb+0x280>)
  402ae2:	47a0      	blx	r4
  402ae4:	2800      	cmp	r0, #0
  402ae6:	f47f af0f 	bne.w	402908 <m2m_wifi_cb+0x64>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  402aea:	2301      	movs	r3, #1
  402aec:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  402af0:	9903      	ldr	r1, [sp, #12]
  402af2:	f105 0008 	add.w	r0, r5, #8
  402af6:	47a0      	blx	r4
  402af8:	2800      	cmp	r0, #0
  402afa:	f47f af05 	bne.w	402908 <m2m_wifi_cb+0x64>
				if(gpfAppWifiCb)
  402afe:	4b0a      	ldr	r3, [pc, #40]	; (402b28 <m2m_wifi_cb+0x284>)
  402b00:	681b      	ldr	r3, [r3, #0]
  402b02:	2b00      	cmp	r3, #0
  402b04:	f43f af00 	beq.w	402908 <m2m_wifi_cb+0x64>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  402b08:	a903      	add	r1, sp, #12
  402b0a:	2020      	movs	r0, #32
  402b0c:	4798      	blx	r3
  402b0e:	e6fb      	b.n	402908 <m2m_wifi_cb+0x64>
  402b10:	00408e90 	.word	0x00408e90
  402b14:	00408bec 	.word	0x00408bec
  402b18:	00405c79 	.word	0x00405c79
  402b1c:	00408eec 	.word	0x00408eec
  402b20:	00408c18 	.word	0x00408c18
  402b24:	004026b1 	.word	0x004026b1
  402b28:	2040c34c 	.word	0x2040c34c
  402b2c:	0040205d 	.word	0x0040205d
  402b30:	00408ec0 	.word	0x00408ec0
  402b34:	00408ecc 	.word	0x00408ecc
  402b38:	2040c351 	.word	0x2040c351
  402b3c:	2040c350 	.word	0x2040c350

00402b40 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  402b40:	b5f0      	push	{r4, r5, r6, r7, lr}
  402b42:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  402b44:	2301      	movs	r3, #1
  402b46:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  402b4a:	2800      	cmp	r0, #0
  402b4c:	d050      	beq.n	402bf0 <m2m_wifi_init+0xb0>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  402b4e:	6802      	ldr	r2, [r0, #0]
  402b50:	4b29      	ldr	r3, [pc, #164]	; (402bf8 <m2m_wifi_init+0xb8>)
  402b52:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  402b54:	2200      	movs	r2, #0
  402b56:	4b29      	ldr	r3, [pc, #164]	; (402bfc <m2m_wifi_init+0xbc>)
  402b58:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  402b5a:	f10d 0007 	add.w	r0, sp, #7
  402b5e:	4b28      	ldr	r3, [pc, #160]	; (402c00 <m2m_wifi_init+0xc0>)
  402b60:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  402b62:	4604      	mov	r4, r0
  402b64:	b110      	cbz	r0, 402b6c <m2m_wifi_init+0x2c>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  402b66:	4620      	mov	r0, r4
  402b68:	b00b      	add	sp, #44	; 0x2c
  402b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
  402b6c:	4b25      	ldr	r3, [pc, #148]	; (402c04 <m2m_wifi_init+0xc4>)
  402b6e:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  402b70:	4604      	mov	r4, r0
  402b72:	2800      	cmp	r0, #0
  402b74:	d138      	bne.n	402be8 <m2m_wifi_init+0xa8>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  402b76:	4924      	ldr	r1, [pc, #144]	; (402c08 <m2m_wifi_init+0xc8>)
  402b78:	2001      	movs	r0, #1
  402b7a:	4b24      	ldr	r3, [pc, #144]	; (402c0c <m2m_wifi_init+0xcc>)
  402b7c:	4798      	blx	r3
	ret = nm_get_firmware_info(&strtmp);
  402b7e:	a802      	add	r0, sp, #8
  402b80:	4b23      	ldr	r3, [pc, #140]	; (402c10 <m2m_wifi_init+0xd0>)
  402b82:	4798      	blx	r3
  402b84:	4604      	mov	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  402b86:	4f23      	ldr	r7, [pc, #140]	; (402c14 <m2m_wifi_init+0xd4>)
  402b88:	4638      	mov	r0, r7
  402b8a:	4d23      	ldr	r5, [pc, #140]	; (402c18 <m2m_wifi_init+0xd8>)
  402b8c:	47a8      	blx	r5
  402b8e:	f89d 300e 	ldrb.w	r3, [sp, #14]
  402b92:	f89d 200d 	ldrb.w	r2, [sp, #13]
  402b96:	f89d 100c 	ldrb.w	r1, [sp, #12]
  402b9a:	4820      	ldr	r0, [pc, #128]	; (402c1c <m2m_wifi_init+0xdc>)
  402b9c:	47a8      	blx	r5
  402b9e:	4e20      	ldr	r6, [pc, #128]	; (402c20 <m2m_wifi_init+0xe0>)
  402ba0:	4630      	mov	r0, r6
  402ba2:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  402ba4:	4638      	mov	r0, r7
  402ba6:	47a8      	blx	r5
  402ba8:	f89d 3011 	ldrb.w	r3, [sp, #17]
  402bac:	f89d 2010 	ldrb.w	r2, [sp, #16]
  402bb0:	f89d 100f 	ldrb.w	r1, [sp, #15]
  402bb4:	481b      	ldr	r0, [pc, #108]	; (402c24 <m2m_wifi_init+0xe4>)
  402bb6:	47a8      	blx	r5
  402bb8:	4630      	mov	r0, r6
  402bba:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  402bbc:	4638      	mov	r0, r7
  402bbe:	47a8      	blx	r5
  402bc0:	2300      	movs	r3, #0
  402bc2:	2203      	movs	r2, #3
  402bc4:	2113      	movs	r1, #19
  402bc6:	4818      	ldr	r0, [pc, #96]	; (402c28 <m2m_wifi_init+0xe8>)
  402bc8:	47a8      	blx	r5
  402bca:	4630      	mov	r0, r6
  402bcc:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  402bce:	f114 0f0d 	cmn.w	r4, #13
  402bd2:	d1c8      	bne.n	402b66 <m2m_wifi_init+0x26>
		M2M_ERR("Mismatch Firmawre Version\n");
  402bd4:	f240 12d5 	movw	r2, #469	; 0x1d5
  402bd8:	4914      	ldr	r1, [pc, #80]	; (402c2c <m2m_wifi_init+0xec>)
  402bda:	4815      	ldr	r0, [pc, #84]	; (402c30 <m2m_wifi_init+0xf0>)
  402bdc:	47a8      	blx	r5
  402bde:	4815      	ldr	r0, [pc, #84]	; (402c34 <m2m_wifi_init+0xf4>)
  402be0:	47a8      	blx	r5
  402be2:	4630      	mov	r0, r6
  402be4:	47a8      	blx	r5
  402be6:	e7be      	b.n	402b66 <m2m_wifi_init+0x26>
	nm_drv_deinit(NULL);
  402be8:	2000      	movs	r0, #0
  402bea:	4b13      	ldr	r3, [pc, #76]	; (402c38 <m2m_wifi_init+0xf8>)
  402bec:	4798      	blx	r3
  402bee:	e7ba      	b.n	402b66 <m2m_wifi_init+0x26>
		ret = M2M_ERR_FAIL;
  402bf0:	f06f 040b 	mvn.w	r4, #11
  402bf4:	e7b7      	b.n	402b66 <m2m_wifi_init+0x26>
  402bf6:	bf00      	nop
  402bf8:	2040c34c 	.word	0x2040c34c
  402bfc:	2040c351 	.word	0x2040c351
  402c00:	00403505 	.word	0x00403505
  402c04:	00402855 	.word	0x00402855
  402c08:	004028a5 	.word	0x004028a5
  402c0c:	004027c5 	.word	0x004027c5
  402c10:	00403455 	.word	0x00403455
  402c14:	00408ec0 	.word	0x00408ec0
  402c18:	00405c79 	.word	0x00405c79
  402c1c:	00408fac 	.word	0x00408fac
  402c20:	00408c18 	.word	0x00408c18
  402c24:	00408fc8 	.word	0x00408fc8
  402c28:	00408fe4 	.word	0x00408fe4
  402c2c:	00408e9c 	.word	0x00408e9c
  402c30:	00408bec 	.word	0x00408bec
  402c34:	00409000 	.word	0x00409000
  402c38:	004035d1 	.word	0x004035d1

00402c3c <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  402c3c:	b508      	push	{r3, lr}
	return hif_handle_isr();
  402c3e:	4b01      	ldr	r3, [pc, #4]	; (402c44 <m2m_wifi_handle_events+0x8>)
  402c40:	4798      	blx	r3
}
  402c42:	bd08      	pop	{r3, pc}
  402c44:	004023a1 	.word	0x004023a1

00402c48 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  402c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402c4c:	b0a0      	sub	sp, #128	; 0x80
  402c4e:	4680      	mov	r8, r0
  402c50:	460d      	mov	r5, r1
  402c52:	4614      	mov	r4, r2
  402c54:	461e      	mov	r6, r3
  402c56:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  402c5a:	2a01      	cmp	r2, #1
  402c5c:	d003      	beq.n	402c66 <m2m_wifi_connect_sc+0x1e>
	{
		if(pvAuthInfo == NULL)
  402c5e:	2b00      	cmp	r3, #0
  402c60:	d037      	beq.n	402cd2 <m2m_wifi_connect_sc+0x8a>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  402c62:	2a02      	cmp	r2, #2
  402c64:	d042      	beq.n	402cec <m2m_wifi_connect_sc+0xa4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  402c66:	1e6b      	subs	r3, r5, #1
  402c68:	b2db      	uxtb	r3, r3
  402c6a:	2b1f      	cmp	r3, #31
  402c6c:	d875      	bhi.n	402d5a <m2m_wifi_connect_sc+0x112>
		goto ERR1;
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  402c6e:	2fff      	cmp	r7, #255	; 0xff
  402c70:	d001      	beq.n	402c76 <m2m_wifi_connect_sc+0x2e>
  402c72:	2f0d      	cmp	r7, #13
  402c74:	d87e      	bhi.n	402d74 <m2m_wifi_connect_sc+0x12c>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  402c76:	462a      	mov	r2, r5
  402c78:	4641      	mov	r1, r8
  402c7a:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  402c7e:	4b77      	ldr	r3, [pc, #476]	; (402e5c <m2m_wifi_connect_sc+0x214>)
  402c80:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  402c82:	ab20      	add	r3, sp, #128	; 0x80
  402c84:	441d      	add	r5, r3
  402c86:	2300      	movs	r3, #0
  402c88:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  402c8c:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  402c90:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  402c94:	3300      	adds	r3, #0
  402c96:	bf18      	it	ne
  402c98:	2301      	movne	r3, #1
  402c9a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  402c9e:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  402ca2:	2c03      	cmp	r4, #3
  402ca4:	d073      	beq.n	402d8e <m2m_wifi_connect_sc+0x146>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  402ca6:	2c02      	cmp	r4, #2
  402ca8:	f000 80aa 	beq.w	402e00 <m2m_wifi_connect_sc+0x1b8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  402cac:	2c04      	cmp	r4, #4
  402cae:	f000 80c1 	beq.w	402e34 <m2m_wifi_connect_sc+0x1ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  402cb2:	2c01      	cmp	r4, #1
  402cb4:	f040 80c4 	bne.w	402e40 <m2m_wifi_connect_sc+0x1f8>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  402cb8:	2300      	movs	r3, #0
  402cba:	9302      	str	r3, [sp, #8]
  402cbc:	9301      	str	r3, [sp, #4]
  402cbe:	9300      	str	r3, [sp, #0]
  402cc0:	236c      	movs	r3, #108	; 0x6c
  402cc2:	aa05      	add	r2, sp, #20
  402cc4:	2128      	movs	r1, #40	; 0x28
  402cc6:	2001      	movs	r0, #1
  402cc8:	4c65      	ldr	r4, [pc, #404]	; (402e60 <m2m_wifi_connect_sc+0x218>)
  402cca:	47a0      	blx	r4

ERR1:
	return ret;
}
  402ccc:	b020      	add	sp, #128	; 0x80
  402cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			M2M_ERR("Key is not valid\n");
  402cd2:	f240 2203 	movw	r2, #515	; 0x203
  402cd6:	4963      	ldr	r1, [pc, #396]	; (402e64 <m2m_wifi_connect_sc+0x21c>)
  402cd8:	4863      	ldr	r0, [pc, #396]	; (402e68 <m2m_wifi_connect_sc+0x220>)
  402cda:	4c64      	ldr	r4, [pc, #400]	; (402e6c <m2m_wifi_connect_sc+0x224>)
  402cdc:	47a0      	blx	r4
  402cde:	4864      	ldr	r0, [pc, #400]	; (402e70 <m2m_wifi_connect_sc+0x228>)
  402ce0:	47a0      	blx	r4
  402ce2:	4864      	ldr	r0, [pc, #400]	; (402e74 <m2m_wifi_connect_sc+0x22c>)
  402ce4:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402ce6:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  402cea:	e7ef      	b.n	402ccc <m2m_wifi_connect_sc+0x84>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  402cec:	4618      	mov	r0, r3
  402cee:	4b62      	ldr	r3, [pc, #392]	; (402e78 <m2m_wifi_connect_sc+0x230>)
  402cf0:	4798      	blx	r3
  402cf2:	2840      	cmp	r0, #64	; 0x40
  402cf4:	d1b7      	bne.n	402c66 <m2m_wifi_connect_sc+0x1e>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  402cf6:	7833      	ldrb	r3, [r6, #0]
  402cf8:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  402cfc:	b2d2      	uxtb	r2, r2
  402cfe:	2a06      	cmp	r2, #6
  402d00:	d91e      	bls.n	402d40 <m2m_wifi_connect_sc+0xf8>
  402d02:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  402d06:	b2d2      	uxtb	r2, r2
  402d08:	2a36      	cmp	r2, #54	; 0x36
  402d0a:	d819      	bhi.n	402d40 <m2m_wifi_connect_sc+0xf8>
  402d0c:	3b47      	subs	r3, #71	; 0x47
  402d0e:	b2db      	uxtb	r3, r3
  402d10:	2b19      	cmp	r3, #25
  402d12:	d915      	bls.n	402d40 <m2m_wifi_connect_sc+0xf8>
  402d14:	4631      	mov	r1, r6
  402d16:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  402d1a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  402d1e:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  402d22:	b2d2      	uxtb	r2, r2
  402d24:	2a06      	cmp	r2, #6
  402d26:	d90b      	bls.n	402d40 <m2m_wifi_connect_sc+0xf8>
  402d28:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  402d2c:	b2d2      	uxtb	r2, r2
  402d2e:	2a36      	cmp	r2, #54	; 0x36
  402d30:	d806      	bhi.n	402d40 <m2m_wifi_connect_sc+0xf8>
  402d32:	3b47      	subs	r3, #71	; 0x47
  402d34:	b2db      	uxtb	r3, r3
  402d36:	2b19      	cmp	r3, #25
  402d38:	d902      	bls.n	402d40 <m2m_wifi_connect_sc+0xf8>
			while(i < (M2M_MAX_PSK_LEN-1))
  402d3a:	4288      	cmp	r0, r1
  402d3c:	d1ed      	bne.n	402d1a <m2m_wifi_connect_sc+0xd2>
  402d3e:	e792      	b.n	402c66 <m2m_wifi_connect_sc+0x1e>
					M2M_ERR("Invalid Key\n");
  402d40:	f240 220f 	movw	r2, #527	; 0x20f
  402d44:	4947      	ldr	r1, [pc, #284]	; (402e64 <m2m_wifi_connect_sc+0x21c>)
  402d46:	4848      	ldr	r0, [pc, #288]	; (402e68 <m2m_wifi_connect_sc+0x220>)
  402d48:	4c48      	ldr	r4, [pc, #288]	; (402e6c <m2m_wifi_connect_sc+0x224>)
  402d4a:	47a0      	blx	r4
  402d4c:	484b      	ldr	r0, [pc, #300]	; (402e7c <m2m_wifi_connect_sc+0x234>)
  402d4e:	47a0      	blx	r4
  402d50:	4848      	ldr	r0, [pc, #288]	; (402e74 <m2m_wifi_connect_sc+0x22c>)
  402d52:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  402d54:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  402d58:	e7b8      	b.n	402ccc <m2m_wifi_connect_sc+0x84>
		M2M_ERR("SSID LEN INVALID\n");
  402d5a:	f240 2219 	movw	r2, #537	; 0x219
  402d5e:	4941      	ldr	r1, [pc, #260]	; (402e64 <m2m_wifi_connect_sc+0x21c>)
  402d60:	4841      	ldr	r0, [pc, #260]	; (402e68 <m2m_wifi_connect_sc+0x220>)
  402d62:	4c42      	ldr	r4, [pc, #264]	; (402e6c <m2m_wifi_connect_sc+0x224>)
  402d64:	47a0      	blx	r4
  402d66:	4846      	ldr	r0, [pc, #280]	; (402e80 <m2m_wifi_connect_sc+0x238>)
  402d68:	47a0      	blx	r4
  402d6a:	4842      	ldr	r0, [pc, #264]	; (402e74 <m2m_wifi_connect_sc+0x22c>)
  402d6c:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  402d6e:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  402d72:	e7ab      	b.n	402ccc <m2m_wifi_connect_sc+0x84>
			M2M_ERR("CH INVALID\n");
  402d74:	f240 2222 	movw	r2, #546	; 0x222
  402d78:	493a      	ldr	r1, [pc, #232]	; (402e64 <m2m_wifi_connect_sc+0x21c>)
  402d7a:	483b      	ldr	r0, [pc, #236]	; (402e68 <m2m_wifi_connect_sc+0x220>)
  402d7c:	4c3b      	ldr	r4, [pc, #236]	; (402e6c <m2m_wifi_connect_sc+0x224>)
  402d7e:	47a0      	blx	r4
  402d80:	4840      	ldr	r0, [pc, #256]	; (402e84 <m2m_wifi_connect_sc+0x23c>)
  402d82:	47a0      	blx	r4
  402d84:	483b      	ldr	r0, [pc, #236]	; (402e74 <m2m_wifi_connect_sc+0x22c>)
  402d86:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402d88:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  402d8c:	e79e      	b.n	402ccc <m2m_wifi_connect_sc+0x84>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  402d8e:	7833      	ldrb	r3, [r6, #0]
  402d90:	3b01      	subs	r3, #1
  402d92:	b2db      	uxtb	r3, r3
  402d94:	f88d 3014 	strb.w	r3, [sp, #20]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  402d98:	2b03      	cmp	r3, #3
  402d9a:	d813      	bhi.n	402dc4 <m2m_wifi_connect_sc+0x17c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  402d9c:	7872      	ldrb	r2, [r6, #1]
  402d9e:	1e53      	subs	r3, r2, #1
  402da0:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  402da4:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  402da8:	2b0b      	cmp	r3, #11
  402daa:	d11a      	bne.n	402de2 <m2m_wifi_connect_sc+0x19a>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  402dac:	1cb1      	adds	r1, r6, #2
  402dae:	f10d 0016 	add.w	r0, sp, #22
  402db2:	4b2a      	ldr	r3, [pc, #168]	; (402e5c <m2m_wifi_connect_sc+0x214>)
  402db4:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  402db6:	7873      	ldrb	r3, [r6, #1]
  402db8:	aa20      	add	r2, sp, #128	; 0x80
  402dba:	4413      	add	r3, r2
  402dbc:	2200      	movs	r2, #0
  402dbe:	f803 2c6a 	strb.w	r2, [r3, #-106]
  402dc2:	e779      	b.n	402cb8 <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  402dc4:	f240 2239 	movw	r2, #569	; 0x239
  402dc8:	4926      	ldr	r1, [pc, #152]	; (402e64 <m2m_wifi_connect_sc+0x21c>)
  402dca:	4827      	ldr	r0, [pc, #156]	; (402e68 <m2m_wifi_connect_sc+0x220>)
  402dcc:	4c27      	ldr	r4, [pc, #156]	; (402e6c <m2m_wifi_connect_sc+0x224>)
  402dce:	47a0      	blx	r4
  402dd0:	f89d 1014 	ldrb.w	r1, [sp, #20]
  402dd4:	482c      	ldr	r0, [pc, #176]	; (402e88 <m2m_wifi_connect_sc+0x240>)
  402dd6:	47a0      	blx	r4
  402dd8:	4826      	ldr	r0, [pc, #152]	; (402e74 <m2m_wifi_connect_sc+0x22c>)
  402dda:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402ddc:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  402de0:	e774      	b.n	402ccc <m2m_wifi_connect_sc+0x84>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  402de2:	f44f 7210 	mov.w	r2, #576	; 0x240
  402de6:	491f      	ldr	r1, [pc, #124]	; (402e64 <m2m_wifi_connect_sc+0x21c>)
  402de8:	481f      	ldr	r0, [pc, #124]	; (402e68 <m2m_wifi_connect_sc+0x220>)
  402dea:	4c20      	ldr	r4, [pc, #128]	; (402e6c <m2m_wifi_connect_sc+0x224>)
  402dec:	47a0      	blx	r4
  402dee:	f89d 1015 	ldrb.w	r1, [sp, #21]
  402df2:	4826      	ldr	r0, [pc, #152]	; (402e8c <m2m_wifi_connect_sc+0x244>)
  402df4:	47a0      	blx	r4
  402df6:	481f      	ldr	r0, [pc, #124]	; (402e74 <m2m_wifi_connect_sc+0x22c>)
  402df8:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402dfa:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  402dfe:	e765      	b.n	402ccc <m2m_wifi_connect_sc+0x84>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  402e00:	4630      	mov	r0, r6
  402e02:	4b1d      	ldr	r3, [pc, #116]	; (402e78 <m2m_wifi_connect_sc+0x230>)
  402e04:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  402e06:	1e43      	subs	r3, r0, #1
  402e08:	b29b      	uxth	r3, r3
  402e0a:	2b3f      	cmp	r3, #63	; 0x3f
  402e0c:	d805      	bhi.n	402e1a <m2m_wifi_connect_sc+0x1d2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  402e0e:	1c42      	adds	r2, r0, #1
  402e10:	4631      	mov	r1, r6
  402e12:	a805      	add	r0, sp, #20
  402e14:	4b11      	ldr	r3, [pc, #68]	; (402e5c <m2m_wifi_connect_sc+0x214>)
  402e16:	4798      	blx	r3
  402e18:	e74e      	b.n	402cb8 <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Incorrect PSK key length\n");
  402e1a:	f240 224f 	movw	r2, #591	; 0x24f
  402e1e:	4911      	ldr	r1, [pc, #68]	; (402e64 <m2m_wifi_connect_sc+0x21c>)
  402e20:	4811      	ldr	r0, [pc, #68]	; (402e68 <m2m_wifi_connect_sc+0x220>)
  402e22:	4c12      	ldr	r4, [pc, #72]	; (402e6c <m2m_wifi_connect_sc+0x224>)
  402e24:	47a0      	blx	r4
  402e26:	481a      	ldr	r0, [pc, #104]	; (402e90 <m2m_wifi_connect_sc+0x248>)
  402e28:	47a0      	blx	r4
  402e2a:	4812      	ldr	r0, [pc, #72]	; (402e74 <m2m_wifi_connect_sc+0x22c>)
  402e2c:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402e2e:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  402e32:	e74b      	b.n	402ccc <m2m_wifi_connect_sc+0x84>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  402e34:	223e      	movs	r2, #62	; 0x3e
  402e36:	4631      	mov	r1, r6
  402e38:	a805      	add	r0, sp, #20
  402e3a:	4b08      	ldr	r3, [pc, #32]	; (402e5c <m2m_wifi_connect_sc+0x214>)
  402e3c:	4798      	blx	r3
  402e3e:	e73b      	b.n	402cb8 <m2m_wifi_connect_sc+0x70>
		M2M_ERR("undefined sec type\n");
  402e40:	f240 225f 	movw	r2, #607	; 0x25f
  402e44:	4907      	ldr	r1, [pc, #28]	; (402e64 <m2m_wifi_connect_sc+0x21c>)
  402e46:	4808      	ldr	r0, [pc, #32]	; (402e68 <m2m_wifi_connect_sc+0x220>)
  402e48:	4c08      	ldr	r4, [pc, #32]	; (402e6c <m2m_wifi_connect_sc+0x224>)
  402e4a:	47a0      	blx	r4
  402e4c:	4811      	ldr	r0, [pc, #68]	; (402e94 <m2m_wifi_connect_sc+0x24c>)
  402e4e:	47a0      	blx	r4
  402e50:	4808      	ldr	r0, [pc, #32]	; (402e74 <m2m_wifi_connect_sc+0x22c>)
  402e52:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  402e54:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  402e58:	e738      	b.n	402ccc <m2m_wifi_connect_sc+0x84>
  402e5a:	bf00      	nop
  402e5c:	00402049 	.word	0x00402049
  402e60:	004021c1 	.word	0x004021c1
  402e64:	00408eac 	.word	0x00408eac
  402e68:	00408bec 	.word	0x00408bec
  402e6c:	00405c79 	.word	0x00405c79
  402e70:	00408f00 	.word	0x00408f00
  402e74:	00408c18 	.word	0x00408c18
  402e78:	0040206b 	.word	0x0040206b
  402e7c:	00408f14 	.word	0x00408f14
  402e80:	00408f24 	.word	0x00408f24
  402e84:	00408f38 	.word	0x00408f38
  402e88:	00408f44 	.word	0x00408f44
  402e8c:	00408f60 	.word	0x00408f60
  402e90:	00408f7c 	.word	0x00408f7c
  402e94:	00408f98 	.word	0x00408f98

00402e98 <m2m_wifi_connect>:
{
  402e98:	b510      	push	{r4, lr}
  402e9a:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  402e9c:	2400      	movs	r4, #0
  402e9e:	9401      	str	r4, [sp, #4]
  402ea0:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  402ea4:	9400      	str	r4, [sp, #0]
  402ea6:	4c02      	ldr	r4, [pc, #8]	; (402eb0 <m2m_wifi_connect+0x18>)
  402ea8:	47a0      	blx	r4
}
  402eaa:	b002      	add	sp, #8
  402eac:	bd10      	pop	{r4, pc}
  402eae:	bf00      	nop
  402eb0:	00402c49 	.word	0x00402c49

00402eb4 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  402eb4:	2000      	movs	r0, #0
  402eb6:	4770      	bx	lr

00402eb8 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  402eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  402eba:	b083      	sub	sp, #12
  402ebc:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  402ebe:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  402ec2:	4e0a      	ldr	r6, [pc, #40]	; (402eec <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  402ec4:	4f0a      	ldr	r7, [pc, #40]	; (402ef0 <chip_apply_conf+0x38>)
		nm_write_reg(rNMI_GP_REG_1, val32);
  402ec6:	4621      	mov	r1, r4
  402ec8:	4628      	mov	r0, r5
  402eca:	47b0      	blx	r6
		if(val32 != 0) {		
  402ecc:	b154      	cbz	r4, 402ee4 <chip_apply_conf+0x2c>
			uint32 reg = 0;
  402ece:	a902      	add	r1, sp, #8
  402ed0:	2300      	movs	r3, #0
  402ed2:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  402ed6:	4628      	mov	r0, r5
  402ed8:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  402eda:	2800      	cmp	r0, #0
  402edc:	d1f3      	bne.n	402ec6 <chip_apply_conf+0xe>
				if(reg == val32)
  402ede:	9b01      	ldr	r3, [sp, #4]
  402ee0:	429c      	cmp	r4, r3
  402ee2:	d1f0      	bne.n	402ec6 <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  402ee4:	2000      	movs	r0, #0
  402ee6:	b003      	add	sp, #12
  402ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402eea:	bf00      	nop
  402eec:	00403391 	.word	0x00403391
  402ef0:	00403385 	.word	0x00403385

00402ef4 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  402ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402ef8:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  402efa:	2001      	movs	r0, #1
  402efc:	4b3c      	ldr	r3, [pc, #240]	; (402ff0 <nm_clkless_wake+0xfc>)
  402efe:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  402f00:	a901      	add	r1, sp, #4
  402f02:	2001      	movs	r0, #1
  402f04:	4b3b      	ldr	r3, [pc, #236]	; (402ff4 <nm_clkless_wake+0x100>)
  402f06:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  402f08:	4682      	mov	sl, r0
  402f0a:	b938      	cbnz	r0, 402f1c <nm_clkless_wake+0x28>
  402f0c:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  402f0e:	f04f 0801 	mov.w	r8, #1
  402f12:	f8df 9108 	ldr.w	r9, [pc, #264]	; 40301c <nm_clkless_wake+0x128>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  402f16:	4d36      	ldr	r5, [pc, #216]	; (402ff0 <nm_clkless_wake+0xfc>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  402f18:	4f37      	ldr	r7, [pc, #220]	; (402ff8 <nm_clkless_wake+0x104>)
  402f1a:	e020      	b.n	402f5e <nm_clkless_wake+0x6a>
		M2M_ERR("Bus error (1). Wake up failed\n");
  402f1c:	2272      	movs	r2, #114	; 0x72
  402f1e:	4937      	ldr	r1, [pc, #220]	; (402ffc <nm_clkless_wake+0x108>)
  402f20:	4837      	ldr	r0, [pc, #220]	; (403000 <nm_clkless_wake+0x10c>)
  402f22:	4c38      	ldr	r4, [pc, #224]	; (403004 <nm_clkless_wake+0x110>)
  402f24:	47a0      	blx	r4
  402f26:	4838      	ldr	r0, [pc, #224]	; (403008 <nm_clkless_wake+0x114>)
  402f28:	47a0      	blx	r4
  402f2a:	4838      	ldr	r0, [pc, #224]	; (40300c <nm_clkless_wake+0x118>)
  402f2c:	47a0      	blx	r4
		goto _WAKE_EXIT;
  402f2e:	e009      	b.n	402f44 <nm_clkless_wake+0x50>
					M2M_ERR("Bus error (2). Wake up failed\n");
  402f30:	2296      	movs	r2, #150	; 0x96
  402f32:	4932      	ldr	r1, [pc, #200]	; (402ffc <nm_clkless_wake+0x108>)
  402f34:	4832      	ldr	r0, [pc, #200]	; (403000 <nm_clkless_wake+0x10c>)
  402f36:	4c33      	ldr	r4, [pc, #204]	; (403004 <nm_clkless_wake+0x110>)
  402f38:	47a0      	blx	r4
  402f3a:	4835      	ldr	r0, [pc, #212]	; (403010 <nm_clkless_wake+0x11c>)
  402f3c:	47a0      	blx	r4
  402f3e:	4833      	ldr	r0, [pc, #204]	; (40300c <nm_clkless_wake+0x118>)
  402f40:	47a0      	blx	r4
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  402f42:	46b2      	mov	sl, r6
		}
	} while((clk_status_reg & 0x4) == 0);

_WAKE_EXIT:
	return ret;
}
  402f44:	4650      	mov	r0, sl
  402f46:	b003      	add	sp, #12
  402f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nm_write_reg(0x1, reg | (1 << 1));
  402f4c:	9901      	ldr	r1, [sp, #4]
  402f4e:	f041 0102 	orr.w	r1, r1, #2
  402f52:	4640      	mov	r0, r8
  402f54:	47c8      	blx	r9
	} while((clk_status_reg & 0x4) == 0);
  402f56:	9b00      	ldr	r3, [sp, #0]
  402f58:	f013 0f04 	tst.w	r3, #4
  402f5c:	d1f2      	bne.n	402f44 <nm_clkless_wake+0x50>
		nm_write_reg(0x1, reg | (1 << 1));
  402f5e:	9901      	ldr	r1, [sp, #4]
  402f60:	f041 0102 	orr.w	r1, r1, #2
  402f64:	4640      	mov	r0, r8
  402f66:	47c8      	blx	r9
		nm_bsp_sleep(1);
  402f68:	4640      	mov	r0, r8
  402f6a:	47a8      	blx	r5
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  402f6c:	4669      	mov	r1, sp
  402f6e:	4b29      	ldr	r3, [pc, #164]	; (403014 <nm_clkless_wake+0x120>)
  402f70:	6818      	ldr	r0, [r3, #0]
  402f72:	4b20      	ldr	r3, [pc, #128]	; (402ff4 <nm_clkless_wake+0x100>)
  402f74:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  402f76:	b908      	cbnz	r0, 402f7c <nm_clkless_wake+0x88>
  402f78:	9b00      	ldr	r3, [sp, #0]
  402f7a:	b9bb      	cbnz	r3, 402fac <nm_clkless_wake+0xb8>
			clk_status_reg_adr = 0xe;
  402f7c:	4e25      	ldr	r6, [pc, #148]	; (403014 <nm_clkless_wake+0x120>)
  402f7e:	230e      	movs	r3, #14
  402f80:	6033      	str	r3, [r6, #0]
			nm_bsp_sleep(1);
  402f82:	4640      	mov	r0, r8
  402f84:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  402f86:	4669      	mov	r1, sp
  402f88:	6830      	ldr	r0, [r6, #0]
  402f8a:	4b1a      	ldr	r3, [pc, #104]	; (402ff4 <nm_clkless_wake+0x100>)
  402f8c:	4798      	blx	r3
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  402f8e:	b908      	cbnz	r0, 402f94 <nm_clkless_wake+0xa0>
  402f90:	9b00      	ldr	r3, [sp, #0]
  402f92:	b95b      	cbnz	r3, 402fac <nm_clkless_wake+0xb8>
				clk_status_reg_adr = 0x13;
  402f94:	4e1f      	ldr	r6, [pc, #124]	; (403014 <nm_clkless_wake+0x120>)
  402f96:	2313      	movs	r3, #19
  402f98:	6033      	str	r3, [r6, #0]
				nm_bsp_sleep(1);
  402f9a:	4640      	mov	r0, r8
  402f9c:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  402f9e:	4669      	mov	r1, sp
  402fa0:	6830      	ldr	r0, [r6, #0]
  402fa2:	4b14      	ldr	r3, [pc, #80]	; (402ff4 <nm_clkless_wake+0x100>)
  402fa4:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  402fa6:	4606      	mov	r6, r0
  402fa8:	2800      	cmp	r0, #0
  402faa:	d1c1      	bne.n	402f30 <nm_clkless_wake+0x3c>
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  402fac:	4e19      	ldr	r6, [pc, #100]	; (403014 <nm_clkless_wake+0x120>)
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  402fae:	9b00      	ldr	r3, [sp, #0]
  402fb0:	f013 0f04 	tst.w	r3, #4
  402fb4:	d1c6      	bne.n	402f44 <nm_clkless_wake+0x50>
  402fb6:	3401      	adds	r4, #1
  402fb8:	fba7 2304 	umull	r2, r3, r7, r4
  402fbc:	085b      	lsrs	r3, r3, #1
  402fbe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  402fc2:	429c      	cmp	r4, r3
  402fc4:	d1c2      	bne.n	402f4c <nm_clkless_wake+0x58>
			nm_bsp_sleep(2);
  402fc6:	2002      	movs	r0, #2
  402fc8:	47a8      	blx	r5
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  402fca:	4669      	mov	r1, sp
  402fcc:	6830      	ldr	r0, [r6, #0]
  402fce:	4b09      	ldr	r3, [pc, #36]	; (402ff4 <nm_clkless_wake+0x100>)
  402fd0:	4798      	blx	r3
			if((clk_status_reg & 0x4) == 0)
  402fd2:	9b00      	ldr	r3, [sp, #0]
  402fd4:	f013 0f04 	tst.w	r3, #4
  402fd8:	d1e9      	bne.n	402fae <nm_clkless_wake+0xba>
				M2M_ERR("clocks still OFF. Wake up failed\n");
  402fda:	22aa      	movs	r2, #170	; 0xaa
  402fdc:	4907      	ldr	r1, [pc, #28]	; (402ffc <nm_clkless_wake+0x108>)
  402fde:	4808      	ldr	r0, [pc, #32]	; (403000 <nm_clkless_wake+0x10c>)
  402fe0:	f8df b020 	ldr.w	fp, [pc, #32]	; 403004 <nm_clkless_wake+0x110>
  402fe4:	47d8      	blx	fp
  402fe6:	480c      	ldr	r0, [pc, #48]	; (403018 <nm_clkless_wake+0x124>)
  402fe8:	47d8      	blx	fp
  402fea:	4808      	ldr	r0, [pc, #32]	; (40300c <nm_clkless_wake+0x118>)
  402fec:	47d8      	blx	fp
  402fee:	e7de      	b.n	402fae <nm_clkless_wake+0xba>
  402ff0:	00401ca5 	.word	0x00401ca5
  402ff4:	00403385 	.word	0x00403385
  402ff8:	aaaaaaab 	.word	0xaaaaaaab
  402ffc:	0040901c 	.word	0x0040901c
  403000:	00408bec 	.word	0x00408bec
  403004:	00405c79 	.word	0x00405c79
  403008:	0040908c 	.word	0x0040908c
  40300c:	00408c18 	.word	0x00408c18
  403010:	004090ac 	.word	0x004090ac
  403014:	20400014 	.word	0x20400014
  403018:	004090cc 	.word	0x004090cc
  40301c:	00403391 	.word	0x00403391

00403020 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  403020:	b500      	push	{lr}
  403022:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  403024:	a901      	add	r1, sp, #4
  403026:	f241 4008 	movw	r0, #5128	; 0x1408
  40302a:	4b15      	ldr	r3, [pc, #84]	; (403080 <enable_interrupts+0x60>)
  40302c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40302e:	b9e8      	cbnz	r0, 40306c <enable_interrupts+0x4c>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  403030:	9901      	ldr	r1, [sp, #4]
  403032:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  403036:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  403038:	f241 4008 	movw	r0, #5128	; 0x1408
  40303c:	4b11      	ldr	r3, [pc, #68]	; (403084 <enable_interrupts+0x64>)
  40303e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403040:	b9b8      	cbnz	r0, 403072 <enable_interrupts+0x52>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  403042:	a901      	add	r1, sp, #4
  403044:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  403048:	4b0d      	ldr	r3, [pc, #52]	; (403080 <enable_interrupts+0x60>)
  40304a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40304c:	b9a0      	cbnz	r0, 403078 <enable_interrupts+0x58>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  40304e:	9901      	ldr	r1, [sp, #4]
  403050:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  403054:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  403056:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  40305a:	4b0a      	ldr	r3, [pc, #40]	; (403084 <enable_interrupts+0x64>)
  40305c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40305e:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
  403060:	bf18      	it	ne
  403062:	f06f 0005 	mvnne.w	r0, #5
	}
	return M2M_SUCCESS;
}
  403066:	b003      	add	sp, #12
  403068:	f85d fb04 	ldr.w	pc, [sp], #4
		return M2M_ERR_BUS_FAIL;
  40306c:	f06f 0005 	mvn.w	r0, #5
  403070:	e7f9      	b.n	403066 <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  403072:	f06f 0005 	mvn.w	r0, #5
  403076:	e7f6      	b.n	403066 <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  403078:	f06f 0005 	mvn.w	r0, #5
  40307c:	e7f3      	b.n	403066 <enable_interrupts+0x46>
  40307e:	bf00      	nop
  403080:	00403385 	.word	0x00403385
  403084:	00403391 	.word	0x00403391

00403088 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  403088:	b510      	push	{r4, lr}
  40308a:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  40308c:	4b25      	ldr	r3, [pc, #148]	; (403124 <nmi_get_chipid+0x9c>)
  40308e:	681c      	ldr	r4, [r3, #0]
  403090:	b124      	cbz	r4, 40309c <nmi_get_chipid+0x14>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
  403092:	4b24      	ldr	r3, [pc, #144]	; (403124 <nmi_get_chipid+0x9c>)
  403094:	681c      	ldr	r4, [r3, #0]
}
  403096:	4620      	mov	r0, r4
  403098:	b002      	add	sp, #8
  40309a:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  40309c:	4619      	mov	r1, r3
  40309e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  4030a2:	4b21      	ldr	r3, [pc, #132]	; (403128 <nmi_get_chipid+0xa0>)
  4030a4:	4798      	blx	r3
  4030a6:	b118      	cbz	r0, 4030b0 <nmi_get_chipid+0x28>
			chipid = 0;
  4030a8:	2200      	movs	r2, #0
  4030aa:	4b1e      	ldr	r3, [pc, #120]	; (403124 <nmi_get_chipid+0x9c>)
  4030ac:	601a      	str	r2, [r3, #0]
			return 0;
  4030ae:	e7f2      	b.n	403096 <nmi_get_chipid+0xe>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  4030b0:	a901      	add	r1, sp, #4
  4030b2:	f241 30f4 	movw	r0, #5108	; 0x13f4
  4030b6:	4b1c      	ldr	r3, [pc, #112]	; (403128 <nmi_get_chipid+0xa0>)
  4030b8:	4798      	blx	r3
  4030ba:	b118      	cbz	r0, 4030c4 <nmi_get_chipid+0x3c>
			chipid = 0;
  4030bc:	2200      	movs	r2, #0
  4030be:	4b19      	ldr	r3, [pc, #100]	; (403124 <nmi_get_chipid+0x9c>)
  4030c0:	601a      	str	r2, [r3, #0]
			return 0;
  4030c2:	e7e8      	b.n	403096 <nmi_get_chipid+0xe>
		if (chipid == 0x1002a0)  {
  4030c4:	4b17      	ldr	r3, [pc, #92]	; (403124 <nmi_get_chipid+0x9c>)
  4030c6:	681b      	ldr	r3, [r3, #0]
  4030c8:	4a18      	ldr	r2, [pc, #96]	; (40312c <nmi_get_chipid+0xa4>)
  4030ca:	4293      	cmp	r3, r2
  4030cc:	d00d      	beq.n	4030ea <nmi_get_chipid+0x62>
		} else if(chipid == 0x1002b0) {
  4030ce:	4a18      	ldr	r2, [pc, #96]	; (403130 <nmi_get_chipid+0xa8>)
  4030d0:	4293      	cmp	r3, r2
  4030d2:	d011      	beq.n	4030f8 <nmi_get_chipid+0x70>
		} else if(chipid == 0x1000F0) { 
  4030d4:	4a17      	ldr	r2, [pc, #92]	; (403134 <nmi_get_chipid+0xac>)
  4030d6:	4293      	cmp	r3, r2
  4030d8:	d018      	beq.n	40310c <nmi_get_chipid+0x84>
		chipid |= 0x050000;
  4030da:	4a12      	ldr	r2, [pc, #72]	; (403124 <nmi_get_chipid+0x9c>)
		chipid &= ~(0x0f0000);
  4030dc:	6813      	ldr	r3, [r2, #0]
  4030de:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
		chipid |= 0x050000;
  4030e2:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  4030e6:	6013      	str	r3, [r2, #0]
  4030e8:	e7d3      	b.n	403092 <nmi_get_chipid+0xa>
			if (rfrevid == 0x1) { /* 1002A0 */
  4030ea:	9b01      	ldr	r3, [sp, #4]
  4030ec:	2b01      	cmp	r3, #1
  4030ee:	d0f4      	beq.n	4030da <nmi_get_chipid+0x52>
				chipid = 0x1002a1;
  4030f0:	3201      	adds	r2, #1
  4030f2:	4b0c      	ldr	r3, [pc, #48]	; (403124 <nmi_get_chipid+0x9c>)
  4030f4:	601a      	str	r2, [r3, #0]
  4030f6:	e7f0      	b.n	4030da <nmi_get_chipid+0x52>
			if(rfrevid == 3) { /* 1002B0 */
  4030f8:	9b01      	ldr	r3, [sp, #4]
  4030fa:	2b03      	cmp	r3, #3
  4030fc:	d0ed      	beq.n	4030da <nmi_get_chipid+0x52>
			} else if(rfrevid == 4) { /* 1002B1 */
  4030fe:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  403100:	bf0c      	ite	eq
  403102:	3201      	addeq	r2, #1
				chipid = 0x1002b2;
  403104:	4a0c      	ldrne	r2, [pc, #48]	; (403138 <nmi_get_chipid+0xb0>)
  403106:	4b07      	ldr	r3, [pc, #28]	; (403124 <nmi_get_chipid+0x9c>)
  403108:	601a      	str	r2, [r3, #0]
  40310a:	e7e6      	b.n	4030da <nmi_get_chipid+0x52>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  40310c:	4905      	ldr	r1, [pc, #20]	; (403124 <nmi_get_chipid+0x9c>)
  40310e:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  403112:	4b05      	ldr	r3, [pc, #20]	; (403128 <nmi_get_chipid+0xa0>)
  403114:	4798      	blx	r3
  403116:	2800      	cmp	r0, #0
  403118:	d0df      	beq.n	4030da <nmi_get_chipid+0x52>
			chipid = 0;
  40311a:	2200      	movs	r2, #0
  40311c:	4b01      	ldr	r3, [pc, #4]	; (403124 <nmi_get_chipid+0x9c>)
  40311e:	601a      	str	r2, [r3, #0]
			return 0;
  403120:	e7b9      	b.n	403096 <nmi_get_chipid+0xe>
  403122:	bf00      	nop
  403124:	2040c354 	.word	0x2040c354
  403128:	00403385 	.word	0x00403385
  40312c:	001002a0 	.word	0x001002a0
  403130:	001002b0 	.word	0x001002b0
  403134:	001000f0 	.word	0x001000f0
  403138:	001002b2 	.word	0x001002b2

0040313c <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  40313c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403140:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  403142:	f241 0514 	movw	r5, #4116	; 0x1014
  403146:	4c28      	ldr	r4, [pc, #160]	; (4031e8 <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  403148:	4e28      	ldr	r6, [pc, #160]	; (4031ec <wait_for_bootrom+0xb0>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40314a:	4628      	mov	r0, r5
  40314c:	47a0      	blx	r4
		if (reg & 0x80000000) {
  40314e:	2800      	cmp	r0, #0
  403150:	db02      	blt.n	403158 <wait_for_bootrom+0x1c>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  403152:	2001      	movs	r0, #1
  403154:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  403156:	e7f8      	b.n	40314a <wait_for_bootrom+0xe>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  403158:	4825      	ldr	r0, [pc, #148]	; (4031f0 <wait_for_bootrom+0xb4>)
  40315a:	4b23      	ldr	r3, [pc, #140]	; (4031e8 <wait_for_bootrom+0xac>)
  40315c:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  40315e:	f010 0f01 	tst.w	r0, #1
  403162:	d110      	bne.n	403186 <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  403164:	f8df 8084 	ldr.w	r8, [pc, #132]	; 4031ec <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  403168:	4e1f      	ldr	r6, [pc, #124]	; (4031e8 <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  40316a:	4d22      	ldr	r5, [pc, #136]	; (4031f4 <wait_for_bootrom+0xb8>)
			nm_bsp_sleep(1);
  40316c:	2001      	movs	r0, #1
  40316e:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  403170:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  403174:	47b0      	blx	r6
  403176:	4604      	mov	r4, r0
			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  403178:	462a      	mov	r2, r5
  40317a:	4601      	mov	r1, r0
  40317c:	481e      	ldr	r0, [pc, #120]	; (4031f8 <wait_for_bootrom+0xbc>)
  40317e:	4b1f      	ldr	r3, [pc, #124]	; (4031fc <wait_for_bootrom+0xc0>)
  403180:	4798      	blx	r3
		while(reg != M2M_FINISH_BOOT_ROM)
  403182:	42ac      	cmp	r4, r5
  403184:	d1f2      	bne.n	40316c <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  403186:	2f02      	cmp	r7, #2
  403188:	d019      	beq.n	4031be <wait_for_bootrom+0x82>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  40318a:	2f03      	cmp	r7, #3
  40318c:	d022      	beq.n	4031d4 <wait_for_bootrom+0x98>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  40318e:	2f04      	cmp	r7, #4
  403190:	bf14      	ite	ne
  403192:	2400      	movne	r4, #0
  403194:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  403196:	4b1a      	ldr	r3, [pc, #104]	; (403200 <wait_for_bootrom+0xc4>)
  403198:	4798      	blx	r3
  40319a:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40319e:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  4031a2:	bf0c      	ite	eq
  4031a4:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  4031a8:	4620      	movne	r0, r4
  4031aa:	4b16      	ldr	r3, [pc, #88]	; (403204 <wait_for_bootrom+0xc8>)
  4031ac:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  4031ae:	4916      	ldr	r1, [pc, #88]	; (403208 <wait_for_bootrom+0xcc>)
  4031b0:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  4031b4:	4b15      	ldr	r3, [pc, #84]	; (40320c <wait_for_bootrom+0xd0>)
  4031b6:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  4031b8:	2000      	movs	r0, #0
  4031ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4031be:	4914      	ldr	r1, [pc, #80]	; (403210 <wait_for_bootrom+0xd4>)
  4031c0:	4814      	ldr	r0, [pc, #80]	; (403214 <wait_for_bootrom+0xd8>)
  4031c2:	4c12      	ldr	r4, [pc, #72]	; (40320c <wait_for_bootrom+0xd0>)
  4031c4:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  4031c6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4031ca:	f241 008c 	movw	r0, #4236	; 0x108c
  4031ce:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  4031d0:	2400      	movs	r4, #0
  4031d2:	e7e0      	b.n	403196 <wait_for_bootrom+0x5a>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4031d4:	490e      	ldr	r1, [pc, #56]	; (403210 <wait_for_bootrom+0xd4>)
  4031d6:	480f      	ldr	r0, [pc, #60]	; (403214 <wait_for_bootrom+0xd8>)
  4031d8:	4c0c      	ldr	r4, [pc, #48]	; (40320c <wait_for_bootrom+0xd0>)
  4031da:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  4031dc:	2100      	movs	r1, #0
  4031de:	f241 008c 	movw	r0, #4236	; 0x108c
  4031e2:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  4031e4:	2400      	movs	r4, #0
  4031e6:	e7d6      	b.n	403196 <wait_for_bootrom+0x5a>
  4031e8:	00403379 	.word	0x00403379
  4031ec:	00401ca5 	.word	0x00401ca5
  4031f0:	000207bc 	.word	0x000207bc
  4031f4:	10add09e 	.word	0x10add09e
  4031f8:	004090f0 	.word	0x004090f0
  4031fc:	00405c79 	.word	0x00405c79
  403200:	00403089 	.word	0x00403089
  403204:	00402eb9 	.word	0x00402eb9
  403208:	ef522f61 	.word	0xef522f61
  40320c:	00403391 	.word	0x00403391
  403210:	3c1cd57d 	.word	0x3c1cd57d
  403214:	000207ac 	.word	0x000207ac

00403218 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  403218:	b5f0      	push	{r4, r5, r6, r7, lr}
  40321a:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  40321c:	f241 038c 	movw	r3, #4236	; 0x108c
  403220:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  403222:	4b18      	ldr	r3, [pc, #96]	; (403284 <wait_for_firmware_start+0x6c>)
  403224:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  403226:	3802      	subs	r0, #2
  403228:	b2c0      	uxtb	r0, r0
  40322a:	2801      	cmp	r0, #1
  40322c:	d911      	bls.n	403252 <wait_for_firmware_start+0x3a>
{
  40322e:	f04f 34ff 	mov.w	r4, #4294967295
  403232:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  403234:	2702      	movs	r7, #2
  403236:	4e14      	ldr	r6, [pc, #80]	; (403288 <wait_for_firmware_start+0x70>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  403238:	4d14      	ldr	r5, [pc, #80]	; (40328c <wait_for_firmware_start+0x74>)
	while (checkValue != reg)
  40323a:	9b00      	ldr	r3, [sp, #0]
  40323c:	4298      	cmp	r0, r3
  40323e:	d012      	beq.n	403266 <wait_for_firmware_start+0x4e>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  403240:	4638      	mov	r0, r7
  403242:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
  403244:	9801      	ldr	r0, [sp, #4]
  403246:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  403248:	3c01      	subs	r4, #1
  40324a:	d1f6      	bne.n	40323a <wait_for_firmware_start+0x22>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  40324c:	f06f 0004 	mvn.w	r0, #4
  403250:	e00e      	b.n	403270 <wait_for_firmware_start+0x58>
		regAddress = NMI_REV_REG;
  403252:	4b0f      	ldr	r3, [pc, #60]	; (403290 <wait_for_firmware_start+0x78>)
  403254:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  403256:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  40325a:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  40325e:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  403262:	9300      	str	r3, [sp, #0]
  403264:	e7e3      	b.n	40322e <wait_for_firmware_start+0x16>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  403266:	9a00      	ldr	r2, [sp, #0]
  403268:	4b06      	ldr	r3, [pc, #24]	; (403284 <wait_for_firmware_start+0x6c>)
  40326a:	429a      	cmp	r2, r3
  40326c:	d002      	beq.n	403274 <wait_for_firmware_start+0x5c>
	sint8 ret = M2M_SUCCESS;
  40326e:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  403270:	b003      	add	sp, #12
  403272:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nm_write_reg(NMI_STATE_REG, 0);
  403274:	2100      	movs	r1, #0
  403276:	f241 008c 	movw	r0, #4236	; 0x108c
  40327a:	4b06      	ldr	r3, [pc, #24]	; (403294 <wait_for_firmware_start+0x7c>)
  40327c:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
  40327e:	2000      	movs	r0, #0
  403280:	e7f6      	b.n	403270 <wait_for_firmware_start+0x58>
  403282:	bf00      	nop
  403284:	02532636 	.word	0x02532636
  403288:	00401ca5 	.word	0x00401ca5
  40328c:	00403379 	.word	0x00403379
  403290:	000207ac 	.word	0x000207ac
  403294:	00403391 	.word	0x00403391

00403298 <chip_deinit>:

sint8 chip_deinit(void)
{
  403298:	b5f0      	push	{r4, r5, r6, r7, lr}
  40329a:	b083      	sub	sp, #12
	uint32 reg = 0;
  40329c:	a902      	add	r1, sp, #8
  40329e:	2300      	movs	r3, #0
  4032a0:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4032a4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4032a8:	4b24      	ldr	r3, [pc, #144]	; (40333c <chip_deinit+0xa4>)
  4032aa:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  4032ac:	bb20      	cbnz	r0, 4032f8 <chip_deinit+0x60>
		M2M_ERR("failed to de-initialize\n");
	}
	reg &= ~(1 << 10);
  4032ae:	9901      	ldr	r1, [sp, #4]
  4032b0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4032b4:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4032b6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4032ba:	4b21      	ldr	r3, [pc, #132]	; (403340 <chip_deinit+0xa8>)
  4032bc:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  4032be:	4605      	mov	r5, r0
  4032c0:	bb28      	cbnz	r0, 40330e <chip_deinit+0x76>
  4032c2:	240a      	movs	r4, #10
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4032c4:	4e1d      	ldr	r6, [pc, #116]	; (40333c <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4032c6:	4f1e      	ldr	r7, [pc, #120]	; (403340 <chip_deinit+0xa8>)
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4032c8:	a901      	add	r1, sp, #4
  4032ca:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4032ce:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  4032d0:	4605      	mov	r5, r0
  4032d2:	bb38      	cbnz	r0, 403324 <chip_deinit+0x8c>
		if ((reg & (1 << 10))) {
  4032d4:	9901      	ldr	r1, [sp, #4]
  4032d6:	f411 6f80 	tst.w	r1, #1024	; 0x400
  4032da:	d00a      	beq.n	4032f2 <chip_deinit+0x5a>
			reg &= ~(1 << 10);
  4032dc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4032e0:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4032e2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4032e6:	47b8      	blx	r7
  4032e8:	4605      	mov	r5, r0
  4032ea:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  4032ec:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4032f0:	d1ea      	bne.n	4032c8 <chip_deinit+0x30>

	return ret;
}
  4032f2:	4628      	mov	r0, r5
  4032f4:	b003      	add	sp, #12
  4032f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		M2M_ERR("failed to de-initialize\n");
  4032f8:	f240 2231 	movw	r2, #561	; 0x231
  4032fc:	4911      	ldr	r1, [pc, #68]	; (403344 <chip_deinit+0xac>)
  4032fe:	4812      	ldr	r0, [pc, #72]	; (403348 <chip_deinit+0xb0>)
  403300:	4c12      	ldr	r4, [pc, #72]	; (40334c <chip_deinit+0xb4>)
  403302:	47a0      	blx	r4
  403304:	4812      	ldr	r0, [pc, #72]	; (403350 <chip_deinit+0xb8>)
  403306:	47a0      	blx	r4
  403308:	4812      	ldr	r0, [pc, #72]	; (403354 <chip_deinit+0xbc>)
  40330a:	47a0      	blx	r4
  40330c:	e7cf      	b.n	4032ae <chip_deinit+0x16>
		M2M_ERR("Error while writing reg\n");
  40330e:	f240 2237 	movw	r2, #567	; 0x237
  403312:	490c      	ldr	r1, [pc, #48]	; (403344 <chip_deinit+0xac>)
  403314:	480c      	ldr	r0, [pc, #48]	; (403348 <chip_deinit+0xb0>)
  403316:	4c0d      	ldr	r4, [pc, #52]	; (40334c <chip_deinit+0xb4>)
  403318:	47a0      	blx	r4
  40331a:	480f      	ldr	r0, [pc, #60]	; (403358 <chip_deinit+0xc0>)
  40331c:	47a0      	blx	r4
  40331e:	480d      	ldr	r0, [pc, #52]	; (403354 <chip_deinit+0xbc>)
  403320:	47a0      	blx	r4
		return ret;
  403322:	e7e6      	b.n	4032f2 <chip_deinit+0x5a>
			M2M_ERR("Error while reading reg\n");
  403324:	f240 223e 	movw	r2, #574	; 0x23e
  403328:	4906      	ldr	r1, [pc, #24]	; (403344 <chip_deinit+0xac>)
  40332a:	4807      	ldr	r0, [pc, #28]	; (403348 <chip_deinit+0xb0>)
  40332c:	4c07      	ldr	r4, [pc, #28]	; (40334c <chip_deinit+0xb4>)
  40332e:	47a0      	blx	r4
  403330:	480a      	ldr	r0, [pc, #40]	; (40335c <chip_deinit+0xc4>)
  403332:	47a0      	blx	r4
  403334:	4807      	ldr	r0, [pc, #28]	; (403354 <chip_deinit+0xbc>)
  403336:	47a0      	blx	r4
			return ret;
  403338:	e7db      	b.n	4032f2 <chip_deinit+0x5a>
  40333a:	bf00      	nop
  40333c:	00403385 	.word	0x00403385
  403340:	00403391 	.word	0x00403391
  403344:	0040902c 	.word	0x0040902c
  403348:	00408bec 	.word	0x00408bec
  40334c:	00405c79 	.word	0x00405c79
  403350:	00409038 	.word	0x00409038
  403354:	00408c18 	.word	0x00408c18
  403358:	00409054 	.word	0x00409054
  40335c:	00409070 	.word	0x00409070

00403360 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  403360:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  403362:	4b01      	ldr	r3, [pc, #4]	; (403368 <nm_bus_iface_init+0x8>)
  403364:	4798      	blx	r3

	return ret;
}
  403366:	bd08      	pop	{r3, pc}
  403368:	00401e19 	.word	0x00401e19

0040336c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  40336c:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  40336e:	4b01      	ldr	r3, [pc, #4]	; (403374 <nm_bus_iface_deinit+0x8>)
  403370:	4798      	blx	r3

	return ret;
}
  403372:	bd08      	pop	{r3, pc}
  403374:	00402009 	.word	0x00402009

00403378 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  403378:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  40337a:	4b01      	ldr	r3, [pc, #4]	; (403380 <nm_read_reg+0x8>)
  40337c:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  40337e:	bd08      	pop	{r3, pc}
  403380:	00403bcd 	.word	0x00403bcd

00403384 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  403384:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  403386:	4b01      	ldr	r3, [pc, #4]	; (40338c <nm_read_reg_with_ret+0x8>)
  403388:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  40338a:	bd08      	pop	{r3, pc}
  40338c:	00403be5 	.word	0x00403be5

00403390 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  403390:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  403392:	4b01      	ldr	r3, [pc, #4]	; (403398 <nm_write_reg+0x8>)
  403394:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  403396:	bd08      	pop	{r3, pc}
  403398:	00403bfd 	.word	0x00403bfd

0040339c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  40339c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4033a0:	4607      	mov	r7, r0
  4033a2:	4689      	mov	r9, r1
  4033a4:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  4033a6:	4b12      	ldr	r3, [pc, #72]	; (4033f0 <nm_read_block+0x54>)
  4033a8:	f8b3 8000 	ldrh.w	r8, [r3]
  4033ac:	f1a8 0808 	sub.w	r8, r8, #8
  4033b0:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4033b4:	4542      	cmp	r2, r8
  4033b6:	d919      	bls.n	4033ec <nm_read_block+0x50>
  4033b8:	4644      	mov	r4, r8
  4033ba:	2600      	movs	r6, #0
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  4033bc:	f8df a034 	ldr.w	sl, [pc, #52]	; 4033f4 <nm_read_block+0x58>
  4033c0:	4642      	mov	r2, r8
  4033c2:	eb09 0106 	add.w	r1, r9, r6
  4033c6:	4638      	mov	r0, r7
  4033c8:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  4033ca:	4603      	mov	r3, r0
  4033cc:	b958      	cbnz	r0, 4033e6 <nm_read_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  4033ce:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  4033d0:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  4033d2:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  4033d4:	42a5      	cmp	r5, r4
  4033d6:	d8f3      	bhi.n	4033c0 <nm_read_block+0x24>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  4033d8:	b2aa      	uxth	r2, r5
  4033da:	eb09 0106 	add.w	r1, r9, r6
  4033de:	4638      	mov	r0, r7
  4033e0:	4b04      	ldr	r3, [pc, #16]	; (4033f4 <nm_read_block+0x58>)
  4033e2:	4798      	blx	r3
  4033e4:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  4033e6:	4618      	mov	r0, r3
  4033e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  4033ec:	2600      	movs	r6, #0
  4033ee:	e7f3      	b.n	4033d8 <nm_read_block+0x3c>
  4033f0:	20400010 	.word	0x20400010
  4033f4:	00403d29 	.word	0x00403d29

004033f8 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  4033f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4033fc:	4607      	mov	r7, r0
  4033fe:	4689      	mov	r9, r1
  403400:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  403402:	4b12      	ldr	r3, [pc, #72]	; (40344c <nm_write_block+0x54>)
  403404:	f8b3 8000 	ldrh.w	r8, [r3]
  403408:	f1a8 0808 	sub.w	r8, r8, #8
  40340c:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  403410:	4542      	cmp	r2, r8
  403412:	d919      	bls.n	403448 <nm_write_block+0x50>
  403414:	4644      	mov	r4, r8
  403416:	2600      	movs	r6, #0
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  403418:	f8df a034 	ldr.w	sl, [pc, #52]	; 403450 <nm_write_block+0x58>
  40341c:	4642      	mov	r2, r8
  40341e:	eb09 0106 	add.w	r1, r9, r6
  403422:	4638      	mov	r0, r7
  403424:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  403426:	4603      	mov	r3, r0
  403428:	b958      	cbnz	r0, 403442 <nm_write_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  40342a:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  40342c:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  40342e:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  403430:	42a5      	cmp	r5, r4
  403432:	d8f3      	bhi.n	40341c <nm_write_block+0x24>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  403434:	b2aa      	uxth	r2, r5
  403436:	eb09 0106 	add.w	r1, r9, r6
  40343a:	4638      	mov	r0, r7
  40343c:	4b04      	ldr	r3, [pc, #16]	; (403450 <nm_write_block+0x58>)
  40343e:	4798      	blx	r3
  403440:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  403442:	4618      	mov	r0, r3
  403444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  403448:	2600      	movs	r6, #0
  40344a:	e7f3      	b.n	403434 <nm_write_block+0x3c>
  40344c:	20400010 	.word	0x20400010
  403450:	00403df1 	.word	0x00403df1

00403454 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  403454:	b530      	push	{r4, r5, lr}
  403456:	b083      	sub	sp, #12
  403458:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  40345a:	a902      	add	r1, sp, #8
  40345c:	2300      	movs	r3, #0
  40345e:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  403462:	4824      	ldr	r0, [pc, #144]	; (4034f4 <nm_get_firmware_info+0xa0>)
  403464:	4b24      	ldr	r3, [pc, #144]	; (4034f8 <nm_get_firmware_info+0xa4>)
  403466:	4798      	blx	r3
  403468:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  40346a:	9a01      	ldr	r2, [sp, #4]
  40346c:	4b23      	ldr	r3, [pc, #140]	; (4034fc <nm_get_firmware_info+0xa8>)
  40346e:	429a      	cmp	r2, r3
  403470:	d039      	beq.n	4034e6 <nm_get_firmware_info+0x92>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  403472:	9b01      	ldr	r3, [sp, #4]
  403474:	0c1a      	lsrs	r2, r3, #16
  403476:	b291      	uxth	r1, r2
  403478:	0a08      	lsrs	r0, r1, #8
  40347a:	71e0      	strb	r0, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  40347c:	f3c1 1103 	ubfx	r1, r1, #4, #4
  403480:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  403482:	f002 020f 	and.w	r2, r2, #15
  403486:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  403488:	b29a      	uxth	r2, r3
  40348a:	0a11      	lsrs	r1, r2, #8
  40348c:	7121      	strb	r1, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  40348e:	f3c2 1203 	ubfx	r2, r2, #4, #4
  403492:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  403494:	f003 030f 	and.w	r3, r3, #15
  403498:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  40349a:	4b19      	ldr	r3, [pc, #100]	; (403500 <nm_get_firmware_info+0xac>)
  40349c:	4798      	blx	r3
  40349e:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  4034a0:	7922      	ldrb	r2, [r4, #4]
  4034a2:	79a3      	ldrb	r3, [r4, #6]
  4034a4:	f003 030f 	and.w	r3, r3, #15
  4034a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4034ac:	7962      	ldrb	r2, [r4, #5]
  4034ae:	0112      	lsls	r2, r2, #4
  4034b0:	b2d2      	uxtb	r2, r2
  4034b2:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
  4034b4:	79e1      	ldrb	r1, [r4, #7]
  4034b6:	7a62      	ldrb	r2, [r4, #9]
  4034b8:	f002 020f 	and.w	r2, r2, #15
  4034bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  4034c0:	7a21      	ldrb	r1, [r4, #8]
  4034c2:	0109      	lsls	r1, r1, #4
  4034c4:	b2c9      	uxtb	r1, r1
	if(curr_drv_ver <  min_req_drv_ver) {
  4034c6:	430a      	orrs	r2, r1
  4034c8:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  4034cc:	428a      	cmp	r2, r1
  4034ce:	bf88      	it	hi
  4034d0:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  4034d4:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  4034d8:	4293      	cmp	r3, r2
	}
	return ret;
}
  4034da:	bf8c      	ite	hi
  4034dc:	4628      	movhi	r0, r5
  4034de:	f06f 000c 	mvnls.w	r0, #12
  4034e2:	b003      	add	sp, #12
  4034e4:	bd30      	pop	{r4, r5, pc}
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  4034e6:	a901      	add	r1, sp, #4
  4034e8:	f241 0048 	movw	r0, #4168	; 0x1048
  4034ec:	4b02      	ldr	r3, [pc, #8]	; (4034f8 <nm_get_firmware_info+0xa4>)
  4034ee:	4798      	blx	r3
  4034f0:	4605      	mov	r5, r0
  4034f2:	e7be      	b.n	403472 <nm_get_firmware_info+0x1e>
  4034f4:	000207ac 	.word	0x000207ac
  4034f8:	00403385 	.word	0x00403385
  4034fc:	d75dc1c3 	.word	0xd75dc1c3
  403500:	00403089 	.word	0x00403089

00403504 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  403504:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  403506:	2800      	cmp	r0, #0
  403508:	d037      	beq.n	40357a <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
  40350a:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  40350c:	1e63      	subs	r3, r4, #1
  40350e:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  403510:	2b04      	cmp	r3, #4
  403512:	bf28      	it	cs
  403514:	2401      	movcs	r4, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
  403516:	2000      	movs	r0, #0
  403518:	4b1e      	ldr	r3, [pc, #120]	; (403594 <nm_drv_init+0x90>)
  40351a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40351c:	4605      	mov	r5, r0
  40351e:	2800      	cmp	r0, #0
  403520:	d12d      	bne.n	40357e <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  403522:	481d      	ldr	r0, [pc, #116]	; (403598 <nm_drv_init+0x94>)
  403524:	4d1d      	ldr	r5, [pc, #116]	; (40359c <nm_drv_init+0x98>)
  403526:	47a8      	blx	r5
  403528:	4b1d      	ldr	r3, [pc, #116]	; (4035a0 <nm_drv_init+0x9c>)
  40352a:	4798      	blx	r3
  40352c:	4601      	mov	r1, r0
  40352e:	481d      	ldr	r0, [pc, #116]	; (4035a4 <nm_drv_init+0xa0>)
  403530:	47a8      	blx	r5
  403532:	481d      	ldr	r0, [pc, #116]	; (4035a8 <nm_drv_init+0xa4>)
  403534:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  403536:	4b1d      	ldr	r3, [pc, #116]	; (4035ac <nm_drv_init+0xa8>)
  403538:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  40353a:	4620      	mov	r0, r4
  40353c:	4b1c      	ldr	r3, [pc, #112]	; (4035b0 <nm_drv_init+0xac>)
  40353e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403540:	4605      	mov	r5, r0
  403542:	b9b0      	cbnz	r0, 403572 <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  403544:	4620      	mov	r0, r4
  403546:	4b1b      	ldr	r3, [pc, #108]	; (4035b4 <nm_drv_init+0xb0>)
  403548:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40354a:	4605      	mov	r5, r0
  40354c:	b988      	cbnz	r0, 403572 <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  40354e:	3c02      	subs	r4, #2
  403550:	b2e4      	uxtb	r4, r4
  403552:	2c01      	cmp	r4, #1
  403554:	d90f      	bls.n	403576 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  403556:	4b18      	ldr	r3, [pc, #96]	; (4035b8 <nm_drv_init+0xb4>)
  403558:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40355a:	4605      	mov	r5, r0
  40355c:	b158      	cbz	r0, 403576 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
  40355e:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  403562:	4916      	ldr	r1, [pc, #88]	; (4035bc <nm_drv_init+0xb8>)
  403564:	4816      	ldr	r0, [pc, #88]	; (4035c0 <nm_drv_init+0xbc>)
  403566:	4c0d      	ldr	r4, [pc, #52]	; (40359c <nm_drv_init+0x98>)
  403568:	47a0      	blx	r4
  40356a:	4816      	ldr	r0, [pc, #88]	; (4035c4 <nm_drv_init+0xc0>)
  40356c:	47a0      	blx	r4
  40356e:	480e      	ldr	r0, [pc, #56]	; (4035a8 <nm_drv_init+0xa4>)
  403570:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  403572:	4b15      	ldr	r3, [pc, #84]	; (4035c8 <nm_drv_init+0xc4>)
  403574:	4798      	blx	r3
ERR1:
	return ret;
}
  403576:	4628      	mov	r0, r5
  403578:	bd38      	pop	{r3, r4, r5, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
  40357a:	2401      	movs	r4, #1
  40357c:	e7cb      	b.n	403516 <nm_drv_init+0x12>
		M2M_ERR("[nmi start]: fail init bus\n");
  40357e:	f44f 7292 	mov.w	r2, #292	; 0x124
  403582:	490e      	ldr	r1, [pc, #56]	; (4035bc <nm_drv_init+0xb8>)
  403584:	480e      	ldr	r0, [pc, #56]	; (4035c0 <nm_drv_init+0xbc>)
  403586:	4c05      	ldr	r4, [pc, #20]	; (40359c <nm_drv_init+0x98>)
  403588:	47a0      	blx	r4
  40358a:	4810      	ldr	r0, [pc, #64]	; (4035cc <nm_drv_init+0xc8>)
  40358c:	47a0      	blx	r4
  40358e:	4806      	ldr	r0, [pc, #24]	; (4035a8 <nm_drv_init+0xa4>)
  403590:	47a0      	blx	r4
		goto ERR1;
  403592:	e7f0      	b.n	403576 <nm_drv_init+0x72>
  403594:	00403361 	.word	0x00403361
  403598:	00408ec0 	.word	0x00408ec0
  40359c:	00405c79 	.word	0x00405c79
  4035a0:	00403089 	.word	0x00403089
  4035a4:	004091b8 	.word	0x004091b8
  4035a8:	00408c18 	.word	0x00408c18
  4035ac:	00403c15 	.word	0x00403c15
  4035b0:	0040313d 	.word	0x0040313d
  4035b4:	00403219 	.word	0x00403219
  4035b8:	00403021 	.word	0x00403021
  4035bc:	00409100 	.word	0x00409100
  4035c0:	00408bec 	.word	0x00408bec
  4035c4:	0040917c 	.word	0x0040917c
  4035c8:	0040336d 	.word	0x0040336d
  4035cc:	0040919c 	.word	0x0040919c

004035d0 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  4035d0:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  4035d2:	4b19      	ldr	r3, [pc, #100]	; (403638 <nm_drv_deinit+0x68>)
  4035d4:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4035d6:	b958      	cbnz	r0, 4035f0 <nm_drv_deinit+0x20>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  4035d8:	2000      	movs	r0, #0
  4035da:	4b18      	ldr	r3, [pc, #96]	; (40363c <nm_drv_deinit+0x6c>)
  4035dc:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4035de:	4604      	mov	r4, r0
  4035e0:	b998      	cbnz	r0, 40360a <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
  4035e2:	4b17      	ldr	r3, [pc, #92]	; (403640 <nm_drv_deinit+0x70>)
  4035e4:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4035e6:	4604      	mov	r4, r0
  4035e8:	b9d0      	cbnz	r0, 403620 <nm_drv_deinit+0x50>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  4035ea:	4b16      	ldr	r3, [pc, #88]	; (403644 <nm_drv_deinit+0x74>)
  4035ec:	4798      	blx	r3
  4035ee:	e00a      	b.n	403606 <nm_drv_deinit+0x36>
  4035f0:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  4035f2:	f44f 72ba 	mov.w	r2, #372	; 0x174
  4035f6:	4914      	ldr	r1, [pc, #80]	; (403648 <nm_drv_deinit+0x78>)
  4035f8:	4814      	ldr	r0, [pc, #80]	; (40364c <nm_drv_deinit+0x7c>)
  4035fa:	4d15      	ldr	r5, [pc, #84]	; (403650 <nm_drv_deinit+0x80>)
  4035fc:	47a8      	blx	r5
  4035fe:	4815      	ldr	r0, [pc, #84]	; (403654 <nm_drv_deinit+0x84>)
  403600:	47a8      	blx	r5
  403602:	4815      	ldr	r0, [pc, #84]	; (403658 <nm_drv_deinit+0x88>)
  403604:	47a8      	blx	r5
#endif

ERR1:
	return ret;
}
  403606:	4620      	mov	r0, r4
  403608:	bd38      	pop	{r3, r4, r5, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  40360a:	f240 127b 	movw	r2, #379	; 0x17b
  40360e:	490e      	ldr	r1, [pc, #56]	; (403648 <nm_drv_deinit+0x78>)
  403610:	480e      	ldr	r0, [pc, #56]	; (40364c <nm_drv_deinit+0x7c>)
  403612:	4d0f      	ldr	r5, [pc, #60]	; (403650 <nm_drv_deinit+0x80>)
  403614:	47a8      	blx	r5
  403616:	4811      	ldr	r0, [pc, #68]	; (40365c <nm_drv_deinit+0x8c>)
  403618:	47a8      	blx	r5
  40361a:	480f      	ldr	r0, [pc, #60]	; (403658 <nm_drv_deinit+0x88>)
  40361c:	47a8      	blx	r5
		goto ERR1;
  40361e:	e7f2      	b.n	403606 <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: fail init bus\n");
  403620:	f240 1281 	movw	r2, #385	; 0x181
  403624:	4908      	ldr	r1, [pc, #32]	; (403648 <nm_drv_deinit+0x78>)
  403626:	4809      	ldr	r0, [pc, #36]	; (40364c <nm_drv_deinit+0x7c>)
  403628:	4d09      	ldr	r5, [pc, #36]	; (403650 <nm_drv_deinit+0x80>)
  40362a:	47a8      	blx	r5
  40362c:	480c      	ldr	r0, [pc, #48]	; (403660 <nm_drv_deinit+0x90>)
  40362e:	47a8      	blx	r5
  403630:	4809      	ldr	r0, [pc, #36]	; (403658 <nm_drv_deinit+0x88>)
  403632:	47a8      	blx	r5
		goto ERR1;
  403634:	e7e7      	b.n	403606 <nm_drv_deinit+0x36>
  403636:	bf00      	nop
  403638:	00403299 	.word	0x00403299
  40363c:	00404675 	.word	0x00404675
  403640:	0040336d 	.word	0x0040336d
  403644:	00403bc1 	.word	0x00403bc1
  403648:	0040910c 	.word	0x0040910c
  40364c:	00408bec 	.word	0x00408bec
  403650:	00405c79 	.word	0x00405c79
  403654:	0040911c 	.word	0x0040911c
  403658:	00408c18 	.word	0x00408c18
  40365c:	0040913c 	.word	0x0040913c
  403660:	00409160 	.word	0x00409160

00403664 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  403664:	b500      	push	{lr}
  403666:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  403668:	2300      	movs	r3, #0
  40366a:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  40366c:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  40366e:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  403672:	a901      	add	r1, sp, #4
  403674:	2003      	movs	r0, #3
  403676:	4b02      	ldr	r3, [pc, #8]	; (403680 <nmi_spi_read+0x1c>)
  403678:	4798      	blx	r3
}
  40367a:	b005      	add	sp, #20
  40367c:	f85d fb04 	ldr.w	pc, [sp], #4
  403680:	00401f35 	.word	0x00401f35

00403684 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  403684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403688:	b082      	sub	sp, #8
  40368a:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  40368c:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  403690:	b2db      	uxtb	r3, r3
  403692:	2b01      	cmp	r3, #1
  403694:	d927      	bls.n	4036e6 <spi_cmd_rsp+0x62>
  403696:	28cf      	cmp	r0, #207	; 0xcf
  403698:	d025      	beq.n	4036e6 <spi_cmd_rsp+0x62>
{
  40369a:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  40369c:	f04f 0801 	mov.w	r8, #1
  4036a0:	4f23      	ldr	r7, [pc, #140]	; (403730 <spi_cmd_rsp+0xac>)
  4036a2:	4641      	mov	r1, r8
  4036a4:	f10d 0007 	add.w	r0, sp, #7
  4036a8:	47b8      	blx	r7
  4036aa:	4606      	mov	r6, r0
  4036ac:	bb20      	cbnz	r0, 4036f8 <spi_cmd_rsp+0x74>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  4036ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4036b2:	42ab      	cmp	r3, r5
  4036b4:	d02c      	beq.n	403710 <spi_cmd_rsp+0x8c>
  4036b6:	1e63      	subs	r3, r4, #1
  4036b8:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4036bc:	d1f1      	bne.n	4036a2 <spi_cmd_rsp+0x1e>
  4036be:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  4036c0:	2701      	movs	r7, #1
  4036c2:	4d1b      	ldr	r5, [pc, #108]	; (403730 <spi_cmd_rsp+0xac>)
  4036c4:	4639      	mov	r1, r7
  4036c6:	f10d 0007 	add.w	r0, sp, #7
  4036ca:	47a8      	blx	r5
  4036cc:	bb10      	cbnz	r0, 403714 <spi_cmd_rsp+0x90>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  4036ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4036d2:	b353      	cbz	r3, 40372a <spi_cmd_rsp+0xa6>
  4036d4:	1e63      	subs	r3, r4, #1
  4036d6:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4036da:	d1f3      	bne.n	4036c4 <spi_cmd_rsp+0x40>
	sint8 result = N_OK;
  4036dc:	2601      	movs	r6, #1

_fail_:

	return result;
}
  4036de:	4630      	mov	r0, r6
  4036e0:	b002      	add	sp, #8
  4036e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  4036e6:	2101      	movs	r1, #1
  4036e8:	f10d 0007 	add.w	r0, sp, #7
  4036ec:	4b10      	ldr	r3, [pc, #64]	; (403730 <spi_cmd_rsp+0xac>)
  4036ee:	4798      	blx	r3
  4036f0:	2800      	cmp	r0, #0
  4036f2:	d0d2      	beq.n	40369a <spi_cmd_rsp+0x16>
			result = N_FAIL;
  4036f4:	2600      	movs	r6, #0
  4036f6:	e7f2      	b.n	4036de <spi_cmd_rsp+0x5a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  4036f8:	f240 1227 	movw	r2, #295	; 0x127
  4036fc:	490d      	ldr	r1, [pc, #52]	; (403734 <spi_cmd_rsp+0xb0>)
  4036fe:	480e      	ldr	r0, [pc, #56]	; (403738 <spi_cmd_rsp+0xb4>)
  403700:	4c0e      	ldr	r4, [pc, #56]	; (40373c <spi_cmd_rsp+0xb8>)
  403702:	47a0      	blx	r4
  403704:	480e      	ldr	r0, [pc, #56]	; (403740 <spi_cmd_rsp+0xbc>)
  403706:	47a0      	blx	r4
  403708:	480e      	ldr	r0, [pc, #56]	; (403744 <spi_cmd_rsp+0xc0>)
  40370a:	47a0      	blx	r4
			result = N_FAIL;
  40370c:	2600      	movs	r6, #0
			goto _fail_;
  40370e:	e7e6      	b.n	4036de <spi_cmd_rsp+0x5a>
  403710:	240b      	movs	r4, #11
  403712:	e7d5      	b.n	4036c0 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  403714:	f240 1235 	movw	r2, #309	; 0x135
  403718:	4906      	ldr	r1, [pc, #24]	; (403734 <spi_cmd_rsp+0xb0>)
  40371a:	4807      	ldr	r0, [pc, #28]	; (403738 <spi_cmd_rsp+0xb4>)
  40371c:	4c07      	ldr	r4, [pc, #28]	; (40373c <spi_cmd_rsp+0xb8>)
  40371e:	47a0      	blx	r4
  403720:	4807      	ldr	r0, [pc, #28]	; (403740 <spi_cmd_rsp+0xbc>)
  403722:	47a0      	blx	r4
  403724:	4807      	ldr	r0, [pc, #28]	; (403744 <spi_cmd_rsp+0xc0>)
  403726:	47a0      	blx	r4
			goto _fail_;
  403728:	e7d9      	b.n	4036de <spi_cmd_rsp+0x5a>
	sint8 result = N_OK;
  40372a:	2601      	movs	r6, #1
  40372c:	e7d7      	b.n	4036de <spi_cmd_rsp+0x5a>
  40372e:	bf00      	nop
  403730:	00403665 	.word	0x00403665
  403734:	004091d0 	.word	0x004091d0
  403738:	00408bec 	.word	0x00408bec
  40373c:	00405c79 	.word	0x00405c79
  403740:	00409610 	.word	0x00409610
  403744:	00408c18 	.word	0x00408c18

00403748 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  403748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40374c:	b085      	sub	sp, #20
  40374e:	4683      	mov	fp, r0
  403750:	468a      	mov	sl, r1
  403752:	4617      	mov	r7, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  403754:	f04f 0900 	mov.w	r9, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403758:	4d37      	ldr	r5, [pc, #220]	; (403838 <spi_data_read+0xf0>)
  40375a:	e027      	b.n	4037ac <spi_data_read+0x64>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  40375c:	f240 1257 	movw	r2, #343	; 0x157
  403760:	4936      	ldr	r1, [pc, #216]	; (40383c <spi_data_read+0xf4>)
  403762:	4837      	ldr	r0, [pc, #220]	; (403840 <spi_data_read+0xf8>)
  403764:	4c37      	ldr	r4, [pc, #220]	; (403844 <spi_data_read+0xfc>)
  403766:	47a0      	blx	r4
  403768:	4837      	ldr	r0, [pc, #220]	; (403848 <spi_data_read+0x100>)
  40376a:	47a0      	blx	r4
  40376c:	4837      	ldr	r0, [pc, #220]	; (40384c <spi_data_read+0x104>)
  40376e:	47a0      	blx	r4
  403770:	2300      	movs	r3, #0
  403772:	9301      	str	r3, [sp, #4]
		sz -= nbytes;

	} while (sz);

	return result;
}
  403774:	9801      	ldr	r0, [sp, #4]
  403776:	b005      	add	sp, #20
  403778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (retry <= 0) {
  40377c:	2c00      	cmp	r4, #0
  40377e:	dd2e      	ble.n	4037de <spi_data_read+0x96>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  403780:	4641      	mov	r1, r8
  403782:	eb0b 0009 	add.w	r0, fp, r9
  403786:	47a8      	blx	r5
  403788:	4604      	mov	r4, r0
  40378a:	2800      	cmp	r0, #0
  40378c:	d134      	bne.n	4037f8 <spi_data_read+0xb0>
		if(!clockless)
  40378e:	b91f      	cbnz	r7, 403798 <spi_data_read+0x50>
			if (!gu8Crc_off) {
  403790:	4b2f      	ldr	r3, [pc, #188]	; (403850 <spi_data_read+0x108>)
  403792:	781b      	ldrb	r3, [r3, #0]
  403794:	2b00      	cmp	r3, #0
  403796:	d03a      	beq.n	40380e <spi_data_read+0xc6>
		ix += nbytes;
  403798:	44c1      	add	r9, r8
  40379a:	fa0f f989 	sxth.w	r9, r9
		sz -= nbytes;
  40379e:	ebaa 0a08 	sub.w	sl, sl, r8
  4037a2:	fa1f fa8a 	uxth.w	sl, sl
	} while (sz);
  4037a6:	f1ba 0f00 	cmp.w	sl, #0
  4037aa:	d041      	beq.n	403830 <spi_data_read+0xe8>
  4037ac:	46d0      	mov	r8, sl
  4037ae:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
  4037b2:	bf28      	it	cs
  4037b4:	f44f 5800 	movcs.w	r8, #8192	; 0x2000
		retry = 10;
  4037b8:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  4037ba:	2601      	movs	r6, #1
  4037bc:	4631      	mov	r1, r6
  4037be:	f10d 000b 	add.w	r0, sp, #11
  4037c2:	47a8      	blx	r5
  4037c4:	9001      	str	r0, [sp, #4]
  4037c6:	2800      	cmp	r0, #0
  4037c8:	d1c8      	bne.n	40375c <spi_data_read+0x14>
			if (((rsp >> 4) & 0xf) == 0xf)
  4037ca:	f89d 300b 	ldrb.w	r3, [sp, #11]
  4037ce:	091b      	lsrs	r3, r3, #4
  4037d0:	2b0f      	cmp	r3, #15
  4037d2:	d0d3      	beq.n	40377c <spi_data_read+0x34>
  4037d4:	3c01      	subs	r4, #1
  4037d6:	b224      	sxth	r4, r4
		} while (retry--);
  4037d8:	f1b4 3fff 	cmp.w	r4, #4294967295
  4037dc:	d1ee      	bne.n	4037bc <spi_data_read+0x74>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  4037de:	f240 1263 	movw	r2, #355	; 0x163
  4037e2:	4916      	ldr	r1, [pc, #88]	; (40383c <spi_data_read+0xf4>)
  4037e4:	4816      	ldr	r0, [pc, #88]	; (403840 <spi_data_read+0xf8>)
  4037e6:	4c17      	ldr	r4, [pc, #92]	; (403844 <spi_data_read+0xfc>)
  4037e8:	47a0      	blx	r4
  4037ea:	f89d 100b 	ldrb.w	r1, [sp, #11]
  4037ee:	4819      	ldr	r0, [pc, #100]	; (403854 <spi_data_read+0x10c>)
  4037f0:	47a0      	blx	r4
  4037f2:	4816      	ldr	r0, [pc, #88]	; (40384c <spi_data_read+0x104>)
  4037f4:	47a0      	blx	r4
			break;
  4037f6:	e7bd      	b.n	403774 <spi_data_read+0x2c>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  4037f8:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  4037fc:	490f      	ldr	r1, [pc, #60]	; (40383c <spi_data_read+0xf4>)
  4037fe:	4810      	ldr	r0, [pc, #64]	; (403840 <spi_data_read+0xf8>)
  403800:	4c10      	ldr	r4, [pc, #64]	; (403844 <spi_data_read+0xfc>)
  403802:	47a0      	blx	r4
  403804:	4814      	ldr	r0, [pc, #80]	; (403858 <spi_data_read+0x110>)
  403806:	47a0      	blx	r4
  403808:	4810      	ldr	r0, [pc, #64]	; (40384c <spi_data_read+0x104>)
  40380a:	47a0      	blx	r4
			break;
  40380c:	e7b2      	b.n	403774 <spi_data_read+0x2c>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  40380e:	2102      	movs	r1, #2
  403810:	a803      	add	r0, sp, #12
  403812:	47a8      	blx	r5
  403814:	2800      	cmp	r0, #0
  403816:	d0bf      	beq.n	403798 <spi_data_read+0x50>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  403818:	f240 1277 	movw	r2, #375	; 0x177
  40381c:	4907      	ldr	r1, [pc, #28]	; (40383c <spi_data_read+0xf4>)
  40381e:	4808      	ldr	r0, [pc, #32]	; (403840 <spi_data_read+0xf8>)
  403820:	4d08      	ldr	r5, [pc, #32]	; (403844 <spi_data_read+0xfc>)
  403822:	47a8      	blx	r5
  403824:	480d      	ldr	r0, [pc, #52]	; (40385c <spi_data_read+0x114>)
  403826:	47a8      	blx	r5
  403828:	4808      	ldr	r0, [pc, #32]	; (40384c <spi_data_read+0x104>)
  40382a:	47a8      	blx	r5
					result = N_FAIL;
  40382c:	9401      	str	r4, [sp, #4]
					break;
  40382e:	e7a1      	b.n	403774 <spi_data_read+0x2c>
  403830:	2301      	movs	r3, #1
  403832:	9301      	str	r3, [sp, #4]
  403834:	e79e      	b.n	403774 <spi_data_read+0x2c>
  403836:	bf00      	nop
  403838:	00403665 	.word	0x00403665
  40383c:	004091dc 	.word	0x004091dc
  403840:	00408bec 	.word	0x00408bec
  403844:	00405c79 	.word	0x00405c79
  403848:	00409644 	.word	0x00409644
  40384c:	00408c18 	.word	0x00408c18
  403850:	2040c358 	.word	0x2040c358
  403854:	00409678 	.word	0x00409678
  403858:	004096a8 	.word	0x004096a8
  40385c:	004096dc 	.word	0x004096dc

00403860 <nmi_spi_write>:
{
  403860:	b500      	push	{lr}
  403862:	b085      	sub	sp, #20
	spi.pu8InBuf = b;
  403864:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  403866:	2300      	movs	r3, #0
  403868:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  40386a:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  40386e:	a901      	add	r1, sp, #4
  403870:	2003      	movs	r0, #3
  403872:	4b02      	ldr	r3, [pc, #8]	; (40387c <nmi_spi_write+0x1c>)
  403874:	4798      	blx	r3
}
  403876:	b005      	add	sp, #20
  403878:	f85d fb04 	ldr.w	pc, [sp], #4
  40387c:	00401f35 	.word	0x00401f35

00403880 <spi_cmd>:
{
  403880:	b570      	push	{r4, r5, r6, lr}
  403882:	b084      	sub	sp, #16
  403884:	f89d 4020 	ldrb.w	r4, [sp, #32]
	bc[0] = cmd;
  403888:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  40388c:	38c1      	subs	r0, #193	; 0xc1
  40388e:	280e      	cmp	r0, #14
  403890:	f200 80a2 	bhi.w	4039d8 <spi_cmd+0x158>
  403894:	e8df f000 	tbb	[pc, r0]
  403898:	19664545 	.word	0x19664545
  40389c:	5454332a 	.word	0x5454332a
  4038a0:	a0a0087f 	.word	0xa0a0087f
  4038a4:	a0a0      	.short	0xa0a0
  4038a6:	3c          	.byte	0x3c
  4038a7:	00          	.byte	0x00
		bc[1] = (uint8)(adr >> 16);
  4038a8:	0c0b      	lsrs	r3, r1, #16
  4038aa:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  4038ae:	0a0b      	lsrs	r3, r1, #8
  4038b0:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  4038b4:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  4038b8:	2105      	movs	r1, #5
		if (!gu8Crc_off)
  4038ba:	4b55      	ldr	r3, [pc, #340]	; (403a10 <spi_cmd+0x190>)
  4038bc:	781b      	ldrb	r3, [r3, #0]
  4038be:	2b00      	cmp	r3, #0
  4038c0:	f000 808c 	beq.w	4039dc <spi_cmd+0x15c>
			len-=1;
  4038c4:	3901      	subs	r1, #1
  4038c6:	b2c9      	uxtb	r1, r1
  4038c8:	e09a      	b.n	403a00 <spi_cmd+0x180>
		bc[1] = (uint8)(adr >> 8);
  4038ca:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  4038ce:	b944      	cbnz	r4, 4038e2 <spi_cmd+0x62>
		bc[1] = (uint8)(adr >> 8);
  4038d0:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  4038d4:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  4038d8:	2300      	movs	r3, #0
  4038da:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  4038de:	2105      	movs	r1, #5
		break;
  4038e0:	e7eb      	b.n	4038ba <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  4038e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4038e6:	f88d 3005 	strb.w	r3, [sp, #5]
  4038ea:	e7f3      	b.n	4038d4 <spi_cmd+0x54>
		bc[1] = 0x00;
  4038ec:	2300      	movs	r3, #0
  4038ee:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  4038f2:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  4038f6:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  4038fa:	2105      	movs	r1, #5
		break;
  4038fc:	e7dd      	b.n	4038ba <spi_cmd+0x3a>
		bc[1] = 0x00;
  4038fe:	2300      	movs	r3, #0
  403900:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  403904:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  403908:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  40390c:	2105      	movs	r1, #5
		break;
  40390e:	e7d4      	b.n	4038ba <spi_cmd+0x3a>
		bc[1] = 0xff;
  403910:	23ff      	movs	r3, #255	; 0xff
  403912:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  403916:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  40391a:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  40391e:	2105      	movs	r1, #5
		break;
  403920:	e7cb      	b.n	4038ba <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  403922:	0c0a      	lsrs	r2, r1, #16
  403924:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403928:	0a0a      	lsrs	r2, r1, #8
  40392a:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  40392e:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  403932:	0a1a      	lsrs	r2, r3, #8
  403934:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  403938:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  40393c:	2107      	movs	r1, #7
		break;
  40393e:	e7bc      	b.n	4038ba <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  403940:	0c0a      	lsrs	r2, r1, #16
  403942:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403946:	0a0a      	lsrs	r2, r1, #8
  403948:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  40394c:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  403950:	0c1a      	lsrs	r2, r3, #16
  403952:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  403956:	0a1a      	lsrs	r2, r3, #8
  403958:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  40395c:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  403960:	2108      	movs	r1, #8
		break;
  403962:	e7aa      	b.n	4038ba <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 8);
  403964:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  403968:	b984      	cbnz	r4, 40398c <spi_cmd+0x10c>
		bc[1] = (uint8)(adr >> 8);
  40396a:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  40396e:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  403972:	0e13      	lsrs	r3, r2, #24
  403974:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  403978:	0c13      	lsrs	r3, r2, #16
  40397a:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  40397e:	0a13      	lsrs	r3, r2, #8
  403980:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  403984:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  403988:	2108      	movs	r1, #8
		break;
  40398a:	e796      	b.n	4038ba <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  40398c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403990:	f88d 3005 	strb.w	r3, [sp, #5]
  403994:	e7eb      	b.n	40396e <spi_cmd+0xee>
		bc[1] = (uint8)(adr >> 16);
  403996:	0c0b      	lsrs	r3, r1, #16
  403998:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  40399c:	0a0b      	lsrs	r3, r1, #8
  40399e:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  4039a2:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  4039a6:	0e13      	lsrs	r3, r2, #24
  4039a8:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  4039ac:	0c13      	lsrs	r3, r2, #16
  4039ae:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  4039b2:	0a13      	lsrs	r3, r2, #8
  4039b4:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  4039b8:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  4039bc:	2109      	movs	r1, #9
		break;
  4039be:	e77c      	b.n	4038ba <spi_cmd+0x3a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  4039c0:	f44f 7284 	mov.w	r2, #264	; 0x108
  4039c4:	4913      	ldr	r1, [pc, #76]	; (403a14 <spi_cmd+0x194>)
  4039c6:	4814      	ldr	r0, [pc, #80]	; (403a18 <spi_cmd+0x198>)
  4039c8:	4c14      	ldr	r4, [pc, #80]	; (403a1c <spi_cmd+0x19c>)
  4039ca:	47a0      	blx	r4
  4039cc:	4814      	ldr	r0, [pc, #80]	; (403a20 <spi_cmd+0x1a0>)
  4039ce:	47a0      	blx	r4
  4039d0:	4814      	ldr	r0, [pc, #80]	; (403a24 <spi_cmd+0x1a4>)
  4039d2:	47a0      	blx	r4
			result = N_FAIL;
  4039d4:	2000      	movs	r0, #0
  4039d6:	e019      	b.n	403a0c <spi_cmd+0x18c>
	switch (cmd) {
  4039d8:	2000      	movs	r0, #0
  4039da:	e017      	b.n	403a0c <spi_cmd+0x18c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  4039dc:	1e4e      	subs	r6, r1, #1
  4039de:	ab01      	add	r3, sp, #4
  4039e0:	199d      	adds	r5, r3, r6
  4039e2:	207f      	movs	r0, #127	; 0x7f
  4039e4:	461a      	mov	r2, r3
	return crc7_syndrome_table[(crc << 1) ^ data];
  4039e6:	4c10      	ldr	r4, [pc, #64]	; (403a28 <spi_cmd+0x1a8>)
  4039e8:	f812 3b01 	ldrb.w	r3, [r2], #1
  4039ec:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  4039f0:	5ce0      	ldrb	r0, [r4, r3]
	while (len--)
  4039f2:	4295      	cmp	r5, r2
  4039f4:	d1f8      	bne.n	4039e8 <spi_cmd+0x168>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  4039f6:	ab04      	add	r3, sp, #16
  4039f8:	441e      	add	r6, r3
  4039fa:	0043      	lsls	r3, r0, #1
  4039fc:	f806 3c0c 	strb.w	r3, [r6, #-12]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  403a00:	a801      	add	r0, sp, #4
  403a02:	4b0a      	ldr	r3, [pc, #40]	; (403a2c <spi_cmd+0x1ac>)
  403a04:	4798      	blx	r3
  403a06:	2800      	cmp	r0, #0
  403a08:	d1da      	bne.n	4039c0 <spi_cmd+0x140>
  403a0a:	2001      	movs	r0, #1
}
  403a0c:	b004      	add	sp, #16
  403a0e:	bd70      	pop	{r4, r5, r6, pc}
  403a10:	2040c358 	.word	0x2040c358
  403a14:	004091c8 	.word	0x004091c8
  403a18:	00408bec 	.word	0x00408bec
  403a1c:	00405c79 	.word	0x00405c79
  403a20:	004095e4 	.word	0x004095e4
  403a24:	00408c18 	.word	0x00408c18
  403a28:	00409244 	.word	0x00409244
  403a2c:	00403861 	.word	0x00403861

00403a30 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  403a30:	b570      	push	{r4, r5, r6, lr}
  403a32:	b082      	sub	sp, #8
  403a34:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  403a36:	2831      	cmp	r0, #49	; 0x31
  403a38:	bf35      	itete	cc
  403a3a:	2301      	movcc	r3, #1
  403a3c:	2300      	movcs	r3, #0
  403a3e:	25c3      	movcc	r5, #195	; 0xc3
  403a40:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  403a42:	9300      	str	r3, [sp, #0]
  403a44:	2304      	movs	r3, #4
  403a46:	460a      	mov	r2, r1
  403a48:	4601      	mov	r1, r0
  403a4a:	4628      	mov	r0, r5
  403a4c:	4e15      	ldr	r6, [pc, #84]	; (403aa4 <spi_write_reg+0x74>)
  403a4e:	47b0      	blx	r6
	if (result != N_OK) {
  403a50:	2801      	cmp	r0, #1
  403a52:	d00d      	beq.n	403a70 <spi_write_reg+0x40>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  403a54:	f240 12eb 	movw	r2, #491	; 0x1eb
  403a58:	4913      	ldr	r1, [pc, #76]	; (403aa8 <spi_write_reg+0x78>)
  403a5a:	4814      	ldr	r0, [pc, #80]	; (403aac <spi_write_reg+0x7c>)
  403a5c:	4d14      	ldr	r5, [pc, #80]	; (403ab0 <spi_write_reg+0x80>)
  403a5e:	47a8      	blx	r5
  403a60:	4621      	mov	r1, r4
  403a62:	4814      	ldr	r0, [pc, #80]	; (403ab4 <spi_write_reg+0x84>)
  403a64:	47a8      	blx	r5
  403a66:	4814      	ldr	r0, [pc, #80]	; (403ab8 <spi_write_reg+0x88>)
  403a68:	47a8      	blx	r5
		return N_FAIL;
  403a6a:	2000      	movs	r0, #0
	}

	return result;

#endif
}
  403a6c:	b002      	add	sp, #8
  403a6e:	bd70      	pop	{r4, r5, r6, pc}
	result = spi_cmd_rsp(cmd);
  403a70:	4628      	mov	r0, r5
  403a72:	4b12      	ldr	r3, [pc, #72]	; (403abc <spi_write_reg+0x8c>)
  403a74:	4798      	blx	r3
	if (result != N_OK) {
  403a76:	2801      	cmp	r0, #1
  403a78:	d0f8      	beq.n	403a6c <spi_write_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  403a7a:	f240 12f1 	movw	r2, #497	; 0x1f1
  403a7e:	490a      	ldr	r1, [pc, #40]	; (403aa8 <spi_write_reg+0x78>)
  403a80:	480a      	ldr	r0, [pc, #40]	; (403aac <spi_write_reg+0x7c>)
  403a82:	4d0b      	ldr	r5, [pc, #44]	; (403ab0 <spi_write_reg+0x80>)
  403a84:	47a8      	blx	r5
  403a86:	4621      	mov	r1, r4
  403a88:	480d      	ldr	r0, [pc, #52]	; (403ac0 <spi_write_reg+0x90>)
  403a8a:	47a8      	blx	r5
  403a8c:	480a      	ldr	r0, [pc, #40]	; (403ab8 <spi_write_reg+0x88>)
  403a8e:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403a90:	2400      	movs	r4, #0
  403a92:	9400      	str	r4, [sp, #0]
  403a94:	4623      	mov	r3, r4
  403a96:	4622      	mov	r2, r4
  403a98:	4621      	mov	r1, r4
  403a9a:	20cf      	movs	r0, #207	; 0xcf
  403a9c:	4d01      	ldr	r5, [pc, #4]	; (403aa4 <spi_write_reg+0x74>)
  403a9e:	47a8      	blx	r5
		return N_FAIL;
  403aa0:	4620      	mov	r0, r4
  403aa2:	e7e3      	b.n	403a6c <spi_write_reg+0x3c>
  403aa4:	00403881 	.word	0x00403881
  403aa8:	004091fc 	.word	0x004091fc
  403aac:	00408bec 	.word	0x00408bec
  403ab0:	00405c79 	.word	0x00405c79
  403ab4:	00409794 	.word	0x00409794
  403ab8:	00408c18 	.word	0x00408c18
  403abc:	00403685 	.word	0x00403685
  403ac0:	004097c0 	.word	0x004097c0

00403ac4 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  403ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403ac8:	b084      	sub	sp, #16
  403aca:	4604      	mov	r4, r0
  403acc:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  403ace:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  403ad2:	bf35      	itete	cc
  403ad4:	2601      	movcc	r6, #1
  403ad6:	2600      	movcs	r6, #0
  403ad8:	25c4      	movcc	r5, #196	; 0xc4
  403ada:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  403adc:	9600      	str	r6, [sp, #0]
  403ade:	2304      	movs	r3, #4
  403ae0:	2200      	movs	r2, #0
  403ae2:	4601      	mov	r1, r0
  403ae4:	4628      	mov	r0, r5
  403ae6:	4f2c      	ldr	r7, [pc, #176]	; (403b98 <spi_read_reg+0xd4>)
  403ae8:	47b8      	blx	r7
	if (result != N_OK) {
  403aea:	2801      	cmp	r0, #1
  403aec:	d00e      	beq.n	403b0c <spi_read_reg+0x48>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  403aee:	f240 2245 	movw	r2, #581	; 0x245
  403af2:	492a      	ldr	r1, [pc, #168]	; (403b9c <spi_read_reg+0xd8>)
  403af4:	482a      	ldr	r0, [pc, #168]	; (403ba0 <spi_read_reg+0xdc>)
  403af6:	4d2b      	ldr	r5, [pc, #172]	; (403ba4 <spi_read_reg+0xe0>)
  403af8:	47a8      	blx	r5
  403afa:	4621      	mov	r1, r4
  403afc:	482a      	ldr	r0, [pc, #168]	; (403ba8 <spi_read_reg+0xe4>)
  403afe:	47a8      	blx	r5
  403b00:	482a      	ldr	r0, [pc, #168]	; (403bac <spi_read_reg+0xe8>)
  403b02:	47a8      	blx	r5
		return N_FAIL;
  403b04:	2000      	movs	r0, #0
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
}
  403b06:	b004      	add	sp, #16
  403b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	result = spi_cmd_rsp(cmd);
  403b0c:	4628      	mov	r0, r5
  403b0e:	4b28      	ldr	r3, [pc, #160]	; (403bb0 <spi_read_reg+0xec>)
  403b10:	4798      	blx	r3
	if (result != N_OK) {
  403b12:	2801      	cmp	r0, #1
  403b14:	d014      	beq.n	403b40 <spi_read_reg+0x7c>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  403b16:	f240 224b 	movw	r2, #587	; 0x24b
  403b1a:	4920      	ldr	r1, [pc, #128]	; (403b9c <spi_read_reg+0xd8>)
  403b1c:	4820      	ldr	r0, [pc, #128]	; (403ba0 <spi_read_reg+0xdc>)
  403b1e:	4d21      	ldr	r5, [pc, #132]	; (403ba4 <spi_read_reg+0xe0>)
  403b20:	47a8      	blx	r5
  403b22:	4621      	mov	r1, r4
  403b24:	4823      	ldr	r0, [pc, #140]	; (403bb4 <spi_read_reg+0xf0>)
  403b26:	47a8      	blx	r5
  403b28:	4820      	ldr	r0, [pc, #128]	; (403bac <spi_read_reg+0xe8>)
  403b2a:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403b2c:	2400      	movs	r4, #0
  403b2e:	9400      	str	r4, [sp, #0]
  403b30:	4623      	mov	r3, r4
  403b32:	4622      	mov	r2, r4
  403b34:	4621      	mov	r1, r4
  403b36:	20cf      	movs	r0, #207	; 0xcf
  403b38:	4d17      	ldr	r5, [pc, #92]	; (403b98 <spi_read_reg+0xd4>)
  403b3a:	47a8      	blx	r5
		return N_FAIL;
  403b3c:	4620      	mov	r0, r4
  403b3e:	e7e2      	b.n	403b06 <spi_read_reg+0x42>
	result = spi_data_read(&tmp[0], 4, clockless);
  403b40:	4632      	mov	r2, r6
  403b42:	2104      	movs	r1, #4
  403b44:	a803      	add	r0, sp, #12
  403b46:	4b1c      	ldr	r3, [pc, #112]	; (403bb8 <spi_read_reg+0xf4>)
  403b48:	4798      	blx	r3
	if (result != N_OK) {
  403b4a:	2801      	cmp	r0, #1
  403b4c:	d110      	bne.n	403b70 <spi_read_reg+0xac>
		((uint32)tmp[1] << 8) |
  403b4e:	f89d 200d 	ldrb.w	r2, [sp, #13]
		((uint32)tmp[2] << 16) |
  403b52:	f89d 300e 	ldrb.w	r3, [sp, #14]
  403b56:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
  403b58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	*u32data = tmp[0] |
  403b5c:	f89d 200c 	ldrb.w	r2, [sp, #12]
		((uint32)tmp[1] << 8) |
  403b60:	4313      	orrs	r3, r2
		((uint32)tmp[3] << 24);
  403b62:	f89d 200f 	ldrb.w	r2, [sp, #15]
		((uint32)tmp[2] << 16) |
  403b66:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	*u32data = tmp[0] |
  403b6a:	f8c8 3000 	str.w	r3, [r8]
	return N_OK;
  403b6e:	e7ca      	b.n	403b06 <spi_read_reg+0x42>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  403b70:	f240 2253 	movw	r2, #595	; 0x253
  403b74:	4909      	ldr	r1, [pc, #36]	; (403b9c <spi_read_reg+0xd8>)
  403b76:	480a      	ldr	r0, [pc, #40]	; (403ba0 <spi_read_reg+0xdc>)
  403b78:	4c0a      	ldr	r4, [pc, #40]	; (403ba4 <spi_read_reg+0xe0>)
  403b7a:	47a0      	blx	r4
  403b7c:	480f      	ldr	r0, [pc, #60]	; (403bbc <spi_read_reg+0xf8>)
  403b7e:	47a0      	blx	r4
  403b80:	480a      	ldr	r0, [pc, #40]	; (403bac <spi_read_reg+0xe8>)
  403b82:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403b84:	2400      	movs	r4, #0
  403b86:	9400      	str	r4, [sp, #0]
  403b88:	4623      	mov	r3, r4
  403b8a:	4622      	mov	r2, r4
  403b8c:	4621      	mov	r1, r4
  403b8e:	20cf      	movs	r0, #207	; 0xcf
  403b90:	4d01      	ldr	r5, [pc, #4]	; (403b98 <spi_read_reg+0xd4>)
  403b92:	47a8      	blx	r5
		return N_FAIL;
  403b94:	4620      	mov	r0, r4
  403b96:	e7b6      	b.n	403b06 <spi_read_reg+0x42>
  403b98:	00403881 	.word	0x00403881
  403b9c:	0040921c 	.word	0x0040921c
  403ba0:	00408bec 	.word	0x00408bec
  403ba4:	00405c79 	.word	0x00405c79
  403ba8:	00409714 	.word	0x00409714
  403bac:	00408c18 	.word	0x00408c18
  403bb0:	00403685 	.word	0x00403685
  403bb4:	00409740 	.word	0x00409740
  403bb8:	00403749 	.word	0x00403749
  403bbc:	00409774 	.word	0x00409774

00403bc0 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  403bc0:	2000      	movs	r0, #0
  403bc2:	4b01      	ldr	r3, [pc, #4]	; (403bc8 <nm_spi_deinit+0x8>)
  403bc4:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  403bc6:	4770      	bx	lr
  403bc8:	2040c358 	.word	0x2040c358

00403bcc <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  403bcc:	b500      	push	{lr}
  403bce:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  403bd0:	a901      	add	r1, sp, #4
  403bd2:	4b03      	ldr	r3, [pc, #12]	; (403be0 <nm_spi_read_reg+0x14>)
  403bd4:	4798      	blx	r3

	return u32Val;
}
  403bd6:	9801      	ldr	r0, [sp, #4]
  403bd8:	b003      	add	sp, #12
  403bda:	f85d fb04 	ldr.w	pc, [sp], #4
  403bde:	bf00      	nop
  403be0:	00403ac5 	.word	0x00403ac5

00403be4 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  403be4:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  403be6:	4b04      	ldr	r3, [pc, #16]	; (403bf8 <nm_spi_read_reg_with_ret+0x14>)
  403be8:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  403bea:	2801      	cmp	r0, #1

	return s8Ret;
}
  403bec:	bf0c      	ite	eq
  403bee:	2000      	moveq	r0, #0
  403bf0:	f06f 0005 	mvnne.w	r0, #5
  403bf4:	bd08      	pop	{r3, pc}
  403bf6:	bf00      	nop
  403bf8:	00403ac5 	.word	0x00403ac5

00403bfc <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  403bfc:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  403bfe:	4b04      	ldr	r3, [pc, #16]	; (403c10 <nm_spi_write_reg+0x14>)
  403c00:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  403c02:	2801      	cmp	r0, #1

	return s8Ret;
}
  403c04:	bf0c      	ite	eq
  403c06:	2000      	moveq	r0, #0
  403c08:	f06f 0005 	mvnne.w	r0, #5
  403c0c:	bd08      	pop	{r3, pc}
  403c0e:	bf00      	nop
  403c10:	00403a31 	.word	0x00403a31

00403c14 <nm_spi_init>:
{
  403c14:	b530      	push	{r4, r5, lr}
  403c16:	b083      	sub	sp, #12
	uint32 reg =0;
  403c18:	2300      	movs	r3, #0
  403c1a:	a902      	add	r1, sp, #8
  403c1c:	f841 3d08 	str.w	r3, [r1, #-8]!
	gu8Crc_off = 0;
  403c20:	4a34      	ldr	r2, [pc, #208]	; (403cf4 <nm_spi_init+0xe0>)
  403c22:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  403c24:	f64e 0024 	movw	r0, #59428	; 0xe824
  403c28:	4b33      	ldr	r3, [pc, #204]	; (403cf8 <nm_spi_init+0xe4>)
  403c2a:	4798      	blx	r3
  403c2c:	b348      	cbz	r0, 403c82 <nm_spi_init+0x6e>
	if(gu8Crc_off == 0)
  403c2e:	4b31      	ldr	r3, [pc, #196]	; (403cf4 <nm_spi_init+0xe0>)
  403c30:	781b      	ldrb	r3, [r3, #0]
  403c32:	b97b      	cbnz	r3, 403c54 <nm_spi_init+0x40>
		reg &= ~0x70;
  403c34:	9900      	ldr	r1, [sp, #0]
  403c36:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
		reg |= (0x5 << 4);
  403c3a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  403c3e:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  403c40:	f64e 0024 	movw	r0, #59428	; 0xe824
  403c44:	4b2d      	ldr	r3, [pc, #180]	; (403cfc <nm_spi_init+0xe8>)
  403c46:	4798      	blx	r3
  403c48:	4604      	mov	r4, r0
  403c4a:	2800      	cmp	r0, #0
  403c4c:	d039      	beq.n	403cc2 <nm_spi_init+0xae>
		gu8Crc_off = 1;
  403c4e:	2201      	movs	r2, #1
  403c50:	4b28      	ldr	r3, [pc, #160]	; (403cf4 <nm_spi_init+0xe0>)
  403c52:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
  403c54:	a901      	add	r1, sp, #4
  403c56:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  403c5a:	4b27      	ldr	r3, [pc, #156]	; (403cf8 <nm_spi_init+0xe4>)
  403c5c:	4798      	blx	r3
  403c5e:	2800      	cmp	r0, #0
  403c60:	d03a      	beq.n	403cd8 <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  403c62:	f64e 0024 	movw	r0, #59428	; 0xe824
  403c66:	4b26      	ldr	r3, [pc, #152]	; (403d00 <nm_spi_init+0xec>)
  403c68:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  403c6a:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  403c6e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  403c72:	f64e 0024 	movw	r0, #59428	; 0xe824
  403c76:	4b23      	ldr	r3, [pc, #140]	; (403d04 <nm_spi_init+0xf0>)
  403c78:	4798      	blx	r3
	return M2M_SUCCESS;
  403c7a:	2400      	movs	r4, #0
}
  403c7c:	4620      	mov	r0, r4
  403c7e:	b003      	add	sp, #12
  403c80:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
  403c82:	2201      	movs	r2, #1
  403c84:	4b1b      	ldr	r3, [pc, #108]	; (403cf4 <nm_spi_init+0xe0>)
  403c86:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  403c88:	f240 22c5 	movw	r2, #709	; 0x2c5
  403c8c:	491e      	ldr	r1, [pc, #120]	; (403d08 <nm_spi_init+0xf4>)
  403c8e:	481f      	ldr	r0, [pc, #124]	; (403d0c <nm_spi_init+0xf8>)
  403c90:	4c1f      	ldr	r4, [pc, #124]	; (403d10 <nm_spi_init+0xfc>)
  403c92:	47a0      	blx	r4
  403c94:	481f      	ldr	r0, [pc, #124]	; (403d14 <nm_spi_init+0x100>)
  403c96:	47a0      	blx	r4
  403c98:	481f      	ldr	r0, [pc, #124]	; (403d18 <nm_spi_init+0x104>)
  403c9a:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  403c9c:	4669      	mov	r1, sp
  403c9e:	f64e 0024 	movw	r0, #59428	; 0xe824
  403ca2:	4b15      	ldr	r3, [pc, #84]	; (403cf8 <nm_spi_init+0xe4>)
  403ca4:	4798      	blx	r3
  403ca6:	4604      	mov	r4, r0
  403ca8:	2800      	cmp	r0, #0
  403caa:	d1c0      	bne.n	403c2e <nm_spi_init+0x1a>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  403cac:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  403cb0:	4915      	ldr	r1, [pc, #84]	; (403d08 <nm_spi_init+0xf4>)
  403cb2:	4816      	ldr	r0, [pc, #88]	; (403d0c <nm_spi_init+0xf8>)
  403cb4:	4d16      	ldr	r5, [pc, #88]	; (403d10 <nm_spi_init+0xfc>)
  403cb6:	47a8      	blx	r5
  403cb8:	4818      	ldr	r0, [pc, #96]	; (403d1c <nm_spi_init+0x108>)
  403cba:	47a8      	blx	r5
  403cbc:	4816      	ldr	r0, [pc, #88]	; (403d18 <nm_spi_init+0x104>)
  403cbe:	47a8      	blx	r5
			return 0;
  403cc0:	e7dc      	b.n	403c7c <nm_spi_init+0x68>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  403cc2:	f240 22d2 	movw	r2, #722	; 0x2d2
  403cc6:	4910      	ldr	r1, [pc, #64]	; (403d08 <nm_spi_init+0xf4>)
  403cc8:	4810      	ldr	r0, [pc, #64]	; (403d0c <nm_spi_init+0xf8>)
  403cca:	4d11      	ldr	r5, [pc, #68]	; (403d10 <nm_spi_init+0xfc>)
  403ccc:	47a8      	blx	r5
  403cce:	4814      	ldr	r0, [pc, #80]	; (403d20 <nm_spi_init+0x10c>)
  403cd0:	47a8      	blx	r5
  403cd2:	4811      	ldr	r0, [pc, #68]	; (403d18 <nm_spi_init+0x104>)
  403cd4:	47a8      	blx	r5
			return 0;
  403cd6:	e7d1      	b.n	403c7c <nm_spi_init+0x68>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  403cd8:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  403cdc:	490a      	ldr	r1, [pc, #40]	; (403d08 <nm_spi_init+0xf4>)
  403cde:	480b      	ldr	r0, [pc, #44]	; (403d0c <nm_spi_init+0xf8>)
  403ce0:	4c0b      	ldr	r4, [pc, #44]	; (403d10 <nm_spi_init+0xfc>)
  403ce2:	47a0      	blx	r4
  403ce4:	480f      	ldr	r0, [pc, #60]	; (403d24 <nm_spi_init+0x110>)
  403ce6:	47a0      	blx	r4
  403ce8:	480b      	ldr	r0, [pc, #44]	; (403d18 <nm_spi_init+0x104>)
  403cea:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  403cec:	f06f 0405 	mvn.w	r4, #5
  403cf0:	e7c4      	b.n	403c7c <nm_spi_init+0x68>
  403cf2:	bf00      	nop
  403cf4:	2040c358 	.word	0x2040c358
  403cf8:	00403ac5 	.word	0x00403ac5
  403cfc:	00403a31 	.word	0x00403a31
  403d00:	00403bcd 	.word	0x00403bcd
  403d04:	00403bfd 	.word	0x00403bfd
  403d08:	00409238 	.word	0x00409238
  403d0c:	00408bec 	.word	0x00408bec
  403d10:	00405c79 	.word	0x00405c79
  403d14:	00409344 	.word	0x00409344
  403d18:	00408c18 	.word	0x00408c18
  403d1c:	00409394 	.word	0x00409394
  403d20:	004093c4 	.word	0x004093c4
  403d24:	004093f8 	.word	0x004093f8

00403d28 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  403d28:	b5f0      	push	{r4, r5, r6, r7, lr}
  403d2a:	b083      	sub	sp, #12
  403d2c:	4604      	mov	r4, r0
  403d2e:	460f      	mov	r7, r1
  403d30:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  403d32:	2200      	movs	r2, #0
  403d34:	9200      	str	r2, [sp, #0]
  403d36:	462b      	mov	r3, r5
  403d38:	4601      	mov	r1, r0
  403d3a:	20c8      	movs	r0, #200	; 0xc8
  403d3c:	4e22      	ldr	r6, [pc, #136]	; (403dc8 <nm_spi_read_block+0xa0>)
  403d3e:	47b0      	blx	r6
	if (result != N_OK) {
  403d40:	2801      	cmp	r0, #1
  403d42:	d00e      	beq.n	403d62 <nm_spi_read_block+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  403d44:	f44f 721d 	mov.w	r2, #628	; 0x274
  403d48:	4920      	ldr	r1, [pc, #128]	; (403dcc <nm_spi_read_block+0xa4>)
  403d4a:	4821      	ldr	r0, [pc, #132]	; (403dd0 <nm_spi_read_block+0xa8>)
  403d4c:	4d21      	ldr	r5, [pc, #132]	; (403dd4 <nm_spi_read_block+0xac>)
  403d4e:	47a8      	blx	r5
  403d50:	4621      	mov	r1, r4
  403d52:	4821      	ldr	r0, [pc, #132]	; (403dd8 <nm_spi_read_block+0xb0>)
  403d54:	47a8      	blx	r5
  403d56:	4821      	ldr	r0, [pc, #132]	; (403ddc <nm_spi_read_block+0xb4>)
  403d58:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  403d5a:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  403d5e:	b003      	add	sp, #12
  403d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = spi_cmd_rsp(cmd);
  403d62:	20c8      	movs	r0, #200	; 0xc8
  403d64:	4b1e      	ldr	r3, [pc, #120]	; (403de0 <nm_spi_read_block+0xb8>)
  403d66:	4798      	blx	r3
	if (result != N_OK) {
  403d68:	2801      	cmp	r0, #1
  403d6a:	d012      	beq.n	403d92 <nm_spi_read_block+0x6a>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  403d6c:	f240 227a 	movw	r2, #634	; 0x27a
  403d70:	4916      	ldr	r1, [pc, #88]	; (403dcc <nm_spi_read_block+0xa4>)
  403d72:	4817      	ldr	r0, [pc, #92]	; (403dd0 <nm_spi_read_block+0xa8>)
  403d74:	4d17      	ldr	r5, [pc, #92]	; (403dd4 <nm_spi_read_block+0xac>)
  403d76:	47a8      	blx	r5
  403d78:	4621      	mov	r1, r4
  403d7a:	481a      	ldr	r0, [pc, #104]	; (403de4 <nm_spi_read_block+0xbc>)
  403d7c:	47a8      	blx	r5
  403d7e:	4817      	ldr	r0, [pc, #92]	; (403ddc <nm_spi_read_block+0xb4>)
  403d80:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403d82:	2100      	movs	r1, #0
  403d84:	9100      	str	r1, [sp, #0]
  403d86:	460b      	mov	r3, r1
  403d88:	460a      	mov	r2, r1
  403d8a:	20cf      	movs	r0, #207	; 0xcf
  403d8c:	4c0e      	ldr	r4, [pc, #56]	; (403dc8 <nm_spi_read_block+0xa0>)
  403d8e:	47a0      	blx	r4
  403d90:	e7e3      	b.n	403d5a <nm_spi_read_block+0x32>
	result = spi_data_read(buf, size,0);
  403d92:	2200      	movs	r2, #0
  403d94:	4629      	mov	r1, r5
  403d96:	4638      	mov	r0, r7
  403d98:	4b13      	ldr	r3, [pc, #76]	; (403de8 <nm_spi_read_block+0xc0>)
  403d9a:	4798      	blx	r3
	if (result != N_OK) {
  403d9c:	2801      	cmp	r0, #1
  403d9e:	d011      	beq.n	403dc4 <nm_spi_read_block+0x9c>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  403da0:	f44f 7221 	mov.w	r2, #644	; 0x284
  403da4:	4909      	ldr	r1, [pc, #36]	; (403dcc <nm_spi_read_block+0xa4>)
  403da6:	480a      	ldr	r0, [pc, #40]	; (403dd0 <nm_spi_read_block+0xa8>)
  403da8:	4c0a      	ldr	r4, [pc, #40]	; (403dd4 <nm_spi_read_block+0xac>)
  403daa:	47a0      	blx	r4
  403dac:	480f      	ldr	r0, [pc, #60]	; (403dec <nm_spi_read_block+0xc4>)
  403dae:	47a0      	blx	r4
  403db0:	480a      	ldr	r0, [pc, #40]	; (403ddc <nm_spi_read_block+0xb4>)
  403db2:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403db4:	2100      	movs	r1, #0
  403db6:	9100      	str	r1, [sp, #0]
  403db8:	460b      	mov	r3, r1
  403dba:	460a      	mov	r2, r1
  403dbc:	20cf      	movs	r0, #207	; 0xcf
  403dbe:	4c02      	ldr	r4, [pc, #8]	; (403dc8 <nm_spi_read_block+0xa0>)
  403dc0:	47a0      	blx	r4
  403dc2:	e7ca      	b.n	403d5a <nm_spi_read_block+0x32>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  403dc4:	2000      	movs	r0, #0
  403dc6:	e7ca      	b.n	403d5e <nm_spi_read_block+0x36>
  403dc8:	00403881 	.word	0x00403881
  403dcc:	0040922c 	.word	0x0040922c
  403dd0:	00408bec 	.word	0x00408bec
  403dd4:	00405c79 	.word	0x00405c79
  403dd8:	00409420 	.word	0x00409420
  403ddc:	00408c18 	.word	0x00408c18
  403de0:	00403685 	.word	0x00403685
  403de4:	00409450 	.word	0x00409450
  403de8:	00403749 	.word	0x00403749
  403dec:	00409488 	.word	0x00409488

00403df0 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  403df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403df4:	b085      	sub	sp, #20
  403df6:	4604      	mov	r4, r0
  403df8:	4688      	mov	r8, r1
  403dfa:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  403dfc:	2200      	movs	r2, #0
  403dfe:	9200      	str	r2, [sp, #0]
  403e00:	462b      	mov	r3, r5
  403e02:	4601      	mov	r1, r0
  403e04:	20c7      	movs	r0, #199	; 0xc7
  403e06:	4e4d      	ldr	r6, [pc, #308]	; (403f3c <nm_spi_write_block+0x14c>)
  403e08:	47b0      	blx	r6
	if (result != N_OK) {
  403e0a:	2801      	cmp	r0, #1
  403e0c:	d00f      	beq.n	403e2e <nm_spi_write_block+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  403e0e:	f240 220f 	movw	r2, #527	; 0x20f
  403e12:	494b      	ldr	r1, [pc, #300]	; (403f40 <nm_spi_write_block+0x150>)
  403e14:	484b      	ldr	r0, [pc, #300]	; (403f44 <nm_spi_write_block+0x154>)
  403e16:	4d4c      	ldr	r5, [pc, #304]	; (403f48 <nm_spi_write_block+0x158>)
  403e18:	47a8      	blx	r5
  403e1a:	4621      	mov	r1, r4
  403e1c:	484b      	ldr	r0, [pc, #300]	; (403f4c <nm_spi_write_block+0x15c>)
  403e1e:	47a8      	blx	r5
  403e20:	484b      	ldr	r0, [pc, #300]	; (403f50 <nm_spi_write_block+0x160>)
  403e22:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  403e24:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  403e28:	b005      	add	sp, #20
  403e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	result = spi_cmd_rsp(cmd);
  403e2e:	20c7      	movs	r0, #199	; 0xc7
  403e30:	4b48      	ldr	r3, [pc, #288]	; (403f54 <nm_spi_write_block+0x164>)
  403e32:	4798      	blx	r3
	if (result != N_OK) {
  403e34:	2801      	cmp	r0, #1
  403e36:	d012      	beq.n	403e5e <nm_spi_write_block+0x6e>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  403e38:	f240 2215 	movw	r2, #533	; 0x215
  403e3c:	4940      	ldr	r1, [pc, #256]	; (403f40 <nm_spi_write_block+0x150>)
  403e3e:	4841      	ldr	r0, [pc, #260]	; (403f44 <nm_spi_write_block+0x154>)
  403e40:	4d41      	ldr	r5, [pc, #260]	; (403f48 <nm_spi_write_block+0x158>)
  403e42:	47a8      	blx	r5
  403e44:	4621      	mov	r1, r4
  403e46:	4844      	ldr	r0, [pc, #272]	; (403f58 <nm_spi_write_block+0x168>)
  403e48:	47a8      	blx	r5
  403e4a:	4841      	ldr	r0, [pc, #260]	; (403f50 <nm_spi_write_block+0x160>)
  403e4c:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403e4e:	2100      	movs	r1, #0
  403e50:	9100      	str	r1, [sp, #0]
  403e52:	460b      	mov	r3, r1
  403e54:	460a      	mov	r2, r1
  403e56:	20cf      	movs	r0, #207	; 0xcf
  403e58:	4c38      	ldr	r4, [pc, #224]	; (403f3c <nm_spi_write_block+0x14c>)
  403e5a:	47a0      	blx	r4
  403e5c:	e7e2      	b.n	403e24 <nm_spi_write_block+0x34>
	uint8 cmd, order, crc[2] = {0};
  403e5e:	2400      	movs	r4, #0
  403e60:	f8ad 400c 	strh.w	r4, [sp, #12]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  403e64:	4f3d      	ldr	r7, [pc, #244]	; (403f5c <nm_spi_write_block+0x16c>)
		if (!gu8Crc_off) {
  403e66:	f8df 910c 	ldr.w	r9, [pc, #268]	; 403f74 <nm_spi_write_block+0x184>
  403e6a:	e01d      	b.n	403ea8 <nm_spi_write_block+0xb8>
				order = 0x2;
  403e6c:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  403e70:	bf94      	ite	ls
  403e72:	2303      	movls	r3, #3
  403e74:	2302      	movhi	r3, #2
		cmd |= order;
  403e76:	f063 030f 	orn	r3, r3, #15
  403e7a:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  403e7e:	2101      	movs	r1, #1
  403e80:	f10d 000b 	add.w	r0, sp, #11
  403e84:	47b8      	blx	r7
  403e86:	b9e8      	cbnz	r0, 403ec4 <nm_spi_write_block+0xd4>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  403e88:	4631      	mov	r1, r6
  403e8a:	eb08 0004 	add.w	r0, r8, r4
  403e8e:	47b8      	blx	r7
  403e90:	2800      	cmp	r0, #0
  403e92:	d135      	bne.n	403f00 <nm_spi_write_block+0x110>
		if (!gu8Crc_off) {
  403e94:	f899 3000 	ldrb.w	r3, [r9]
  403e98:	2b00      	cmp	r3, #0
  403e9a:	d03c      	beq.n	403f16 <nm_spi_write_block+0x126>
		ix += nbytes;
  403e9c:	4434      	add	r4, r6
  403e9e:	b224      	sxth	r4, r4
		sz -= nbytes;
  403ea0:	1bad      	subs	r5, r5, r6
  403ea2:	b2ad      	uxth	r5, r5
	} while (sz);
  403ea4:	2d00      	cmp	r5, #0
  403ea6:	d046      	beq.n	403f36 <nm_spi_write_block+0x146>
  403ea8:	462e      	mov	r6, r5
  403eaa:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  403eae:	bf28      	it	cs
  403eb0:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
		if (ix == 0)  {
  403eb4:	2c00      	cmp	r4, #0
  403eb6:	d1d9      	bne.n	403e6c <nm_spi_write_block+0x7c>
				order = 0x1;
  403eb8:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  403ebc:	bf94      	ite	ls
  403ebe:	2303      	movls	r3, #3
  403ec0:	2301      	movhi	r3, #1
  403ec2:	e7d8      	b.n	403e76 <nm_spi_write_block+0x86>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  403ec4:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  403ec8:	4925      	ldr	r1, [pc, #148]	; (403f60 <nm_spi_write_block+0x170>)
  403eca:	481e      	ldr	r0, [pc, #120]	; (403f44 <nm_spi_write_block+0x154>)
  403ecc:	4c1e      	ldr	r4, [pc, #120]	; (403f48 <nm_spi_write_block+0x158>)
  403ece:	47a0      	blx	r4
  403ed0:	4824      	ldr	r0, [pc, #144]	; (403f64 <nm_spi_write_block+0x174>)
  403ed2:	47a0      	blx	r4
  403ed4:	481e      	ldr	r0, [pc, #120]	; (403f50 <nm_spi_write_block+0x160>)
  403ed6:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  403ed8:	f240 2226 	movw	r2, #550	; 0x226
  403edc:	4918      	ldr	r1, [pc, #96]	; (403f40 <nm_spi_write_block+0x150>)
  403ede:	4819      	ldr	r0, [pc, #100]	; (403f44 <nm_spi_write_block+0x154>)
  403ee0:	4c19      	ldr	r4, [pc, #100]	; (403f48 <nm_spi_write_block+0x158>)
  403ee2:	47a0      	blx	r4
  403ee4:	4820      	ldr	r0, [pc, #128]	; (403f68 <nm_spi_write_block+0x178>)
  403ee6:	47a0      	blx	r4
  403ee8:	4819      	ldr	r0, [pc, #100]	; (403f50 <nm_spi_write_block+0x160>)
  403eea:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403eec:	2400      	movs	r4, #0
  403eee:	9400      	str	r4, [sp, #0]
  403ef0:	4623      	mov	r3, r4
  403ef2:	4622      	mov	r2, r4
  403ef4:	4621      	mov	r1, r4
  403ef6:	20cf      	movs	r0, #207	; 0xcf
  403ef8:	4d10      	ldr	r5, [pc, #64]	; (403f3c <nm_spi_write_block+0x14c>)
  403efa:	47a8      	blx	r5
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  403efc:	4620      	mov	r0, r4
  403efe:	e793      	b.n	403e28 <nm_spi_write_block+0x38>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  403f00:	f240 12b1 	movw	r2, #433	; 0x1b1
  403f04:	4916      	ldr	r1, [pc, #88]	; (403f60 <nm_spi_write_block+0x170>)
  403f06:	480f      	ldr	r0, [pc, #60]	; (403f44 <nm_spi_write_block+0x154>)
  403f08:	4c0f      	ldr	r4, [pc, #60]	; (403f48 <nm_spi_write_block+0x158>)
  403f0a:	47a0      	blx	r4
  403f0c:	4817      	ldr	r0, [pc, #92]	; (403f6c <nm_spi_write_block+0x17c>)
  403f0e:	47a0      	blx	r4
  403f10:	480f      	ldr	r0, [pc, #60]	; (403f50 <nm_spi_write_block+0x160>)
  403f12:	47a0      	blx	r4
  403f14:	e7e0      	b.n	403ed8 <nm_spi_write_block+0xe8>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  403f16:	2102      	movs	r1, #2
  403f18:	a803      	add	r0, sp, #12
  403f1a:	47b8      	blx	r7
  403f1c:	2800      	cmp	r0, #0
  403f1e:	d0bd      	beq.n	403e9c <nm_spi_write_block+0xac>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  403f20:	f240 12bb 	movw	r2, #443	; 0x1bb
  403f24:	490e      	ldr	r1, [pc, #56]	; (403f60 <nm_spi_write_block+0x170>)
  403f26:	4807      	ldr	r0, [pc, #28]	; (403f44 <nm_spi_write_block+0x154>)
  403f28:	4c07      	ldr	r4, [pc, #28]	; (403f48 <nm_spi_write_block+0x158>)
  403f2a:	47a0      	blx	r4
  403f2c:	4810      	ldr	r0, [pc, #64]	; (403f70 <nm_spi_write_block+0x180>)
  403f2e:	47a0      	blx	r4
  403f30:	4807      	ldr	r0, [pc, #28]	; (403f50 <nm_spi_write_block+0x160>)
  403f32:	47a0      	blx	r4
  403f34:	e7d0      	b.n	403ed8 <nm_spi_write_block+0xe8>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  403f36:	2000      	movs	r0, #0
  403f38:	e776      	b.n	403e28 <nm_spi_write_block+0x38>
  403f3a:	bf00      	nop
  403f3c:	00403881 	.word	0x00403881
  403f40:	0040920c 	.word	0x0040920c
  403f44:	00408bec 	.word	0x00408bec
  403f48:	00405c79 	.word	0x00405c79
  403f4c:	004094b0 	.word	0x004094b0
  403f50:	00408c18 	.word	0x00408c18
  403f54:	00403685 	.word	0x00403685
  403f58:	004094e0 	.word	0x004094e0
  403f5c:	00403861 	.word	0x00403861
  403f60:	004091ec 	.word	0x004091ec
  403f64:	00409518 	.word	0x00409518
  403f68:	004095bc 	.word	0x004095bc
  403f6c:	00409550 	.word	0x00409550
  403f70:	00409584 	.word	0x00409584
  403f74:	2040c358 	.word	0x2040c358

00403f78 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  403f78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403f7c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  403f80:	b194      	cbz	r4, 403fa8 <Socket_ReadSocketData+0x30>
  403f82:	4681      	mov	r9, r0
  403f84:	460e      	mov	r6, r1
  403f86:	4692      	mov	sl, r2
  403f88:	4698      	mov	r8, r3
  403f8a:	0103      	lsls	r3, r0, #4
  403f8c:	4922      	ldr	r1, [pc, #136]	; (404018 <Socket_ReadSocketData+0xa0>)
  403f8e:	58cb      	ldr	r3, [r1, r3]
  403f90:	b153      	cbz	r3, 403fa8 <Socket_ReadSocketData+0x30>
  403f92:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  403f96:	889b      	ldrh	r3, [r3, #4]
  403f98:	b29b      	uxth	r3, r3
  403f9a:	b12b      	cbz	r3, 403fa8 <Socket_ReadSocketData+0x30>
  403f9c:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  403fa0:	7a9b      	ldrb	r3, [r3, #10]
  403fa2:	b2db      	uxtb	r3, r3
  403fa4:	2b01      	cmp	r3, #1
  403fa6:	d001      	beq.n	403fac <Socket_ReadSocketData+0x34>
  403fa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  403fac:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  403fae:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  403fb2:	f8df b07c 	ldr.w	fp, [pc, #124]	; 404030 <Socket_ReadSocketData+0xb8>
  403fb6:	e006      	b.n	403fc6 <Socket_ReadSocketData+0x4e>
  403fb8:	4625      	mov	r5, r4
			u8SetRxDone = 1;
  403fba:	2301      	movs	r3, #1
  403fbc:	e00b      	b.n	403fd6 <Socket_ReadSocketData+0x5e>
				pstrRecv->u16RemainingSize	-= u16Read;

				if (gpfAppSocketCb)
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
  403fbe:	1b64      	subs	r4, r4, r5
  403fc0:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  403fc2:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  403fc4:	b1ec      	cbz	r4, 404002 <Socket_ReadSocketData+0x8a>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  403fc6:	88bb      	ldrh	r3, [r7, #4]
  403fc8:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
  403fca:	b21b      	sxth	r3, r3
  403fcc:	2b00      	cmp	r3, #0
  403fce:	ddf3      	ble.n	403fb8 <Socket_ReadSocketData+0x40>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  403fd0:	88bd      	ldrh	r5, [r7, #4]
  403fd2:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
  403fd4:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  403fd6:	6839      	ldr	r1, [r7, #0]
  403fd8:	462a      	mov	r2, r5
  403fda:	4640      	mov	r0, r8
  403fdc:	47d8      	blx	fp
  403fde:	b990      	cbnz	r0, 404006 <Socket_ReadSocketData+0x8e>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  403fe0:	683b      	ldr	r3, [r7, #0]
  403fe2:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  403fe4:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  403fe6:	88f3      	ldrh	r3, [r6, #6]
  403fe8:	1b5b      	subs	r3, r3, r5
  403fea:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
  403fec:	4b0b      	ldr	r3, [pc, #44]	; (40401c <Socket_ReadSocketData+0xa4>)
  403fee:	681b      	ldr	r3, [r3, #0]
  403ff0:	2b00      	cmp	r3, #0
  403ff2:	d0e4      	beq.n	403fbe <Socket_ReadSocketData+0x46>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  403ff4:	4b09      	ldr	r3, [pc, #36]	; (40401c <Socket_ReadSocketData+0xa4>)
  403ff6:	681b      	ldr	r3, [r3, #0]
  403ff8:	4632      	mov	r2, r6
  403ffa:	4651      	mov	r1, sl
  403ffc:	4648      	mov	r0, r9
  403ffe:	4798      	blx	r3
  404000:	e7dd      	b.n	403fbe <Socket_ReadSocketData+0x46>
  404002:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  404006:	4806      	ldr	r0, [pc, #24]	; (404020 <Socket_ReadSocketData+0xa8>)
  404008:	4d06      	ldr	r5, [pc, #24]	; (404024 <Socket_ReadSocketData+0xac>)
  40400a:	47a8      	blx	r5
  40400c:	4621      	mov	r1, r4
  40400e:	4806      	ldr	r0, [pc, #24]	; (404028 <Socket_ReadSocketData+0xb0>)
  404010:	47a8      	blx	r5
  404012:	4806      	ldr	r0, [pc, #24]	; (40402c <Socket_ReadSocketData+0xb4>)
  404014:	47a8      	blx	r5
	}
}
  404016:	e7c7      	b.n	403fa8 <Socket_ReadSocketData+0x30>
  404018:	2040ca60 	.word	0x2040ca60
  40401c:	2040cb10 	.word	0x2040cb10
  404020:	00408ec0 	.word	0x00408ec0
  404024:	00405c79 	.word	0x00405c79
  404028:	004097f8 	.word	0x004097f8
  40402c:	00408c18 	.word	0x00408c18
  404030:	004026b1 	.word	0x004026b1

00404034 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  404034:	b5f0      	push	{r4, r5, r6, r7, lr}
  404036:	b099      	sub	sp, #100	; 0x64
  404038:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  40403a:	2841      	cmp	r0, #65	; 0x41
  40403c:	d049      	beq.n	4040d2 <m2m_ip_cb+0x9e>
  40403e:	460d      	mov	r5, r1
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  404040:	2842      	cmp	r0, #66	; 0x42
  404042:	d05f      	beq.n	404104 <m2m_ip_cb+0xd0>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  404044:	2843      	cmp	r0, #67	; 0x43
  404046:	d075      	beq.n	404134 <m2m_ip_cb+0x100>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  404048:	2844      	cmp	r0, #68	; 0x44
  40404a:	f000 80b0 	beq.w	4041ae <m2m_ip_cb+0x17a>
  40404e:	284b      	cmp	r0, #75	; 0x4b
  404050:	f000 80ad 	beq.w	4041ae <m2m_ip_cb+0x17a>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  404054:	284a      	cmp	r0, #74	; 0x4a
  404056:	f000 80cc 	beq.w	4041f2 <m2m_ip_cb+0x1be>
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  40405a:	f1a0 0346 	sub.w	r3, r0, #70	; 0x46
  40405e:	b2db      	uxtb	r3, r3
  404060:	2b07      	cmp	r3, #7
  404062:	f200 80f4 	bhi.w	40424e <m2m_ip_cb+0x21a>
  404066:	2285      	movs	r2, #133	; 0x85
  404068:	fa22 f303 	lsr.w	r3, r2, r3
  40406c:	f013 0f01 	tst.w	r3, #1
  404070:	f000 80ed 	beq.w	40424e <m2m_ip_cb+0x21a>
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  404074:	2848      	cmp	r0, #72	; 0x48
  404076:	bf14      	ite	ne
  404078:	2706      	movne	r7, #6
  40407a:	2709      	moveq	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  40407c:	2300      	movs	r3, #0
  40407e:	2210      	movs	r2, #16
  404080:	a903      	add	r1, sp, #12
  404082:	4620      	mov	r0, r4
  404084:	4e93      	ldr	r6, [pc, #588]	; (4042d4 <m2m_ip_cb+0x2a0>)
  404086:	47b0      	blx	r6
  404088:	2800      	cmp	r0, #0
  40408a:	f040 80b0 	bne.w	4041ee <m2m_ip_cb+0x1ba>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  40408e:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  404092:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  404096:	4a90      	ldr	r2, [pc, #576]	; (4042d8 <m2m_ip_cb+0x2a4>)
  404098:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  40409c:	2300      	movs	r3, #0
  40409e:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  4040a0:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  4040a4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  4040a8:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  4040ac:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  4040b0:	9e04      	ldr	r6, [sp, #16]
  4040b2:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  4040b4:	88d2      	ldrh	r2, [r2, #6]
  4040b6:	b292      	uxth	r2, r2
  4040b8:	4291      	cmp	r1, r2
  4040ba:	f000 80ac 	beq.w	404216 <m2m_ip_cb+0x1e2>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  4040be:	2d10      	cmp	r5, #16
  4040c0:	f240 8095 	bls.w	4041ee <m2m_ip_cb+0x1ba>
					hif_receive(0, NULL, 0, 1);
  4040c4:	2301      	movs	r3, #1
  4040c6:	2200      	movs	r2, #0
  4040c8:	4611      	mov	r1, r2
  4040ca:	4610      	mov	r0, r2
  4040cc:	4c81      	ldr	r4, [pc, #516]	; (4042d4 <m2m_ip_cb+0x2a0>)
  4040ce:	47a0      	blx	r4
	{
  4040d0:	e08d      	b.n	4041ee <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  4040d2:	2300      	movs	r3, #0
  4040d4:	2204      	movs	r2, #4
  4040d6:	a907      	add	r1, sp, #28
  4040d8:	4620      	mov	r0, r4
  4040da:	4c7e      	ldr	r4, [pc, #504]	; (4042d4 <m2m_ip_cb+0x2a0>)
  4040dc:	47a0      	blx	r4
  4040de:	2800      	cmp	r0, #0
  4040e0:	f040 8085 	bne.w	4041ee <m2m_ip_cb+0x1ba>
			strBind.status = strBindReply.s8Status;
  4040e4:	f89d 301d 	ldrb.w	r3, [sp, #29]
  4040e8:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  4040ec:	4b7b      	ldr	r3, [pc, #492]	; (4042dc <m2m_ip_cb+0x2a8>)
  4040ee:	681b      	ldr	r3, [r3, #0]
  4040f0:	2b00      	cmp	r3, #0
  4040f2:	d07c      	beq.n	4041ee <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  4040f4:	4b79      	ldr	r3, [pc, #484]	; (4042dc <m2m_ip_cb+0x2a8>)
  4040f6:	681b      	ldr	r3, [r3, #0]
  4040f8:	aa03      	add	r2, sp, #12
  4040fa:	2101      	movs	r1, #1
  4040fc:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  404100:	4798      	blx	r3
  404102:	e074      	b.n	4041ee <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  404104:	2300      	movs	r3, #0
  404106:	2204      	movs	r2, #4
  404108:	a907      	add	r1, sp, #28
  40410a:	4620      	mov	r0, r4
  40410c:	4c71      	ldr	r4, [pc, #452]	; (4042d4 <m2m_ip_cb+0x2a0>)
  40410e:	47a0      	blx	r4
  404110:	2800      	cmp	r0, #0
  404112:	d16c      	bne.n	4041ee <m2m_ip_cb+0x1ba>
			strListen.status = strListenReply.s8Status;
  404114:	f89d 301d 	ldrb.w	r3, [sp, #29]
  404118:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  40411c:	4b6f      	ldr	r3, [pc, #444]	; (4042dc <m2m_ip_cb+0x2a8>)
  40411e:	681b      	ldr	r3, [r3, #0]
  404120:	2b00      	cmp	r3, #0
  404122:	d064      	beq.n	4041ee <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  404124:	4b6d      	ldr	r3, [pc, #436]	; (4042dc <m2m_ip_cb+0x2a8>)
  404126:	681b      	ldr	r3, [r3, #0]
  404128:	aa03      	add	r2, sp, #12
  40412a:	2102      	movs	r1, #2
  40412c:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  404130:	4798      	blx	r3
  404132:	e05c      	b.n	4041ee <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  404134:	2300      	movs	r3, #0
  404136:	220c      	movs	r2, #12
  404138:	eb0d 0102 	add.w	r1, sp, r2
  40413c:	4620      	mov	r0, r4
  40413e:	4c65      	ldr	r4, [pc, #404]	; (4042d4 <m2m_ip_cb+0x2a0>)
  404140:	47a0      	blx	r4
  404142:	2800      	cmp	r0, #0
  404144:	d153      	bne.n	4041ee <m2m_ip_cb+0x1ba>
			if(strAcceptReply.sConnectedSock >= 0)
  404146:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  40414a:	2b00      	cmp	r3, #0
  40414c:	db19      	blt.n	404182 <m2m_ip_cb+0x14e>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  40414e:	4a62      	ldr	r2, [pc, #392]	; (4042d8 <m2m_ip_cb+0x2a4>)
  404150:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  404154:	2100      	movs	r1, #0
  404156:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  404158:	2101      	movs	r1, #1
  40415a:	7291      	strb	r1, [r2, #10]
				++gu16SessionID;
  40415c:	4960      	ldr	r1, [pc, #384]	; (4042e0 <m2m_ip_cb+0x2ac>)
  40415e:	880a      	ldrh	r2, [r1, #0]
  404160:	3201      	adds	r2, #1
  404162:	b292      	uxth	r2, r2
  404164:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  404166:	880a      	ldrh	r2, [r1, #0]
  404168:	b292      	uxth	r2, r2
  40416a:	b91a      	cbnz	r2, 404174 <m2m_ip_cb+0x140>
					++gu16SessionID;
  40416c:	880a      	ldrh	r2, [r1, #0]
  40416e:	3201      	adds	r2, #1
  404170:	b292      	uxth	r2, r2
  404172:	800a      	strh	r2, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  404174:	4a5a      	ldr	r2, [pc, #360]	; (4042e0 <m2m_ip_cb+0x2ac>)
  404176:	8811      	ldrh	r1, [r2, #0]
  404178:	b289      	uxth	r1, r1
  40417a:	4a57      	ldr	r2, [pc, #348]	; (4042d8 <m2m_ip_cb+0x2a4>)
  40417c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  404180:	80d1      	strh	r1, [r2, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
  404182:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  404186:	2302      	movs	r3, #2
  404188:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  40418c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  404190:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  404194:	9b04      	ldr	r3, [sp, #16]
  404196:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  404198:	4b50      	ldr	r3, [pc, #320]	; (4042dc <m2m_ip_cb+0x2a8>)
  40419a:	681b      	ldr	r3, [r3, #0]
  40419c:	b33b      	cbz	r3, 4041ee <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  40419e:	4b4f      	ldr	r3, [pc, #316]	; (4042dc <m2m_ip_cb+0x2a8>)
  4041a0:	681b      	ldr	r3, [r3, #0]
  4041a2:	aa07      	add	r2, sp, #28
  4041a4:	2104      	movs	r1, #4
  4041a6:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  4041aa:	4798      	blx	r3
  4041ac:	e01f      	b.n	4041ee <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  4041ae:	2300      	movs	r3, #0
  4041b0:	2204      	movs	r2, #4
  4041b2:	a907      	add	r1, sp, #28
  4041b4:	4620      	mov	r0, r4
  4041b6:	4c47      	ldr	r4, [pc, #284]	; (4042d4 <m2m_ip_cb+0x2a0>)
  4041b8:	47a0      	blx	r4
  4041ba:	b9c0      	cbnz	r0, 4041ee <m2m_ip_cb+0x1ba>
			strConnMsg.sock		= strConnectReply.sock;
  4041bc:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4041c0:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  4041c4:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  4041c8:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  4041cc:	b93b      	cbnz	r3, 4041de <m2m_ip_cb+0x1aa>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  4041ce:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  4041d2:	3b08      	subs	r3, #8
  4041d4:	b29b      	uxth	r3, r3
  4041d6:	4a40      	ldr	r2, [pc, #256]	; (4042d8 <m2m_ip_cb+0x2a4>)
  4041d8:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4041dc:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
  4041de:	4b3f      	ldr	r3, [pc, #252]	; (4042dc <m2m_ip_cb+0x2a8>)
  4041e0:	681b      	ldr	r3, [r3, #0]
  4041e2:	b123      	cbz	r3, 4041ee <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  4041e4:	4b3d      	ldr	r3, [pc, #244]	; (4042dc <m2m_ip_cb+0x2a8>)
  4041e6:	681b      	ldr	r3, [r3, #0]
  4041e8:	aa03      	add	r2, sp, #12
  4041ea:	2105      	movs	r1, #5
  4041ec:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  4041ee:	b019      	add	sp, #100	; 0x64
  4041f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  4041f2:	2300      	movs	r3, #0
  4041f4:	2244      	movs	r2, #68	; 0x44
  4041f6:	a907      	add	r1, sp, #28
  4041f8:	4620      	mov	r0, r4
  4041fa:	4c36      	ldr	r4, [pc, #216]	; (4042d4 <m2m_ip_cb+0x2a0>)
  4041fc:	47a0      	blx	r4
  4041fe:	2800      	cmp	r0, #0
  404200:	d1f5      	bne.n	4041ee <m2m_ip_cb+0x1ba>
			if(gpfAppResolveCb)
  404202:	4b38      	ldr	r3, [pc, #224]	; (4042e4 <m2m_ip_cb+0x2b0>)
  404204:	681b      	ldr	r3, [r3, #0]
  404206:	2b00      	cmp	r3, #0
  404208:	d0f1      	beq.n	4041ee <m2m_ip_cb+0x1ba>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  40420a:	4b36      	ldr	r3, [pc, #216]	; (4042e4 <m2m_ip_cb+0x2b0>)
  40420c:	681b      	ldr	r3, [r3, #0]
  40420e:	9917      	ldr	r1, [sp, #92]	; 0x5c
  404210:	a807      	add	r0, sp, #28
  404212:	4798      	blx	r3
  404214:	e7eb      	b.n	4041ee <m2m_ip_cb+0x1ba>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  404216:	f1be 0f00 	cmp.w	lr, #0
  40421a:	dd01      	ble.n	404220 <m2m_ip_cb+0x1ec>
  40421c:	45ae      	cmp	lr, r5
  40421e:	db0d      	blt.n	40423c <m2m_ip_cb+0x208>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  404220:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  404224:	2300      	movs	r3, #0
  404226:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  404228:	4b2c      	ldr	r3, [pc, #176]	; (4042dc <m2m_ip_cb+0x2a8>)
  40422a:	681b      	ldr	r3, [r3, #0]
  40422c:	2b00      	cmp	r3, #0
  40422e:	d0de      	beq.n	4041ee <m2m_ip_cb+0x1ba>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  404230:	4b2a      	ldr	r3, [pc, #168]	; (4042dc <m2m_ip_cb+0x2a8>)
  404232:	681b      	ldr	r3, [r3, #0]
  404234:	aa07      	add	r2, sp, #28
  404236:	4639      	mov	r1, r7
  404238:	4798      	blx	r3
  40423a:	e7d8      	b.n	4041ee <m2m_ip_cb+0x1ba>
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  40423c:	fa1f f28e 	uxth.w	r2, lr
  404240:	9200      	str	r2, [sp, #0]
  404242:	4423      	add	r3, r4
  404244:	463a      	mov	r2, r7
  404246:	a907      	add	r1, sp, #28
  404248:	4c27      	ldr	r4, [pc, #156]	; (4042e8 <m2m_ip_cb+0x2b4>)
  40424a:	47a0      	blx	r4
  40424c:	e7cf      	b.n	4041ee <m2m_ip_cb+0x1ba>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  40424e:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
  404252:	2b45      	cmp	r3, #69	; 0x45
  404254:	d019      	beq.n	40428a <m2m_ip_cb+0x256>
  404256:	284c      	cmp	r0, #76	; 0x4c
  404258:	d017      	beq.n	40428a <m2m_ip_cb+0x256>
	else if(u8OpCode == SOCKET_CMD_PING)
  40425a:	2852      	cmp	r0, #82	; 0x52
  40425c:	d1c7      	bne.n	4041ee <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  40425e:	2301      	movs	r3, #1
  404260:	2214      	movs	r2, #20
  404262:	a907      	add	r1, sp, #28
  404264:	4620      	mov	r0, r4
  404266:	4c1b      	ldr	r4, [pc, #108]	; (4042d4 <m2m_ip_cb+0x2a0>)
  404268:	47a0      	blx	r4
  40426a:	2800      	cmp	r0, #0
  40426c:	d1bf      	bne.n	4041ee <m2m_ip_cb+0x1ba>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  40426e:	4b1f      	ldr	r3, [pc, #124]	; (4042ec <m2m_ip_cb+0x2b8>)
  404270:	9a08      	ldr	r2, [sp, #32]
  404272:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  404274:	681b      	ldr	r3, [r3, #0]
  404276:	2b00      	cmp	r3, #0
  404278:	d0b9      	beq.n	4041ee <m2m_ip_cb+0x1ba>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  40427a:	4b1c      	ldr	r3, [pc, #112]	; (4042ec <m2m_ip_cb+0x2b8>)
  40427c:	681b      	ldr	r3, [r3, #0]
  40427e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  404282:	9909      	ldr	r1, [sp, #36]	; 0x24
  404284:	9807      	ldr	r0, [sp, #28]
  404286:	4798      	blx	r3
}
  404288:	e7b1      	b.n	4041ee <m2m_ip_cb+0x1ba>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  40428a:	2847      	cmp	r0, #71	; 0x47
  40428c:	bf14      	ite	ne
  40428e:	2507      	movne	r5, #7
  404290:	2508      	moveq	r5, #8
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  404292:	2300      	movs	r3, #0
  404294:	2208      	movs	r2, #8
  404296:	a907      	add	r1, sp, #28
  404298:	4620      	mov	r0, r4
  40429a:	4c0e      	ldr	r4, [pc, #56]	; (4042d4 <m2m_ip_cb+0x2a0>)
  40429c:	47a0      	blx	r4
  40429e:	2800      	cmp	r0, #0
  4042a0:	d1a5      	bne.n	4041ee <m2m_ip_cb+0x1ba>
			sock = strReply.sock;
  4042a2:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  4042a6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  4042aa:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  4042ae:	f8ad 300c 	strh.w	r3, [sp, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
  4042b2:	4b09      	ldr	r3, [pc, #36]	; (4042d8 <m2m_ip_cb+0x2a4>)
  4042b4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4042b8:	88db      	ldrh	r3, [r3, #6]
  4042ba:	b29b      	uxth	r3, r3
  4042bc:	429a      	cmp	r2, r3
  4042be:	d196      	bne.n	4041ee <m2m_ip_cb+0x1ba>
				if(gpfAppSocketCb)
  4042c0:	4b06      	ldr	r3, [pc, #24]	; (4042dc <m2m_ip_cb+0x2a8>)
  4042c2:	681b      	ldr	r3, [r3, #0]
  4042c4:	2b00      	cmp	r3, #0
  4042c6:	d092      	beq.n	4041ee <m2m_ip_cb+0x1ba>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  4042c8:	4b04      	ldr	r3, [pc, #16]	; (4042dc <m2m_ip_cb+0x2a8>)
  4042ca:	681b      	ldr	r3, [r3, #0]
  4042cc:	aa03      	add	r2, sp, #12
  4042ce:	4629      	mov	r1, r5
  4042d0:	4798      	blx	r3
	{
  4042d2:	e78c      	b.n	4041ee <m2m_ip_cb+0x1ba>
  4042d4:	004026b1 	.word	0x004026b1
  4042d8:	2040ca60 	.word	0x2040ca60
  4042dc:	2040cb10 	.word	0x2040cb10
  4042e0:	2040c35a 	.word	0x2040c35a
  4042e4:	2040cb18 	.word	0x2040cb18
  4042e8:	00403f79 	.word	0x00403f79
  4042ec:	2040cb14 	.word	0x2040cb14

004042f0 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  4042f0:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  4042f2:	4b0a      	ldr	r3, [pc, #40]	; (40431c <socketInit+0x2c>)
  4042f4:	781b      	ldrb	r3, [r3, #0]
  4042f6:	b103      	cbz	r3, 4042fa <socketInit+0xa>
  4042f8:	bd08      	pop	{r3, pc}
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  4042fa:	22b0      	movs	r2, #176	; 0xb0
  4042fc:	2100      	movs	r1, #0
  4042fe:	4808      	ldr	r0, [pc, #32]	; (404320 <socketInit+0x30>)
  404300:	4b08      	ldr	r3, [pc, #32]	; (404324 <socketInit+0x34>)
  404302:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  404304:	4908      	ldr	r1, [pc, #32]	; (404328 <socketInit+0x38>)
  404306:	2002      	movs	r0, #2
  404308:	4b08      	ldr	r3, [pc, #32]	; (40432c <socketInit+0x3c>)
  40430a:	4798      	blx	r3
		gbSocketInit=1;
  40430c:	2201      	movs	r2, #1
  40430e:	4b03      	ldr	r3, [pc, #12]	; (40431c <socketInit+0x2c>)
  404310:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  404312:	2200      	movs	r2, #0
  404314:	4b06      	ldr	r3, [pc, #24]	; (404330 <socketInit+0x40>)
  404316:	801a      	strh	r2, [r3, #0]
	}
}
  404318:	e7ee      	b.n	4042f8 <socketInit+0x8>
  40431a:	bf00      	nop
  40431c:	2040c359 	.word	0x2040c359
  404320:	2040ca60 	.word	0x2040ca60
  404324:	0040205d 	.word	0x0040205d
  404328:	00404035 	.word	0x00404035
  40432c:	004027c5 	.word	0x004027c5
  404330:	2040c35a 	.word	0x2040c35a

00404334 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  404334:	4b02      	ldr	r3, [pc, #8]	; (404340 <registerSocketCallback+0xc>)
  404336:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  404338:	4b02      	ldr	r3, [pc, #8]	; (404344 <registerSocketCallback+0x10>)
  40433a:	6019      	str	r1, [r3, #0]
  40433c:	4770      	bx	lr
  40433e:	bf00      	nop
  404340:	2040cb10 	.word	0x2040cb10
  404344:	2040cb18 	.word	0x2040cb18

00404348 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  404348:	b5f0      	push	{r4, r5, r6, r7, lr}
  40434a:	b087      	sub	sp, #28
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  40434c:	2802      	cmp	r0, #2
  40434e:	d158      	bne.n	404402 <socket+0xba>
	{
		if(u8Type == SOCK_STREAM)
  404350:	2901      	cmp	r1, #1
  404352:	d059      	beq.n	404408 <socket+0xc0>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  404354:	2902      	cmp	r1, #2
  404356:	d116      	bne.n	404386 <socket+0x3e>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  404358:	260b      	movs	r6, #11
			u8Count = TCP_SOCK_MAX;
  40435a:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  40435c:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  40435e:	4b2e      	ldr	r3, [pc, #184]	; (404418 <socket+0xd0>)
  404360:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404364:	7a9b      	ldrb	r3, [r3, #10]
  404366:	2b00      	cmp	r3, #0
  404368:	d051      	beq.n	40440e <socket+0xc6>
  40436a:	1c63      	adds	r3, r4, #1
  40436c:	b2db      	uxtb	r3, r3
  40436e:	4f2a      	ldr	r7, [pc, #168]	; (404418 <socket+0xd0>)
		for(;u8Count < u8SocketCount; u8Count ++)
  404370:	b2dc      	uxtb	r4, r3
  404372:	42b4      	cmp	r4, r6
  404374:	d240      	bcs.n	4043f8 <socket+0xb0>
			pstrSock = &gastrSockets[u8Count];
  404376:	461d      	mov	r5, r3
			if(pstrSock->bIsUsed == 0)
  404378:	eb07 1103 	add.w	r1, r7, r3, lsl #4
  40437c:	7a89      	ldrb	r1, [r1, #10]
  40437e:	1c58      	adds	r0, r3, #1
  404380:	b121      	cbz	r1, 40438c <socket+0x44>
  404382:	4603      	mov	r3, r0
  404384:	e7f4      	b.n	404370 <socket+0x28>
			return sock;
  404386:	f04f 34ff 	mov.w	r4, #4294967295
  40438a:	e037      	b.n	4043fc <socket+0xb4>
			pstrSock = &gastrSockets[u8Count];
  40438c:	4822      	ldr	r0, [pc, #136]	; (404418 <socket+0xd0>)
  40438e:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  404392:	4616      	mov	r6, r2
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  404394:	2210      	movs	r2, #16
  404396:	2100      	movs	r1, #0
  404398:	4b20      	ldr	r3, [pc, #128]	; (40441c <socket+0xd4>)
  40439a:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  40439c:	4b1e      	ldr	r3, [pc, #120]	; (404418 <socket+0xd0>)
  40439e:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  4043a2:	2201      	movs	r2, #1
  4043a4:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  4043a6:	4a1e      	ldr	r2, [pc, #120]	; (404420 <socket+0xd8>)
  4043a8:	8813      	ldrh	r3, [r2, #0]
  4043aa:	3301      	adds	r3, #1
  4043ac:	b29b      	uxth	r3, r3
  4043ae:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  4043b0:	8813      	ldrh	r3, [r2, #0]
  4043b2:	b29b      	uxth	r3, r3
  4043b4:	b91b      	cbnz	r3, 4043be <socket+0x76>
					++gu16SessionID;
  4043b6:	8813      	ldrh	r3, [r2, #0]
  4043b8:	3301      	adds	r3, #1
  4043ba:	b29b      	uxth	r3, r3
  4043bc:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  4043be:	4b18      	ldr	r3, [pc, #96]	; (404420 <socket+0xd8>)
  4043c0:	881a      	ldrh	r2, [r3, #0]
  4043c2:	b292      	uxth	r2, r2
  4043c4:	4b14      	ldr	r3, [pc, #80]	; (404418 <socket+0xd0>)
  4043c6:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  4043ca:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  4043cc:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  4043ce:	f016 0f01 	tst.w	r6, #1
  4043d2:	d013      	beq.n	4043fc <socket+0xb4>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  4043d4:	aa06      	add	r2, sp, #24
  4043d6:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  4043da:	4b0f      	ldr	r3, [pc, #60]	; (404418 <socket+0xd0>)
  4043dc:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  4043e0:	2321      	movs	r3, #33	; 0x21
  4043e2:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  4043e4:	2300      	movs	r3, #0
  4043e6:	9302      	str	r3, [sp, #8]
  4043e8:	9301      	str	r3, [sp, #4]
  4043ea:	9300      	str	r3, [sp, #0]
  4043ec:	2304      	movs	r3, #4
  4043ee:	2150      	movs	r1, #80	; 0x50
  4043f0:	2002      	movs	r0, #2
  4043f2:	4d0c      	ldr	r5, [pc, #48]	; (404424 <socket+0xdc>)
  4043f4:	47a8      	blx	r5
  4043f6:	e001      	b.n	4043fc <socket+0xb4>
	SOCKET		sock = -1;
  4043f8:	f04f 34ff 	mov.w	r4, #4294967295
				break;
			}
		}
	}
	return sock;
}
  4043fc:	4620      	mov	r0, r4
  4043fe:	b007      	add	sp, #28
  404400:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SOCKET		sock = -1;
  404402:	f04f 34ff 	mov.w	r4, #4294967295
  404406:	e7f9      	b.n	4043fc <socket+0xb4>
			u8SocketCount = TCP_SOCK_MAX;
  404408:	2607      	movs	r6, #7
			u8Count = 0;
  40440a:	2400      	movs	r4, #0
  40440c:	e7a6      	b.n	40435c <socket+0x14>
			pstrSock = &gastrSockets[u8Count];
  40440e:	4802      	ldr	r0, [pc, #8]	; (404418 <socket+0xd0>)
  404410:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404414:	e7bd      	b.n	404392 <socket+0x4a>
  404416:	bf00      	nop
  404418:	2040ca60 	.word	0x2040ca60
  40441c:	0040205d 	.word	0x0040205d
  404420:	2040c35a 	.word	0x2040c35a
  404424:	004021c1 	.word	0x004021c1

00404428 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  404428:	b530      	push	{r4, r5, lr}
  40442a:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  40442c:	1e04      	subs	r4, r0, #0
  40442e:	db36      	blt.n	40449e <connect+0x76>
  404430:	2900      	cmp	r1, #0
  404432:	d034      	beq.n	40449e <connect+0x76>
  404434:	4b1d      	ldr	r3, [pc, #116]	; (4044ac <connect+0x84>)
  404436:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  40443a:	7a9b      	ldrb	r3, [r3, #10]
  40443c:	b2db      	uxtb	r3, r3
  40443e:	2a00      	cmp	r2, #0
  404440:	d030      	beq.n	4044a4 <connect+0x7c>
  404442:	2b01      	cmp	r3, #1
  404444:	d12e      	bne.n	4044a4 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  404446:	4b19      	ldr	r3, [pc, #100]	; (4044ac <connect+0x84>)
  404448:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  40444c:	7adb      	ldrb	r3, [r3, #11]
  40444e:	f013 0f01 	tst.w	r3, #1
  404452:	d022      	beq.n	40449a <connect+0x72>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  404454:	4b15      	ldr	r3, [pc, #84]	; (4044ac <connect+0x84>)
  404456:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  40445a:	7adb      	ldrb	r3, [r3, #11]
  40445c:	f88d 301d 	strb.w	r3, [sp, #29]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  404460:	254b      	movs	r5, #75	; 0x4b
		}
		strConnect.sock = sock;
  404462:	f88d 401c 	strb.w	r4, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  404466:	2208      	movs	r2, #8
  404468:	a805      	add	r0, sp, #20
  40446a:	4b11      	ldr	r3, [pc, #68]	; (4044b0 <connect+0x88>)
  40446c:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  40446e:	480f      	ldr	r0, [pc, #60]	; (4044ac <connect+0x84>)
  404470:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404474:	88c3      	ldrh	r3, [r0, #6]
  404476:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  40447a:	2300      	movs	r3, #0
  40447c:	9302      	str	r3, [sp, #8]
  40447e:	9301      	str	r3, [sp, #4]
  404480:	9300      	str	r3, [sp, #0]
  404482:	230c      	movs	r3, #12
  404484:	aa05      	add	r2, sp, #20
  404486:	4629      	mov	r1, r5
  404488:	2002      	movs	r0, #2
  40448a:	4c0a      	ldr	r4, [pc, #40]	; (4044b4 <connect+0x8c>)
  40448c:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  40448e:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  404490:	bf18      	it	ne
  404492:	f06f 0008 	mvnne.w	r0, #8
		}
	}
	return s8Ret;
}
  404496:	b009      	add	sp, #36	; 0x24
  404498:	bd30      	pop	{r4, r5, pc}
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  40449a:	2544      	movs	r5, #68	; 0x44
  40449c:	e7e1      	b.n	404462 <connect+0x3a>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  40449e:	f06f 0005 	mvn.w	r0, #5
  4044a2:	e7f8      	b.n	404496 <connect+0x6e>
  4044a4:	f06f 0005 	mvn.w	r0, #5
  4044a8:	e7f5      	b.n	404496 <connect+0x6e>
  4044aa:	bf00      	nop
  4044ac:	2040ca60 	.word	0x2040ca60
  4044b0:	00402049 	.word	0x00402049
  4044b4:	004021c1 	.word	0x004021c1

004044b8 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  4044b8:	b530      	push	{r4, r5, lr}
  4044ba:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  4044bc:	460c      	mov	r4, r1
  4044be:	3100      	adds	r1, #0
  4044c0:	bf18      	it	ne
  4044c2:	2101      	movne	r1, #1
  4044c4:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  4044c8:	bf88      	it	hi
  4044ca:	2100      	movhi	r1, #0
  4044cc:	2900      	cmp	r1, #0
  4044ce:	d037      	beq.n	404540 <send+0x88>
  4044d0:	2800      	cmp	r0, #0
  4044d2:	db35      	blt.n	404540 <send+0x88>
  4044d4:	4b1d      	ldr	r3, [pc, #116]	; (40454c <send+0x94>)
  4044d6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4044da:	7a9b      	ldrb	r3, [r3, #10]
  4044dc:	b2db      	uxtb	r3, r3
  4044de:	2b01      	cmp	r3, #1
  4044e0:	d131      	bne.n	404546 <send+0x8e>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  4044e2:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  4044e6:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  4044ea:	4b18      	ldr	r3, [pc, #96]	; (40454c <send+0x94>)
  4044ec:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4044f0:	88db      	ldrh	r3, [r3, #6]
  4044f2:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  4044f6:	2807      	cmp	r0, #7
  4044f8:	bfb4      	ite	lt
  4044fa:	2550      	movlt	r5, #80	; 0x50
  4044fc:	2544      	movge	r5, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  4044fe:	4b13      	ldr	r3, [pc, #76]	; (40454c <send+0x94>)
  404500:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404504:	7adb      	ldrb	r3, [r3, #11]
  404506:	f013 0f01 	tst.w	r3, #1
  40450a:	d017      	beq.n	40453c <send+0x84>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  40450c:	4b0f      	ldr	r3, [pc, #60]	; (40454c <send+0x94>)
  40450e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  404512:	8905      	ldrh	r5, [r0, #8]
  404514:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  404516:	214c      	movs	r1, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  404518:	9502      	str	r5, [sp, #8]
  40451a:	9201      	str	r2, [sp, #4]
  40451c:	9400      	str	r4, [sp, #0]
  40451e:	2310      	movs	r3, #16
  404520:	eb0d 0203 	add.w	r2, sp, r3
  404524:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  404528:	2002      	movs	r0, #2
  40452a:	4c09      	ldr	r4, [pc, #36]	; (404550 <send+0x98>)
  40452c:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  40452e:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  404530:	bf0c      	ite	eq
  404532:	2000      	moveq	r0, #0
  404534:	f06f 000d 	mvnne.w	r0, #13
		}
	}
	return s16Ret;
}
  404538:	b009      	add	sp, #36	; 0x24
  40453a:	bd30      	pop	{r4, r5, pc}
		u8Cmd			= SOCKET_CMD_SEND;
  40453c:	2145      	movs	r1, #69	; 0x45
  40453e:	e7eb      	b.n	404518 <send+0x60>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404540:	f06f 0005 	mvn.w	r0, #5
  404544:	e7f8      	b.n	404538 <send+0x80>
  404546:	f06f 0005 	mvn.w	r0, #5
  40454a:	e7f5      	b.n	404538 <send+0x80>
  40454c:	2040ca60 	.word	0x2040ca60
  404550:	004021c1 	.word	0x004021c1

00404554 <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404554:	2900      	cmp	r1, #0
  404556:	bf18      	it	ne
  404558:	2a00      	cmpne	r2, #0
  40455a:	d044      	beq.n	4045e6 <recv+0x92>
{
  40455c:	b570      	push	{r4, r5, r6, lr}
  40455e:	b086      	sub	sp, #24
  404560:	460e      	mov	r6, r1
  404562:	4615      	mov	r5, r2
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404564:	2800      	cmp	r0, #0
  404566:	db36      	blt.n	4045d6 <recv+0x82>
  404568:	4a20      	ldr	r2, [pc, #128]	; (4045ec <recv+0x98>)
  40456a:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  40456e:	7a92      	ldrb	r2, [r2, #10]
  404570:	b2d2      	uxtb	r2, r2
  404572:	2a01      	cmp	r2, #1
  404574:	d132      	bne.n	4045dc <recv+0x88>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  404576:	4c1d      	ldr	r4, [pc, #116]	; (4045ec <recv+0x98>)
  404578:	0101      	lsls	r1, r0, #4
  40457a:	1862      	adds	r2, r4, r1
  40457c:	5066      	str	r6, [r4, r1]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  40457e:	8095      	strh	r5, [r2, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  404580:	7b12      	ldrb	r2, [r2, #12]
  404582:	2a00      	cmp	r2, #0
  404584:	d12d      	bne.n	4045e2 <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  404586:	eb04 1200 	add.w	r2, r4, r0, lsl #4
  40458a:	2101      	movs	r1, #1
  40458c:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  40458e:	7ad2      	ldrb	r2, [r2, #11]
  404590:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  404592:	2a00      	cmp	r2, #0
  404594:	bf0c      	ite	eq
  404596:	2146      	moveq	r1, #70	; 0x46
  404598:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  40459a:	b9d3      	cbnz	r3, 4045d2 <recv+0x7e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  40459c:	f04f 33ff 	mov.w	r3, #4294967295
  4045a0:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
  4045a2:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  4045a6:	4b11      	ldr	r3, [pc, #68]	; (4045ec <recv+0x98>)
  4045a8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  4045ac:	88c3      	ldrh	r3, [r0, #6]
  4045ae:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  4045b2:	2300      	movs	r3, #0
  4045b4:	9302      	str	r3, [sp, #8]
  4045b6:	9301      	str	r3, [sp, #4]
  4045b8:	9300      	str	r3, [sp, #0]
  4045ba:	2308      	movs	r3, #8
  4045bc:	aa04      	add	r2, sp, #16
  4045be:	2002      	movs	r0, #2
  4045c0:	4c0b      	ldr	r4, [pc, #44]	; (4045f0 <recv+0x9c>)
  4045c2:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  4045c4:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  4045c6:	bf0c      	ite	eq
  4045c8:	2000      	moveq	r0, #0
  4045ca:	f06f 000d 	mvnne.w	r0, #13
			}
		}
	}
	return s16Ret;
}
  4045ce:	b006      	add	sp, #24
  4045d0:	bd70      	pop	{r4, r5, r6, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  4045d2:	9304      	str	r3, [sp, #16]
  4045d4:	e7e5      	b.n	4045a2 <recv+0x4e>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  4045d6:	f06f 0005 	mvn.w	r0, #5
  4045da:	e7f8      	b.n	4045ce <recv+0x7a>
  4045dc:	f06f 0005 	mvn.w	r0, #5
  4045e0:	e7f5      	b.n	4045ce <recv+0x7a>
		s16Ret = SOCK_ERR_NO_ERROR;
  4045e2:	2000      	movs	r0, #0
  4045e4:	e7f3      	b.n	4045ce <recv+0x7a>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  4045e6:	f06f 0005 	mvn.w	r0, #5
}
  4045ea:	4770      	bx	lr
  4045ec:	2040ca60 	.word	0x2040ca60
  4045f0:	004021c1 	.word	0x004021c1

004045f4 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  4045f4:	b530      	push	{r4, r5, lr}
  4045f6:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  4045f8:	1e04      	subs	r4, r0, #0
  4045fa:	db2f      	blt.n	40465c <close+0x68>
  4045fc:	4b1a      	ldr	r3, [pc, #104]	; (404668 <close+0x74>)
  4045fe:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404602:	7a9b      	ldrb	r3, [r3, #10]
  404604:	b2db      	uxtb	r3, r3
  404606:	2b01      	cmp	r3, #1
  404608:	d12b      	bne.n	404662 <close+0x6e>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  40460a:	f88d 4014 	strb.w	r4, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  40460e:	4b16      	ldr	r3, [pc, #88]	; (404668 <close+0x74>)
  404610:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404614:	88da      	ldrh	r2, [r3, #6]
  404616:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  40461a:	2200      	movs	r2, #0
  40461c:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  40461e:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  404620:	7adb      	ldrb	r3, [r3, #11]
  404622:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  404626:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  404628:	9202      	str	r2, [sp, #8]
  40462a:	9201      	str	r2, [sp, #4]
  40462c:	9200      	str	r2, [sp, #0]
  40462e:	f04f 0304 	mov.w	r3, #4
  404632:	aa05      	add	r2, sp, #20
  404634:	bf0c      	ite	eq
  404636:	2149      	moveq	r1, #73	; 0x49
  404638:	214e      	movne	r1, #78	; 0x4e
  40463a:	2002      	movs	r0, #2
  40463c:	4d0b      	ldr	r5, [pc, #44]	; (40466c <close+0x78>)
  40463e:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  404640:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  404642:	bf18      	it	ne
  404644:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  404648:	2210      	movs	r2, #16
  40464a:	2100      	movs	r1, #0
  40464c:	4806      	ldr	r0, [pc, #24]	; (404668 <close+0x74>)
  40464e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404652:	4b07      	ldr	r3, [pc, #28]	; (404670 <close+0x7c>)
  404654:	4798      	blx	r3
	}
	return s8Ret;
}
  404656:	4628      	mov	r0, r5
  404658:	b007      	add	sp, #28
  40465a:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  40465c:	f06f 0505 	mvn.w	r5, #5
  404660:	e7f9      	b.n	404656 <close+0x62>
  404662:	f06f 0505 	mvn.w	r5, #5
  404666:	e7f6      	b.n	404656 <close+0x62>
  404668:	2040ca60 	.word	0x2040ca60
  40466c:	004021c1 	.word	0x004021c1
  404670:	0040205d 	.word	0x0040205d

00404674 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  404674:	b570      	push	{r4, r5, r6, lr}
  404676:	b082      	sub	sp, #8
  404678:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  40467a:	4b2b      	ldr	r3, [pc, #172]	; (404728 <spi_flash_enable+0xb4>)
  40467c:	4798      	blx	r3
  40467e:	f3c0 000b 	ubfx	r0, r0, #0, #12
  404682:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  404686:	d203      	bcs.n	404690 <spi_flash_enable+0x1c>
	sint8 s8Ret = M2M_SUCCESS;
  404688:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  40468a:	4620      	mov	r0, r4
  40468c:	b002      	add	sp, #8
  40468e:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  404690:	a901      	add	r1, sp, #4
  404692:	f241 4010 	movw	r0, #5136	; 0x1410
  404696:	4b25      	ldr	r3, [pc, #148]	; (40472c <spi_flash_enable+0xb8>)
  404698:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  40469a:	4604      	mov	r4, r0
  40469c:	2800      	cmp	r0, #0
  40469e:	d1f4      	bne.n	40468a <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
  4046a0:	4b23      	ldr	r3, [pc, #140]	; (404730 <spi_flash_enable+0xbc>)
  4046a2:	9a01      	ldr	r2, [sp, #4]
  4046a4:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
  4046a6:	4923      	ldr	r1, [pc, #140]	; (404734 <spi_flash_enable+0xc0>)
  4046a8:	4319      	orrs	r1, r3
  4046aa:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  4046ac:	f241 4010 	movw	r0, #5136	; 0x1410
  4046b0:	4b21      	ldr	r3, [pc, #132]	; (404738 <spi_flash_enable+0xc4>)
  4046b2:	4798      	blx	r3
		if(enable) {
  4046b4:	b305      	cbz	r5, 4046f8 <spi_flash_enable+0x84>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  4046b6:	2100      	movs	r1, #0
  4046b8:	4820      	ldr	r0, [pc, #128]	; (40473c <spi_flash_enable+0xc8>)
  4046ba:	4d1f      	ldr	r5, [pc, #124]	; (404738 <spi_flash_enable+0xc4>)
  4046bc:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  4046be:	21ab      	movs	r1, #171	; 0xab
  4046c0:	481f      	ldr	r0, [pc, #124]	; (404740 <spi_flash_enable+0xcc>)
  4046c2:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  4046c4:	2101      	movs	r1, #1
  4046c6:	481f      	ldr	r0, [pc, #124]	; (404744 <spi_flash_enable+0xd0>)
  4046c8:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  4046ca:	2100      	movs	r1, #0
  4046cc:	481e      	ldr	r0, [pc, #120]	; (404748 <spi_flash_enable+0xd4>)
  4046ce:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  4046d0:	2181      	movs	r1, #129	; 0x81
  4046d2:	481e      	ldr	r0, [pc, #120]	; (40474c <spi_flash_enable+0xd8>)
  4046d4:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  4046d6:	4e1e      	ldr	r6, [pc, #120]	; (404750 <spi_flash_enable+0xdc>)
  4046d8:	4d1e      	ldr	r5, [pc, #120]	; (404754 <spi_flash_enable+0xe0>)
  4046da:	4630      	mov	r0, r6
  4046dc:	47a8      	blx	r5
  4046de:	2801      	cmp	r0, #1
  4046e0:	d1fb      	bne.n	4046da <spi_flash_enable+0x66>
		u32Val &= ~((0x7777ul) << 12);
  4046e2:	4913      	ldr	r1, [pc, #76]	; (404730 <spi_flash_enable+0xbc>)
  4046e4:	9b01      	ldr	r3, [sp, #4]
  4046e6:	4019      	ands	r1, r3
		u32Val |= ((0x0010ul) << 12);
  4046e8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  4046ec:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  4046ee:	f241 4010 	movw	r0, #5136	; 0x1410
  4046f2:	4b11      	ldr	r3, [pc, #68]	; (404738 <spi_flash_enable+0xc4>)
  4046f4:	4798      	blx	r3
  4046f6:	e7c8      	b.n	40468a <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  4046f8:	2100      	movs	r1, #0
  4046fa:	4810      	ldr	r0, [pc, #64]	; (40473c <spi_flash_enable+0xc8>)
  4046fc:	4d0e      	ldr	r5, [pc, #56]	; (404738 <spi_flash_enable+0xc4>)
  4046fe:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  404700:	21b9      	movs	r1, #185	; 0xb9
  404702:	480f      	ldr	r0, [pc, #60]	; (404740 <spi_flash_enable+0xcc>)
  404704:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  404706:	2101      	movs	r1, #1
  404708:	480e      	ldr	r0, [pc, #56]	; (404744 <spi_flash_enable+0xd0>)
  40470a:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  40470c:	2100      	movs	r1, #0
  40470e:	480e      	ldr	r0, [pc, #56]	; (404748 <spi_flash_enable+0xd4>)
  404710:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  404712:	2181      	movs	r1, #129	; 0x81
  404714:	480d      	ldr	r0, [pc, #52]	; (40474c <spi_flash_enable+0xd8>)
  404716:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  404718:	4e0d      	ldr	r6, [pc, #52]	; (404750 <spi_flash_enable+0xdc>)
  40471a:	4d0e      	ldr	r5, [pc, #56]	; (404754 <spi_flash_enable+0xe0>)
  40471c:	4630      	mov	r0, r6
  40471e:	47a8      	blx	r5
  404720:	2801      	cmp	r0, #1
  404722:	d1fb      	bne.n	40471c <spi_flash_enable+0xa8>
  404724:	e7dd      	b.n	4046e2 <spi_flash_enable+0x6e>
  404726:	bf00      	nop
  404728:	00403089 	.word	0x00403089
  40472c:	00403385 	.word	0x00403385
  404730:	f8888fff 	.word	0xf8888fff
  404734:	01111000 	.word	0x01111000
  404738:	00403391 	.word	0x00403391
  40473c:	00010208 	.word	0x00010208
  404740:	0001020c 	.word	0x0001020c
  404744:	00010214 	.word	0x00010214
  404748:	0001021c 	.word	0x0001021c
  40474c:	00010204 	.word	0x00010204
  404750:	00010218 	.word	0x00010218
  404754:	00403379 	.word	0x00403379

00404758 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  404758:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40475a:	4810      	ldr	r0, [pc, #64]	; (40479c <sysclk_init+0x44>)
  40475c:	4b10      	ldr	r3, [pc, #64]	; (4047a0 <sysclk_init+0x48>)
  40475e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  404760:	213e      	movs	r1, #62	; 0x3e
  404762:	2000      	movs	r0, #0
  404764:	4b0f      	ldr	r3, [pc, #60]	; (4047a4 <sysclk_init+0x4c>)
  404766:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  404768:	4c0f      	ldr	r4, [pc, #60]	; (4047a8 <sysclk_init+0x50>)
  40476a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40476c:	2800      	cmp	r0, #0
  40476e:	d0fc      	beq.n	40476a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  404770:	4b0e      	ldr	r3, [pc, #56]	; (4047ac <sysclk_init+0x54>)
  404772:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  404774:	4a0e      	ldr	r2, [pc, #56]	; (4047b0 <sysclk_init+0x58>)
  404776:	4b0f      	ldr	r3, [pc, #60]	; (4047b4 <sysclk_init+0x5c>)
  404778:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40477a:	4c0f      	ldr	r4, [pc, #60]	; (4047b8 <sysclk_init+0x60>)
  40477c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40477e:	2800      	cmp	r0, #0
  404780:	d0fc      	beq.n	40477c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  404782:	2002      	movs	r0, #2
  404784:	4b0d      	ldr	r3, [pc, #52]	; (4047bc <sysclk_init+0x64>)
  404786:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  404788:	2000      	movs	r0, #0
  40478a:	4b0d      	ldr	r3, [pc, #52]	; (4047c0 <sysclk_init+0x68>)
  40478c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40478e:	4b0d      	ldr	r3, [pc, #52]	; (4047c4 <sysclk_init+0x6c>)
  404790:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  404792:	4802      	ldr	r0, [pc, #8]	; (40479c <sysclk_init+0x44>)
  404794:	4b02      	ldr	r3, [pc, #8]	; (4047a0 <sysclk_init+0x48>)
  404796:	4798      	blx	r3
  404798:	bd10      	pop	{r4, pc}
  40479a:	bf00      	nop
  40479c:	11e1a300 	.word	0x11e1a300
  4047a0:	004053d5 	.word	0x004053d5
  4047a4:	00404e9d 	.word	0x00404e9d
  4047a8:	00404ef1 	.word	0x00404ef1
  4047ac:	00404f01 	.word	0x00404f01
  4047b0:	20183f01 	.word	0x20183f01
  4047b4:	400e0600 	.word	0x400e0600
  4047b8:	00404f11 	.word	0x00404f11
  4047bc:	00404e01 	.word	0x00404e01
  4047c0:	00404e39 	.word	0x00404e39
  4047c4:	004052c9 	.word	0x004052c9

004047c8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4047c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4047cc:	b980      	cbnz	r0, 4047f0 <_read+0x28>
  4047ce:	460c      	mov	r4, r1
  4047d0:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4047d2:	2a00      	cmp	r2, #0
  4047d4:	dd0f      	ble.n	4047f6 <_read+0x2e>
  4047d6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4047d8:	4e08      	ldr	r6, [pc, #32]	; (4047fc <_read+0x34>)
  4047da:	4d09      	ldr	r5, [pc, #36]	; (404800 <_read+0x38>)
  4047dc:	6830      	ldr	r0, [r6, #0]
  4047de:	4621      	mov	r1, r4
  4047e0:	682b      	ldr	r3, [r5, #0]
  4047e2:	4798      	blx	r3
		ptr++;
  4047e4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4047e6:	42bc      	cmp	r4, r7
  4047e8:	d1f8      	bne.n	4047dc <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4047ea:	4640      	mov	r0, r8
  4047ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4047f0:	f04f 38ff 	mov.w	r8, #4294967295
  4047f4:	e7f9      	b.n	4047ea <_read+0x22>
	for (; len > 0; --len) {
  4047f6:	4680      	mov	r8, r0
  4047f8:	e7f7      	b.n	4047ea <_read+0x22>
  4047fa:	bf00      	nop
  4047fc:	2040cb24 	.word	0x2040cb24
  404800:	2040cb1c 	.word	0x2040cb1c

00404804 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  404804:	3801      	subs	r0, #1
  404806:	2802      	cmp	r0, #2
  404808:	d815      	bhi.n	404836 <_write+0x32>
{
  40480a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40480e:	460e      	mov	r6, r1
  404810:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  404812:	b19a      	cbz	r2, 40483c <_write+0x38>
  404814:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  404816:	f8df 8038 	ldr.w	r8, [pc, #56]	; 404850 <_write+0x4c>
  40481a:	4f0c      	ldr	r7, [pc, #48]	; (40484c <_write+0x48>)
  40481c:	f8d8 0000 	ldr.w	r0, [r8]
  404820:	f815 1b01 	ldrb.w	r1, [r5], #1
  404824:	683b      	ldr	r3, [r7, #0]
  404826:	4798      	blx	r3
  404828:	2800      	cmp	r0, #0
  40482a:	db0a      	blt.n	404842 <_write+0x3e>
  40482c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40482e:	3c01      	subs	r4, #1
  404830:	d1f4      	bne.n	40481c <_write+0x18>
  404832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  404836:	f04f 30ff 	mov.w	r0, #4294967295
  40483a:	4770      	bx	lr
	for (; len != 0; --len) {
  40483c:	4610      	mov	r0, r2
  40483e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  404842:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  404846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40484a:	bf00      	nop
  40484c:	2040cb20 	.word	0x2040cb20
  404850:	2040cb24 	.word	0x2040cb24

00404854 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  404854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  404856:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40485a:	4b5c      	ldr	r3, [pc, #368]	; (4049cc <board_init+0x178>)
  40485c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  40485e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404862:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  404866:	4b5a      	ldr	r3, [pc, #360]	; (4049d0 <board_init+0x17c>)
  404868:	2200      	movs	r2, #0
  40486a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40486e:	695a      	ldr	r2, [r3, #20]
  404870:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  404874:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  404876:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40487a:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40487e:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  404882:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  404886:	f007 0007 	and.w	r0, r7, #7
  40488a:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40488c:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  404890:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  404894:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  404898:	f3bf 8f4f 	dsb	sy
  40489c:	f04f 34ff 	mov.w	r4, #4294967295
  4048a0:	fa04 fc00 	lsl.w	ip, r4, r0
  4048a4:	fa06 f000 	lsl.w	r0, r6, r0
  4048a8:	fa04 f40e 	lsl.w	r4, r4, lr
  4048ac:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4048b0:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4048b2:	463a      	mov	r2, r7
  4048b4:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4048b6:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  4048ba:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  4048be:	3a01      	subs	r2, #1
  4048c0:	4423      	add	r3, r4
  4048c2:	f1b2 3fff 	cmp.w	r2, #4294967295
  4048c6:	d1f6      	bne.n	4048b6 <board_init+0x62>
        } while(sets--);
  4048c8:	3e01      	subs	r6, #1
  4048ca:	4460      	add	r0, ip
  4048cc:	f1b6 3fff 	cmp.w	r6, #4294967295
  4048d0:	d1ef      	bne.n	4048b2 <board_init+0x5e>
  4048d2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4048d6:	4b3e      	ldr	r3, [pc, #248]	; (4049d0 <board_init+0x17c>)
  4048d8:	695a      	ldr	r2, [r3, #20]
  4048da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4048de:	615a      	str	r2, [r3, #20]
  4048e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4048e4:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4048e8:	4a3a      	ldr	r2, [pc, #232]	; (4049d4 <board_init+0x180>)
  4048ea:	493b      	ldr	r1, [pc, #236]	; (4049d8 <board_init+0x184>)
  4048ec:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4048ee:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4048f2:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  4048f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4048f8:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4048fc:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  404900:	f022 0201 	bic.w	r2, r2, #1
  404904:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  404908:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  40490c:	f022 0201 	bic.w	r2, r2, #1
  404910:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  404914:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404918:	f3bf 8f6f 	isb	sy
  40491c:	200a      	movs	r0, #10
  40491e:	4c2f      	ldr	r4, [pc, #188]	; (4049dc <board_init+0x188>)
  404920:	47a0      	blx	r4
  404922:	200b      	movs	r0, #11
  404924:	47a0      	blx	r4
  404926:	200c      	movs	r0, #12
  404928:	47a0      	blx	r4
  40492a:	2010      	movs	r0, #16
  40492c:	47a0      	blx	r4
  40492e:	2011      	movs	r0, #17
  404930:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404932:	4b2b      	ldr	r3, [pc, #172]	; (4049e0 <board_init+0x18c>)
  404934:	f44f 7280 	mov.w	r2, #256	; 0x100
  404938:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40493a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40493e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  404940:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  404944:	f44f 6200 	mov.w	r2, #2048	; 0x800
  404948:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40494a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40494e:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  404950:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404954:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  404956:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  404958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40495c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40495e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  404962:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404964:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404966:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40496a:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40496c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  404970:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  404974:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  404978:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40497c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40497e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404982:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404984:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404986:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40498a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40498c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  404990:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404992:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404994:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  404998:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40499a:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  40499c:	4a11      	ldr	r2, [pc, #68]	; (4049e4 <board_init+0x190>)
  40499e:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4049a2:	f043 0310 	orr.w	r3, r3, #16
  4049a6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  4049aa:	4b0f      	ldr	r3, [pc, #60]	; (4049e8 <board_init+0x194>)
  4049ac:	2210      	movs	r2, #16
  4049ae:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4049b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4049b4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4049b6:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4049b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4049bc:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4049be:	4311      	orrs	r1, r2
  4049c0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4049c2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4049c4:	4311      	orrs	r1, r2
  4049c6:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4049c8:	605a      	str	r2, [r3, #4]
  4049ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4049cc:	400e1850 	.word	0x400e1850
  4049d0:	e000ed00 	.word	0xe000ed00
  4049d4:	400e0c00 	.word	0x400e0c00
  4049d8:	5a00080c 	.word	0x5a00080c
  4049dc:	00404f21 	.word	0x00404f21
  4049e0:	400e1200 	.word	0x400e1200
  4049e4:	40088000 	.word	0x40088000
  4049e8:	400e1000 	.word	0x400e1000

004049ec <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4049ec:	b90a      	cbnz	r2, 4049f2 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4049ee:	6601      	str	r1, [r0, #96]	; 0x60
  4049f0:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4049f2:	6641      	str	r1, [r0, #100]	; 0x64
  4049f4:	4770      	bx	lr

004049f6 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4049f6:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4049f8:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4049fc:	d03a      	beq.n	404a74 <pio_set_peripheral+0x7e>
  4049fe:	d813      	bhi.n	404a28 <pio_set_peripheral+0x32>
  404a00:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  404a04:	d025      	beq.n	404a52 <pio_set_peripheral+0x5c>
  404a06:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  404a0a:	d10a      	bne.n	404a22 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404a0c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  404a0e:	4313      	orrs	r3, r2
  404a10:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  404a12:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  404a14:	6f41      	ldr	r1, [r0, #116]	; 0x74
  404a16:	400b      	ands	r3, r1
  404a18:	ea23 0302 	bic.w	r3, r3, r2
  404a1c:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  404a1e:	6042      	str	r2, [r0, #4]
  404a20:	4770      	bx	lr
	switch (ul_type) {
  404a22:	2900      	cmp	r1, #0
  404a24:	d1fb      	bne.n	404a1e <pio_set_peripheral+0x28>
  404a26:	4770      	bx	lr
  404a28:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  404a2c:	d021      	beq.n	404a72 <pio_set_peripheral+0x7c>
  404a2e:	d809      	bhi.n	404a44 <pio_set_peripheral+0x4e>
  404a30:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  404a34:	d1f3      	bne.n	404a1e <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  404a36:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  404a38:	4313      	orrs	r3, r2
  404a3a:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  404a3c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  404a3e:	4313      	orrs	r3, r2
  404a40:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  404a42:	e7ec      	b.n	404a1e <pio_set_peripheral+0x28>
	switch (ul_type) {
  404a44:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  404a48:	d013      	beq.n	404a72 <pio_set_peripheral+0x7c>
  404a4a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  404a4e:	d010      	beq.n	404a72 <pio_set_peripheral+0x7c>
  404a50:	e7e5      	b.n	404a1e <pio_set_peripheral+0x28>
{
  404a52:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  404a54:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  404a56:	6f04      	ldr	r4, [r0, #112]	; 0x70
  404a58:	43d3      	mvns	r3, r2
  404a5a:	4021      	ands	r1, r4
  404a5c:	461c      	mov	r4, r3
  404a5e:	4019      	ands	r1, r3
  404a60:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  404a62:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  404a64:	6f41      	ldr	r1, [r0, #116]	; 0x74
  404a66:	400b      	ands	r3, r1
  404a68:	4023      	ands	r3, r4
  404a6a:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  404a6c:	6042      	str	r2, [r0, #4]
}
  404a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
  404a72:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  404a74:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  404a76:	6f01      	ldr	r1, [r0, #112]	; 0x70
  404a78:	400b      	ands	r3, r1
  404a7a:	ea23 0302 	bic.w	r3, r3, r2
  404a7e:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  404a80:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  404a82:	4313      	orrs	r3, r2
  404a84:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  404a86:	e7ca      	b.n	404a1e <pio_set_peripheral+0x28>

00404a88 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  404a88:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  404a8a:	f012 0f01 	tst.w	r2, #1
  404a8e:	d10d      	bne.n	404aac <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  404a90:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  404a92:	f012 0f0a 	tst.w	r2, #10
  404a96:	d00b      	beq.n	404ab0 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  404a98:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  404a9a:	f012 0f02 	tst.w	r2, #2
  404a9e:	d109      	bne.n	404ab4 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  404aa0:	f012 0f08 	tst.w	r2, #8
  404aa4:	d008      	beq.n	404ab8 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  404aa6:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  404aaa:	e005      	b.n	404ab8 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  404aac:	6641      	str	r1, [r0, #100]	; 0x64
  404aae:	e7f0      	b.n	404a92 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  404ab0:	6241      	str	r1, [r0, #36]	; 0x24
  404ab2:	e7f2      	b.n	404a9a <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  404ab4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  404ab8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  404aba:	6001      	str	r1, [r0, #0]
  404abc:	4770      	bx	lr

00404abe <pio_set_output>:
{
  404abe:	b410      	push	{r4}
  404ac0:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  404ac2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  404ac4:	b94c      	cbnz	r4, 404ada <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  404ac6:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  404ac8:	b14b      	cbz	r3, 404ade <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  404aca:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  404acc:	b94a      	cbnz	r2, 404ae2 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  404ace:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  404ad0:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  404ad2:	6001      	str	r1, [r0, #0]
}
  404ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
  404ad8:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  404ada:	6641      	str	r1, [r0, #100]	; 0x64
  404adc:	e7f4      	b.n	404ac8 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  404ade:	6541      	str	r1, [r0, #84]	; 0x54
  404ae0:	e7f4      	b.n	404acc <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  404ae2:	6301      	str	r1, [r0, #48]	; 0x30
  404ae4:	e7f4      	b.n	404ad0 <pio_set_output+0x12>

00404ae6 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  404ae6:	f012 0f10 	tst.w	r2, #16
  404aea:	d012      	beq.n	404b12 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  404aec:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  404af0:	f012 0f20 	tst.w	r2, #32
  404af4:	d007      	beq.n	404b06 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  404af6:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  404afa:	f012 0f40 	tst.w	r2, #64	; 0x40
  404afe:	d005      	beq.n	404b0c <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  404b00:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  404b04:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  404b06:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  404b0a:	e7f6      	b.n	404afa <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  404b0c:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  404b10:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  404b12:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  404b16:	4770      	bx	lr

00404b18 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  404b18:	6401      	str	r1, [r0, #64]	; 0x40
  404b1a:	4770      	bx	lr

00404b1c <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
  404b1c:	6441      	str	r1, [r0, #68]	; 0x44
  404b1e:	4770      	bx	lr

00404b20 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  404b20:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  404b22:	4770      	bx	lr

00404b24 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  404b24:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  404b26:	4770      	bx	lr

00404b28 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  404b28:	b570      	push	{r4, r5, r6, lr}
  404b2a:	b082      	sub	sp, #8
  404b2c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  404b2e:	4c46      	ldr	r4, [pc, #280]	; (404c48 <pio_configure_pin+0x120>)
  404b30:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  404b34:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  404b36:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  404b3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  404b3e:	d059      	beq.n	404bf4 <pio_configure_pin+0xcc>
  404b40:	d80a      	bhi.n	404b58 <pio_configure_pin+0x30>
  404b42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  404b46:	d02f      	beq.n	404ba8 <pio_configure_pin+0x80>
  404b48:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  404b4c:	d03f      	beq.n	404bce <pio_configure_pin+0xa6>
  404b4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  404b52:	d016      	beq.n	404b82 <pio_configure_pin+0x5a>
		return 0;
  404b54:	2000      	movs	r0, #0
  404b56:	e012      	b.n	404b7e <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  404b58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  404b5c:	d05d      	beq.n	404c1a <pio_configure_pin+0xf2>
  404b5e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  404b62:	d05a      	beq.n	404c1a <pio_configure_pin+0xf2>
  404b64:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  404b68:	d1f4      	bne.n	404b54 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  404b6a:	f000 011f 	and.w	r1, r0, #31
  404b6e:	2601      	movs	r6, #1
  404b70:	462a      	mov	r2, r5
  404b72:	fa06 f101 	lsl.w	r1, r6, r1
  404b76:	4620      	mov	r0, r4
  404b78:	4b34      	ldr	r3, [pc, #208]	; (404c4c <pio_configure_pin+0x124>)
  404b7a:	4798      	blx	r3
	return 1;
  404b7c:	4630      	mov	r0, r6
}
  404b7e:	b002      	add	sp, #8
  404b80:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  404b82:	f000 001f 	and.w	r0, r0, #31
  404b86:	2601      	movs	r6, #1
  404b88:	4086      	lsls	r6, r0
  404b8a:	4632      	mov	r2, r6
  404b8c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404b90:	4620      	mov	r0, r4
  404b92:	4b2f      	ldr	r3, [pc, #188]	; (404c50 <pio_configure_pin+0x128>)
  404b94:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404b96:	f015 0f01 	tst.w	r5, #1
  404b9a:	d102      	bne.n	404ba2 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  404b9c:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  404b9e:	2001      	movs	r0, #1
  404ba0:	e7ed      	b.n	404b7e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  404ba2:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  404ba4:	2001      	movs	r0, #1
  404ba6:	e7ea      	b.n	404b7e <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  404ba8:	f000 001f 	and.w	r0, r0, #31
  404bac:	2601      	movs	r6, #1
  404bae:	4086      	lsls	r6, r0
  404bb0:	4632      	mov	r2, r6
  404bb2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  404bb6:	4620      	mov	r0, r4
  404bb8:	4b25      	ldr	r3, [pc, #148]	; (404c50 <pio_configure_pin+0x128>)
  404bba:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404bbc:	f015 0f01 	tst.w	r5, #1
  404bc0:	d102      	bne.n	404bc8 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  404bc2:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  404bc4:	2001      	movs	r0, #1
  404bc6:	e7da      	b.n	404b7e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  404bc8:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  404bca:	2001      	movs	r0, #1
  404bcc:	e7d7      	b.n	404b7e <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  404bce:	f000 001f 	and.w	r0, r0, #31
  404bd2:	2601      	movs	r6, #1
  404bd4:	4086      	lsls	r6, r0
  404bd6:	4632      	mov	r2, r6
  404bd8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404bdc:	4620      	mov	r0, r4
  404bde:	4b1c      	ldr	r3, [pc, #112]	; (404c50 <pio_configure_pin+0x128>)
  404be0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404be2:	f015 0f01 	tst.w	r5, #1
  404be6:	d102      	bne.n	404bee <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  404be8:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  404bea:	2001      	movs	r0, #1
  404bec:	e7c7      	b.n	404b7e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  404bee:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  404bf0:	2001      	movs	r0, #1
  404bf2:	e7c4      	b.n	404b7e <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  404bf4:	f000 001f 	and.w	r0, r0, #31
  404bf8:	2601      	movs	r6, #1
  404bfa:	4086      	lsls	r6, r0
  404bfc:	4632      	mov	r2, r6
  404bfe:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  404c02:	4620      	mov	r0, r4
  404c04:	4b12      	ldr	r3, [pc, #72]	; (404c50 <pio_configure_pin+0x128>)
  404c06:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404c08:	f015 0f01 	tst.w	r5, #1
  404c0c:	d102      	bne.n	404c14 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  404c0e:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  404c10:	2001      	movs	r0, #1
  404c12:	e7b4      	b.n	404b7e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  404c14:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  404c16:	2001      	movs	r0, #1
  404c18:	e7b1      	b.n	404b7e <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  404c1a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  404c1e:	f000 011f 	and.w	r1, r0, #31
  404c22:	2601      	movs	r6, #1
  404c24:	ea05 0306 	and.w	r3, r5, r6
  404c28:	9300      	str	r3, [sp, #0]
  404c2a:	f3c5 0380 	ubfx	r3, r5, #2, #1
  404c2e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  404c32:	bf14      	ite	ne
  404c34:	2200      	movne	r2, #0
  404c36:	2201      	moveq	r2, #1
  404c38:	fa06 f101 	lsl.w	r1, r6, r1
  404c3c:	4620      	mov	r0, r4
  404c3e:	4c05      	ldr	r4, [pc, #20]	; (404c54 <pio_configure_pin+0x12c>)
  404c40:	47a0      	blx	r4
	return 1;
  404c42:	4630      	mov	r0, r6
		break;
  404c44:	e79b      	b.n	404b7e <pio_configure_pin+0x56>
  404c46:	bf00      	nop
  404c48:	00200707 	.word	0x00200707
  404c4c:	00404a89 	.word	0x00404a89
  404c50:	004049f7 	.word	0x004049f7
  404c54:	00404abf 	.word	0x00404abf

00404c58 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  404c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404c5c:	4604      	mov	r4, r0
  404c5e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  404c60:	4b0e      	ldr	r3, [pc, #56]	; (404c9c <pio_handler_process+0x44>)
  404c62:	4798      	blx	r3
  404c64:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  404c66:	4620      	mov	r0, r4
  404c68:	4b0d      	ldr	r3, [pc, #52]	; (404ca0 <pio_handler_process+0x48>)
  404c6a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  404c6c:	4005      	ands	r5, r0
  404c6e:	d013      	beq.n	404c98 <pio_handler_process+0x40>
  404c70:	4c0c      	ldr	r4, [pc, #48]	; (404ca4 <pio_handler_process+0x4c>)
  404c72:	f104 0660 	add.w	r6, r4, #96	; 0x60
  404c76:	e003      	b.n	404c80 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  404c78:	42b4      	cmp	r4, r6
  404c7a:	d00d      	beq.n	404c98 <pio_handler_process+0x40>
  404c7c:	3410      	adds	r4, #16
		while (status != 0) {
  404c7e:	b15d      	cbz	r5, 404c98 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  404c80:	6820      	ldr	r0, [r4, #0]
  404c82:	4540      	cmp	r0, r8
  404c84:	d1f8      	bne.n	404c78 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  404c86:	6861      	ldr	r1, [r4, #4]
  404c88:	4229      	tst	r1, r5
  404c8a:	d0f5      	beq.n	404c78 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  404c8c:	68e3      	ldr	r3, [r4, #12]
  404c8e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  404c90:	6863      	ldr	r3, [r4, #4]
  404c92:	ea25 0503 	bic.w	r5, r5, r3
  404c96:	e7ef      	b.n	404c78 <pio_handler_process+0x20>
  404c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404c9c:	00404b21 	.word	0x00404b21
  404ca0:	00404b25 	.word	0x00404b25
  404ca4:	2040c35c 	.word	0x2040c35c

00404ca8 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  404ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  404caa:	4c18      	ldr	r4, [pc, #96]	; (404d0c <pio_handler_set+0x64>)
  404cac:	6826      	ldr	r6, [r4, #0]
  404cae:	2e06      	cmp	r6, #6
  404cb0:	d82a      	bhi.n	404d08 <pio_handler_set+0x60>
  404cb2:	f04f 0c00 	mov.w	ip, #0
  404cb6:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  404cb8:	4f15      	ldr	r7, [pc, #84]	; (404d10 <pio_handler_set+0x68>)
  404cba:	e004      	b.n	404cc6 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  404cbc:	3401      	adds	r4, #1
  404cbe:	b2e4      	uxtb	r4, r4
  404cc0:	46a4      	mov	ip, r4
  404cc2:	42a6      	cmp	r6, r4
  404cc4:	d309      	bcc.n	404cda <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  404cc6:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  404cc8:	0125      	lsls	r5, r4, #4
  404cca:	597d      	ldr	r5, [r7, r5]
  404ccc:	428d      	cmp	r5, r1
  404cce:	d1f5      	bne.n	404cbc <pio_handler_set+0x14>
  404cd0:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  404cd4:	686d      	ldr	r5, [r5, #4]
  404cd6:	4295      	cmp	r5, r2
  404cd8:	d1f0      	bne.n	404cbc <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  404cda:	4d0d      	ldr	r5, [pc, #52]	; (404d10 <pio_handler_set+0x68>)
  404cdc:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  404ce0:	eb05 040e 	add.w	r4, r5, lr
  404ce4:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  404ce8:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  404cea:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  404cec:	9906      	ldr	r1, [sp, #24]
  404cee:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  404cf0:	3601      	adds	r6, #1
  404cf2:	4566      	cmp	r6, ip
  404cf4:	d005      	beq.n	404d02 <pio_handler_set+0x5a>
  404cf6:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  404cf8:	461a      	mov	r2, r3
  404cfa:	4b06      	ldr	r3, [pc, #24]	; (404d14 <pio_handler_set+0x6c>)
  404cfc:	4798      	blx	r3

	return 0;
  404cfe:	2000      	movs	r0, #0
  404d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  404d02:	4902      	ldr	r1, [pc, #8]	; (404d0c <pio_handler_set+0x64>)
  404d04:	600e      	str	r6, [r1, #0]
  404d06:	e7f6      	b.n	404cf6 <pio_handler_set+0x4e>
		return 1;
  404d08:	2001      	movs	r0, #1
}
  404d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404d0c:	2040c3cc 	.word	0x2040c3cc
  404d10:	2040c35c 	.word	0x2040c35c
  404d14:	00404ae7 	.word	0x00404ae7

00404d18 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  404d18:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  404d1a:	210a      	movs	r1, #10
  404d1c:	4801      	ldr	r0, [pc, #4]	; (404d24 <PIOA_Handler+0xc>)
  404d1e:	4b02      	ldr	r3, [pc, #8]	; (404d28 <PIOA_Handler+0x10>)
  404d20:	4798      	blx	r3
  404d22:	bd08      	pop	{r3, pc}
  404d24:	400e0e00 	.word	0x400e0e00
  404d28:	00404c59 	.word	0x00404c59

00404d2c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  404d2c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  404d2e:	210b      	movs	r1, #11
  404d30:	4801      	ldr	r0, [pc, #4]	; (404d38 <PIOB_Handler+0xc>)
  404d32:	4b02      	ldr	r3, [pc, #8]	; (404d3c <PIOB_Handler+0x10>)
  404d34:	4798      	blx	r3
  404d36:	bd08      	pop	{r3, pc}
  404d38:	400e1000 	.word	0x400e1000
  404d3c:	00404c59 	.word	0x00404c59

00404d40 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  404d40:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  404d42:	210c      	movs	r1, #12
  404d44:	4801      	ldr	r0, [pc, #4]	; (404d4c <PIOC_Handler+0xc>)
  404d46:	4b02      	ldr	r3, [pc, #8]	; (404d50 <PIOC_Handler+0x10>)
  404d48:	4798      	blx	r3
  404d4a:	bd08      	pop	{r3, pc}
  404d4c:	400e1200 	.word	0x400e1200
  404d50:	00404c59 	.word	0x00404c59

00404d54 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  404d54:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  404d56:	2110      	movs	r1, #16
  404d58:	4801      	ldr	r0, [pc, #4]	; (404d60 <PIOD_Handler+0xc>)
  404d5a:	4b02      	ldr	r3, [pc, #8]	; (404d64 <PIOD_Handler+0x10>)
  404d5c:	4798      	blx	r3
  404d5e:	bd08      	pop	{r3, pc}
  404d60:	400e1400 	.word	0x400e1400
  404d64:	00404c59 	.word	0x00404c59

00404d68 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  404d68:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  404d6a:	2111      	movs	r1, #17
  404d6c:	4801      	ldr	r0, [pc, #4]	; (404d74 <PIOE_Handler+0xc>)
  404d6e:	4b02      	ldr	r3, [pc, #8]	; (404d78 <PIOE_Handler+0x10>)
  404d70:	4798      	blx	r3
  404d72:	bd08      	pop	{r3, pc}
  404d74:	400e1600 	.word	0x400e1600
  404d78:	00404c59 	.word	0x00404c59

00404d7c <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  404d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404d7e:	4606      	mov	r6, r0
  404d80:	460d      	mov	r5, r1
  404d82:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  404d84:	4b17      	ldr	r3, [pc, #92]	; (404de4 <pio_handler_set_priority+0x68>)
  404d86:	4798      	blx	r3
  404d88:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  404d8a:	f04f 31ff 	mov.w	r1, #4294967295
  404d8e:	4630      	mov	r0, r6
  404d90:	4b15      	ldr	r3, [pc, #84]	; (404de8 <pio_handler_set_priority+0x6c>)
  404d92:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  404d94:	4630      	mov	r0, r6
  404d96:	4b15      	ldr	r3, [pc, #84]	; (404dec <pio_handler_set_priority+0x70>)
  404d98:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  404d9a:	fa5f fe85 	uxtb.w	lr, r5
  404d9e:	f00e 031f 	and.w	r3, lr, #31
  404da2:	2201      	movs	r2, #1
  404da4:	fa02 f303 	lsl.w	r3, r2, r3
  404da8:	0968      	lsrs	r0, r5, #5
  404daa:	4911      	ldr	r1, [pc, #68]	; (404df0 <pio_handler_set_priority+0x74>)
  404dac:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  404db0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  404db4:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
  if(IRQn < 0) {
  404db8:	2d00      	cmp	r5, #0
  404dba:	db0a      	blt.n	404dd2 <pio_handler_set_priority+0x56>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  404dbc:	0164      	lsls	r4, r4, #5
  404dbe:	b2e4      	uxtb	r4, r4
  404dc0:	4a0c      	ldr	r2, [pc, #48]	; (404df4 <pio_handler_set_priority+0x78>)
  404dc2:	5554      	strb	r4, [r2, r5]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404dc4:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  404dc8:	4639      	mov	r1, r7
  404dca:	4630      	mov	r0, r6
  404dcc:	4b0a      	ldr	r3, [pc, #40]	; (404df8 <pio_handler_set_priority+0x7c>)
  404dce:	4798      	blx	r3
  404dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  404dd2:	f00e 0e0f 	and.w	lr, lr, #15
  404dd6:	0164      	lsls	r4, r4, #5
  404dd8:	b2e4      	uxtb	r4, r4
  404dda:	4a08      	ldr	r2, [pc, #32]	; (404dfc <pio_handler_set_priority+0x80>)
  404ddc:	f802 400e 	strb.w	r4, [r2, lr]
  404de0:	e7f0      	b.n	404dc4 <pio_handler_set_priority+0x48>
  404de2:	bf00      	nop
  404de4:	00404b25 	.word	0x00404b25
  404de8:	00404b1d 	.word	0x00404b1d
  404dec:	00404b21 	.word	0x00404b21
  404df0:	e000e100 	.word	0xe000e100
  404df4:	e000e400 	.word	0xe000e400
  404df8:	00404b19 	.word	0x00404b19
  404dfc:	e000ed14 	.word	0xe000ed14

00404e00 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  404e00:	2803      	cmp	r0, #3
  404e02:	d011      	beq.n	404e28 <pmc_mck_set_division+0x28>
  404e04:	2804      	cmp	r0, #4
  404e06:	d012      	beq.n	404e2e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  404e08:	2802      	cmp	r0, #2
  404e0a:	bf0c      	ite	eq
  404e0c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  404e10:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  404e12:	4a08      	ldr	r2, [pc, #32]	; (404e34 <pmc_mck_set_division+0x34>)
  404e14:	6b13      	ldr	r3, [r2, #48]	; 0x30
  404e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  404e1a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  404e1c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  404e1e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  404e20:	f013 0f08 	tst.w	r3, #8
  404e24:	d0fb      	beq.n	404e1e <pmc_mck_set_division+0x1e>
}
  404e26:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  404e28:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  404e2c:	e7f1      	b.n	404e12 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  404e2e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  404e32:	e7ee      	b.n	404e12 <pmc_mck_set_division+0x12>
  404e34:	400e0600 	.word	0x400e0600

00404e38 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  404e38:	4a17      	ldr	r2, [pc, #92]	; (404e98 <pmc_switch_mck_to_pllack+0x60>)
  404e3a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  404e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  404e40:	4318      	orrs	r0, r3
  404e42:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404e44:	6e93      	ldr	r3, [r2, #104]	; 0x68
  404e46:	f013 0f08 	tst.w	r3, #8
  404e4a:	d10a      	bne.n	404e62 <pmc_switch_mck_to_pllack+0x2a>
  404e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  404e50:	4911      	ldr	r1, [pc, #68]	; (404e98 <pmc_switch_mck_to_pllack+0x60>)
  404e52:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  404e54:	f012 0f08 	tst.w	r2, #8
  404e58:	d103      	bne.n	404e62 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  404e5a:	3b01      	subs	r3, #1
  404e5c:	d1f9      	bne.n	404e52 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  404e5e:	2001      	movs	r0, #1
  404e60:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  404e62:	4a0d      	ldr	r2, [pc, #52]	; (404e98 <pmc_switch_mck_to_pllack+0x60>)
  404e64:	6b13      	ldr	r3, [r2, #48]	; 0x30
  404e66:	f023 0303 	bic.w	r3, r3, #3
  404e6a:	f043 0302 	orr.w	r3, r3, #2
  404e6e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404e70:	6e93      	ldr	r3, [r2, #104]	; 0x68
  404e72:	f013 0f08 	tst.w	r3, #8
  404e76:	d10a      	bne.n	404e8e <pmc_switch_mck_to_pllack+0x56>
  404e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  404e7c:	4906      	ldr	r1, [pc, #24]	; (404e98 <pmc_switch_mck_to_pllack+0x60>)
  404e7e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  404e80:	f012 0f08 	tst.w	r2, #8
  404e84:	d105      	bne.n	404e92 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  404e86:	3b01      	subs	r3, #1
  404e88:	d1f9      	bne.n	404e7e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  404e8a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  404e8c:	4770      	bx	lr
	return 0;
  404e8e:	2000      	movs	r0, #0
  404e90:	4770      	bx	lr
  404e92:	2000      	movs	r0, #0
  404e94:	4770      	bx	lr
  404e96:	bf00      	nop
  404e98:	400e0600 	.word	0x400e0600

00404e9c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  404e9c:	b9a0      	cbnz	r0, 404ec8 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  404e9e:	480e      	ldr	r0, [pc, #56]	; (404ed8 <pmc_switch_mainck_to_xtal+0x3c>)
  404ea0:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  404ea2:	0209      	lsls	r1, r1, #8
  404ea4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  404ea6:	4a0d      	ldr	r2, [pc, #52]	; (404edc <pmc_switch_mainck_to_xtal+0x40>)
  404ea8:	401a      	ands	r2, r3
  404eaa:	4b0d      	ldr	r3, [pc, #52]	; (404ee0 <pmc_switch_mainck_to_xtal+0x44>)
  404eac:	4313      	orrs	r3, r2
  404eae:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  404eb0:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  404eb2:	4602      	mov	r2, r0
  404eb4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  404eb6:	f013 0f01 	tst.w	r3, #1
  404eba:	d0fb      	beq.n	404eb4 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  404ebc:	4a06      	ldr	r2, [pc, #24]	; (404ed8 <pmc_switch_mainck_to_xtal+0x3c>)
  404ebe:	6a11      	ldr	r1, [r2, #32]
  404ec0:	4b08      	ldr	r3, [pc, #32]	; (404ee4 <pmc_switch_mainck_to_xtal+0x48>)
  404ec2:	430b      	orrs	r3, r1
  404ec4:	6213      	str	r3, [r2, #32]
  404ec6:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  404ec8:	4903      	ldr	r1, [pc, #12]	; (404ed8 <pmc_switch_mainck_to_xtal+0x3c>)
  404eca:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  404ecc:	4a06      	ldr	r2, [pc, #24]	; (404ee8 <pmc_switch_mainck_to_xtal+0x4c>)
  404ece:	401a      	ands	r2, r3
  404ed0:	4b06      	ldr	r3, [pc, #24]	; (404eec <pmc_switch_mainck_to_xtal+0x50>)
  404ed2:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  404ed4:	620b      	str	r3, [r1, #32]
  404ed6:	4770      	bx	lr
  404ed8:	400e0600 	.word	0x400e0600
  404edc:	ffc8fffc 	.word	0xffc8fffc
  404ee0:	00370001 	.word	0x00370001
  404ee4:	01370000 	.word	0x01370000
  404ee8:	fec8fffc 	.word	0xfec8fffc
  404eec:	01370002 	.word	0x01370002

00404ef0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  404ef0:	4b02      	ldr	r3, [pc, #8]	; (404efc <pmc_osc_is_ready_mainck+0xc>)
  404ef2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  404ef4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  404ef8:	4770      	bx	lr
  404efa:	bf00      	nop
  404efc:	400e0600 	.word	0x400e0600

00404f00 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  404f00:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  404f04:	4b01      	ldr	r3, [pc, #4]	; (404f0c <pmc_disable_pllack+0xc>)
  404f06:	629a      	str	r2, [r3, #40]	; 0x28
  404f08:	4770      	bx	lr
  404f0a:	bf00      	nop
  404f0c:	400e0600 	.word	0x400e0600

00404f10 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  404f10:	4b02      	ldr	r3, [pc, #8]	; (404f1c <pmc_is_locked_pllack+0xc>)
  404f12:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  404f14:	f000 0002 	and.w	r0, r0, #2
  404f18:	4770      	bx	lr
  404f1a:	bf00      	nop
  404f1c:	400e0600 	.word	0x400e0600

00404f20 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  404f20:	283f      	cmp	r0, #63	; 0x3f
  404f22:	d81e      	bhi.n	404f62 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  404f24:	281f      	cmp	r0, #31
  404f26:	d80c      	bhi.n	404f42 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  404f28:	4b11      	ldr	r3, [pc, #68]	; (404f70 <pmc_enable_periph_clk+0x50>)
  404f2a:	699a      	ldr	r2, [r3, #24]
  404f2c:	2301      	movs	r3, #1
  404f2e:	4083      	lsls	r3, r0
  404f30:	4393      	bics	r3, r2
  404f32:	d018      	beq.n	404f66 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  404f34:	2301      	movs	r3, #1
  404f36:	fa03 f000 	lsl.w	r0, r3, r0
  404f3a:	4b0d      	ldr	r3, [pc, #52]	; (404f70 <pmc_enable_periph_clk+0x50>)
  404f3c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  404f3e:	2000      	movs	r0, #0
  404f40:	4770      	bx	lr
		ul_id -= 32;
  404f42:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  404f44:	4b0a      	ldr	r3, [pc, #40]	; (404f70 <pmc_enable_periph_clk+0x50>)
  404f46:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  404f4a:	2301      	movs	r3, #1
  404f4c:	4083      	lsls	r3, r0
  404f4e:	4393      	bics	r3, r2
  404f50:	d00b      	beq.n	404f6a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  404f52:	2301      	movs	r3, #1
  404f54:	fa03 f000 	lsl.w	r0, r3, r0
  404f58:	4b05      	ldr	r3, [pc, #20]	; (404f70 <pmc_enable_periph_clk+0x50>)
  404f5a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  404f5e:	2000      	movs	r0, #0
  404f60:	4770      	bx	lr
		return 1;
  404f62:	2001      	movs	r0, #1
  404f64:	4770      	bx	lr
	return 0;
  404f66:	2000      	movs	r0, #0
  404f68:	4770      	bx	lr
  404f6a:	2000      	movs	r0, #0
}
  404f6c:	4770      	bx	lr
  404f6e:	bf00      	nop
  404f70:	400e0600 	.word	0x400e0600

00404f74 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  404f74:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  404f76:	4b07      	ldr	r3, [pc, #28]	; (404f94 <spi_enable_clock+0x20>)
  404f78:	4298      	cmp	r0, r3
  404f7a:	d003      	beq.n	404f84 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  404f7c:	4b06      	ldr	r3, [pc, #24]	; (404f98 <spi_enable_clock+0x24>)
  404f7e:	4298      	cmp	r0, r3
  404f80:	d004      	beq.n	404f8c <spi_enable_clock+0x18>
  404f82:	bd08      	pop	{r3, pc}
  404f84:	2015      	movs	r0, #21
  404f86:	4b05      	ldr	r3, [pc, #20]	; (404f9c <spi_enable_clock+0x28>)
  404f88:	4798      	blx	r3
  404f8a:	bd08      	pop	{r3, pc}
  404f8c:	202a      	movs	r0, #42	; 0x2a
  404f8e:	4b03      	ldr	r3, [pc, #12]	; (404f9c <spi_enable_clock+0x28>)
  404f90:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  404f92:	e7f6      	b.n	404f82 <spi_enable_clock+0xe>
  404f94:	40008000 	.word	0x40008000
  404f98:	40058000 	.word	0x40058000
  404f9c:	00404f21 	.word	0x00404f21

00404fa0 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  404fa0:	6843      	ldr	r3, [r0, #4]
  404fa2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  404fa6:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  404fa8:	6843      	ldr	r3, [r0, #4]
  404faa:	0409      	lsls	r1, r1, #16
  404fac:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  404fb0:	4319      	orrs	r1, r3
  404fb2:	6041      	str	r1, [r0, #4]
  404fb4:	4770      	bx	lr

00404fb6 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  404fb6:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  404fb8:	f643 2399 	movw	r3, #15001	; 0x3a99
  404fbc:	6904      	ldr	r4, [r0, #16]
  404fbe:	f014 0f01 	tst.w	r4, #1
  404fc2:	d103      	bne.n	404fcc <spi_read+0x16>
		if (!timeout--) {
  404fc4:	3b01      	subs	r3, #1
  404fc6:	d1f9      	bne.n	404fbc <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  404fc8:	2001      	movs	r0, #1
  404fca:	e009      	b.n	404fe0 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  404fcc:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  404fce:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  404fd0:	f010 0f02 	tst.w	r0, #2
  404fd4:	d002      	beq.n	404fdc <spi_read+0x26>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  404fd6:	f3c3 4003 	ubfx	r0, r3, #16, #4
  404fda:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  404fdc:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  404fde:	2000      	movs	r0, #0
}
  404fe0:	f85d 4b04 	ldr.w	r4, [sp], #4
  404fe4:	4770      	bx	lr

00404fe6 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  404fe6:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  404fe8:	f643 2499 	movw	r4, #15001	; 0x3a99
  404fec:	6905      	ldr	r5, [r0, #16]
  404fee:	f015 0f02 	tst.w	r5, #2
  404ff2:	d103      	bne.n	404ffc <spi_write+0x16>
		if (!timeout--) {
  404ff4:	3c01      	subs	r4, #1
  404ff6:	d1f9      	bne.n	404fec <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  404ff8:	2001      	movs	r0, #1
  404ffa:	e00c      	b.n	405016 <spi_write+0x30>
  404ffc:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  404ffe:	f014 0f02 	tst.w	r4, #2
  405002:	d006      	beq.n	405012 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  405004:	0412      	lsls	r2, r2, #16
  405006:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40500a:	4311      	orrs	r1, r2
		if (uc_last) {
  40500c:	b10b      	cbz	r3, 405012 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  40500e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  405012:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  405014:	2000      	movs	r0, #0
}
  405016:	bc30      	pop	{r4, r5}
  405018:	4770      	bx	lr

0040501a <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  40501a:	b932      	cbnz	r2, 40502a <spi_set_clock_polarity+0x10>
  40501c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  405020:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405022:	f023 0301 	bic.w	r3, r3, #1
  405026:	6303      	str	r3, [r0, #48]	; 0x30
  405028:	4770      	bx	lr
  40502a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40502e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405030:	f043 0301 	orr.w	r3, r3, #1
  405034:	6303      	str	r3, [r0, #48]	; 0x30
  405036:	4770      	bx	lr

00405038 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  405038:	b932      	cbnz	r2, 405048 <spi_set_clock_phase+0x10>
  40503a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40503e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405040:	f023 0302 	bic.w	r3, r3, #2
  405044:	6303      	str	r3, [r0, #48]	; 0x30
  405046:	4770      	bx	lr
  405048:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40504c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40504e:	f043 0302 	orr.w	r3, r3, #2
  405052:	6303      	str	r3, [r0, #48]	; 0x30
  405054:	4770      	bx	lr

00405056 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  405056:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40505a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40505c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  405060:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  405062:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  405064:	431a      	orrs	r2, r3
  405066:	630a      	str	r2, [r1, #48]	; 0x30
  405068:	4770      	bx	lr

0040506a <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  40506a:	1e43      	subs	r3, r0, #1
  40506c:	4419      	add	r1, r3
  40506e:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  405072:	1e43      	subs	r3, r0, #1
  405074:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  405076:	bf94      	ite	ls
  405078:	b200      	sxthls	r0, r0
		return -1;
  40507a:	f04f 30ff 	movhi.w	r0, #4294967295
}
  40507e:	4770      	bx	lr

00405080 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  405080:	b17a      	cbz	r2, 4050a2 <spi_set_baudrate_div+0x22>
{
  405082:	b410      	push	{r4}
  405084:	4614      	mov	r4, r2
  405086:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40508a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40508c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  405090:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  405092:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  405094:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  405098:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  40509a:	2000      	movs	r0, #0
}
  40509c:	f85d 4b04 	ldr.w	r4, [sp], #4
  4050a0:	4770      	bx	lr
        return -1;
  4050a2:	f04f 30ff 	mov.w	r0, #4294967295
  4050a6:	4770      	bx	lr

004050a8 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4050a8:	b410      	push	{r4}
  4050aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4050ae:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4050b0:	b280      	uxth	r0, r0
  4050b2:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4050b4:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  4050b6:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4050ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4050be:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4050c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4050c4:	4770      	bx	lr

004050c6 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4050c6:	6943      	ldr	r3, [r0, #20]
  4050c8:	f013 0f02 	tst.w	r3, #2
  4050cc:	d002      	beq.n	4050d4 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4050ce:	61c1      	str	r1, [r0, #28]
	return 0;
  4050d0:	2000      	movs	r0, #0
  4050d2:	4770      	bx	lr
		return 1;
  4050d4:	2001      	movs	r0, #1
}
  4050d6:	4770      	bx	lr

004050d8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4050d8:	6943      	ldr	r3, [r0, #20]
  4050da:	f013 0f01 	tst.w	r3, #1
  4050de:	d003      	beq.n	4050e8 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4050e0:	6983      	ldr	r3, [r0, #24]
  4050e2:	700b      	strb	r3, [r1, #0]
	return 0;
  4050e4:	2000      	movs	r0, #0
  4050e6:	4770      	bx	lr
		return 1;
  4050e8:	2001      	movs	r0, #1
}
  4050ea:	4770      	bx	lr

004050ec <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4050ec:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4050ee:	010b      	lsls	r3, r1, #4
  4050f0:	4293      	cmp	r3, r2
  4050f2:	d914      	bls.n	40511e <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4050f4:	00c9      	lsls	r1, r1, #3
  4050f6:	084b      	lsrs	r3, r1, #1
  4050f8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4050fc:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  405100:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  405102:	1e5c      	subs	r4, r3, #1
  405104:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  405108:	428c      	cmp	r4, r1
  40510a:	d901      	bls.n	405110 <usart_set_async_baudrate+0x24>
		return 1;
  40510c:	2001      	movs	r0, #1
  40510e:	e017      	b.n	405140 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  405110:	6841      	ldr	r1, [r0, #4]
  405112:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  405116:	6041      	str	r1, [r0, #4]
  405118:	e00c      	b.n	405134 <usart_set_async_baudrate+0x48>
		return 1;
  40511a:	2001      	movs	r0, #1
  40511c:	e010      	b.n	405140 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40511e:	0859      	lsrs	r1, r3, #1
  405120:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  405124:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  405128:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40512a:	1e5c      	subs	r4, r3, #1
  40512c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  405130:	428c      	cmp	r4, r1
  405132:	d8f2      	bhi.n	40511a <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  405134:	0412      	lsls	r2, r2, #16
  405136:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  40513a:	431a      	orrs	r2, r3
  40513c:	6202      	str	r2, [r0, #32]

	return 0;
  40513e:	2000      	movs	r0, #0
}
  405140:	f85d 4b04 	ldr.w	r4, [sp], #4
  405144:	4770      	bx	lr
	...

00405148 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  405148:	4b08      	ldr	r3, [pc, #32]	; (40516c <usart_reset+0x24>)
  40514a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  40514e:	2300      	movs	r3, #0
  405150:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  405152:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  405154:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  405156:	2388      	movs	r3, #136	; 0x88
  405158:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40515a:	2324      	movs	r3, #36	; 0x24
  40515c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40515e:	f44f 7380 	mov.w	r3, #256	; 0x100
  405162:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  405164:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  405168:	6003      	str	r3, [r0, #0]
  40516a:	4770      	bx	lr
  40516c:	55534100 	.word	0x55534100

00405170 <usart_init_rs232>:
{
  405170:	b570      	push	{r4, r5, r6, lr}
  405172:	4605      	mov	r5, r0
  405174:	460c      	mov	r4, r1
  405176:	4616      	mov	r6, r2
	usart_reset(p_usart);
  405178:	4b0f      	ldr	r3, [pc, #60]	; (4051b8 <usart_init_rs232+0x48>)
  40517a:	4798      	blx	r3
	ul_reg_val = 0;
  40517c:	2200      	movs	r2, #0
  40517e:	4b0f      	ldr	r3, [pc, #60]	; (4051bc <usart_init_rs232+0x4c>)
  405180:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  405182:	b1a4      	cbz	r4, 4051ae <usart_init_rs232+0x3e>
  405184:	4632      	mov	r2, r6
  405186:	6821      	ldr	r1, [r4, #0]
  405188:	4628      	mov	r0, r5
  40518a:	4b0d      	ldr	r3, [pc, #52]	; (4051c0 <usart_init_rs232+0x50>)
  40518c:	4798      	blx	r3
  40518e:	4602      	mov	r2, r0
  405190:	b978      	cbnz	r0, 4051b2 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  405192:	6863      	ldr	r3, [r4, #4]
  405194:	68a1      	ldr	r1, [r4, #8]
  405196:	430b      	orrs	r3, r1
  405198:	6921      	ldr	r1, [r4, #16]
  40519a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40519c:	68e1      	ldr	r1, [r4, #12]
  40519e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4051a0:	4906      	ldr	r1, [pc, #24]	; (4051bc <usart_init_rs232+0x4c>)
  4051a2:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4051a4:	6869      	ldr	r1, [r5, #4]
  4051a6:	430b      	orrs	r3, r1
  4051a8:	606b      	str	r3, [r5, #4]
}
  4051aa:	4610      	mov	r0, r2
  4051ac:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4051ae:	2201      	movs	r2, #1
  4051b0:	e7fb      	b.n	4051aa <usart_init_rs232+0x3a>
  4051b2:	2201      	movs	r2, #1
  4051b4:	e7f9      	b.n	4051aa <usart_init_rs232+0x3a>
  4051b6:	bf00      	nop
  4051b8:	00405149 	.word	0x00405149
  4051bc:	2040c3d0 	.word	0x2040c3d0
  4051c0:	004050ed 	.word	0x004050ed

004051c4 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4051c4:	2340      	movs	r3, #64	; 0x40
  4051c6:	6003      	str	r3, [r0, #0]
  4051c8:	4770      	bx	lr

004051ca <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4051ca:	2310      	movs	r3, #16
  4051cc:	6003      	str	r3, [r0, #0]
  4051ce:	4770      	bx	lr

004051d0 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4051d0:	6943      	ldr	r3, [r0, #20]
  4051d2:	f013 0f02 	tst.w	r3, #2
  4051d6:	d004      	beq.n	4051e2 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4051d8:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4051dc:	61c1      	str	r1, [r0, #28]
	return 0;
  4051de:	2000      	movs	r0, #0
  4051e0:	4770      	bx	lr
		return 1;
  4051e2:	2001      	movs	r0, #1
}
  4051e4:	4770      	bx	lr

004051e6 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4051e6:	6943      	ldr	r3, [r0, #20]
  4051e8:	f013 0f01 	tst.w	r3, #1
  4051ec:	d005      	beq.n	4051fa <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4051ee:	6983      	ldr	r3, [r0, #24]
  4051f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4051f4:	600b      	str	r3, [r1, #0]
	return 0;
  4051f6:	2000      	movs	r0, #0
  4051f8:	4770      	bx	lr
		return 1;
  4051fa:	2001      	movs	r0, #1
}
  4051fc:	4770      	bx	lr

004051fe <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4051fe:	e7fe      	b.n	4051fe <Dummy_Handler>

00405200 <Reset_Handler>:
{
  405200:	b500      	push	{lr}
  405202:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  405204:	4b25      	ldr	r3, [pc, #148]	; (40529c <Reset_Handler+0x9c>)
  405206:	4a26      	ldr	r2, [pc, #152]	; (4052a0 <Reset_Handler+0xa0>)
  405208:	429a      	cmp	r2, r3
  40520a:	d010      	beq.n	40522e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  40520c:	4b25      	ldr	r3, [pc, #148]	; (4052a4 <Reset_Handler+0xa4>)
  40520e:	4a23      	ldr	r2, [pc, #140]	; (40529c <Reset_Handler+0x9c>)
  405210:	429a      	cmp	r2, r3
  405212:	d20c      	bcs.n	40522e <Reset_Handler+0x2e>
  405214:	3b01      	subs	r3, #1
  405216:	1a9b      	subs	r3, r3, r2
  405218:	f023 0303 	bic.w	r3, r3, #3
  40521c:	3304      	adds	r3, #4
  40521e:	4413      	add	r3, r2
  405220:	491f      	ldr	r1, [pc, #124]	; (4052a0 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  405222:	f851 0b04 	ldr.w	r0, [r1], #4
  405226:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40522a:	429a      	cmp	r2, r3
  40522c:	d1f9      	bne.n	405222 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40522e:	4b1e      	ldr	r3, [pc, #120]	; (4052a8 <Reset_Handler+0xa8>)
  405230:	4a1e      	ldr	r2, [pc, #120]	; (4052ac <Reset_Handler+0xac>)
  405232:	429a      	cmp	r2, r3
  405234:	d20a      	bcs.n	40524c <Reset_Handler+0x4c>
  405236:	3b01      	subs	r3, #1
  405238:	1a9b      	subs	r3, r3, r2
  40523a:	f023 0303 	bic.w	r3, r3, #3
  40523e:	3304      	adds	r3, #4
  405240:	4413      	add	r3, r2
                *pDest++ = 0;
  405242:	2100      	movs	r1, #0
  405244:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  405248:	4293      	cmp	r3, r2
  40524a:	d1fb      	bne.n	405244 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40524c:	4a18      	ldr	r2, [pc, #96]	; (4052b0 <Reset_Handler+0xb0>)
  40524e:	4b19      	ldr	r3, [pc, #100]	; (4052b4 <Reset_Handler+0xb4>)
  405250:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  405254:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  405256:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40525a:	fab3 f383 	clz	r3, r3
  40525e:	095b      	lsrs	r3, r3, #5
  405260:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  405262:	b672      	cpsid	i
  __ASM volatile ("dmb");
  405264:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  405268:	2200      	movs	r2, #0
  40526a:	4b13      	ldr	r3, [pc, #76]	; (4052b8 <Reset_Handler+0xb8>)
  40526c:	701a      	strb	r2, [r3, #0]
	return flags;
  40526e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  405270:	4a12      	ldr	r2, [pc, #72]	; (4052bc <Reset_Handler+0xbc>)
  405272:	6813      	ldr	r3, [r2, #0]
  405274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  405278:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40527a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40527e:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  405282:	b129      	cbz	r1, 405290 <Reset_Handler+0x90>
		cpu_irq_enable();
  405284:	2201      	movs	r2, #1
  405286:	4b0c      	ldr	r3, [pc, #48]	; (4052b8 <Reset_Handler+0xb8>)
  405288:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40528a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40528e:	b662      	cpsie	i
        __libc_init_array();
  405290:	4b0b      	ldr	r3, [pc, #44]	; (4052c0 <Reset_Handler+0xc0>)
  405292:	4798      	blx	r3
        main();
  405294:	4b0b      	ldr	r3, [pc, #44]	; (4052c4 <Reset_Handler+0xc4>)
  405296:	4798      	blx	r3
  405298:	e7fe      	b.n	405298 <Reset_Handler+0x98>
  40529a:	bf00      	nop
  40529c:	20400000 	.word	0x20400000
  4052a0:	00409c68 	.word	0x00409c68
  4052a4:	204009d0 	.word	0x204009d0
  4052a8:	2040cb6c 	.word	0x2040cb6c
  4052ac:	204009d0 	.word	0x204009d0
  4052b0:	e000ed00 	.word	0xe000ed00
  4052b4:	00400000 	.word	0x00400000
  4052b8:	20400018 	.word	0x20400018
  4052bc:	e000ed88 	.word	0xe000ed88
  4052c0:	00405c29 	.word	0x00405c29
  4052c4:	00405b11 	.word	0x00405b11

004052c8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4052c8:	4b3b      	ldr	r3, [pc, #236]	; (4053b8 <SystemCoreClockUpdate+0xf0>)
  4052ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4052cc:	f003 0303 	and.w	r3, r3, #3
  4052d0:	2b01      	cmp	r3, #1
  4052d2:	d01d      	beq.n	405310 <SystemCoreClockUpdate+0x48>
  4052d4:	b183      	cbz	r3, 4052f8 <SystemCoreClockUpdate+0x30>
  4052d6:	2b02      	cmp	r3, #2
  4052d8:	d036      	beq.n	405348 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4052da:	4b37      	ldr	r3, [pc, #220]	; (4053b8 <SystemCoreClockUpdate+0xf0>)
  4052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4052de:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4052e2:	2b70      	cmp	r3, #112	; 0x70
  4052e4:	d05f      	beq.n	4053a6 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4052e6:	4b34      	ldr	r3, [pc, #208]	; (4053b8 <SystemCoreClockUpdate+0xf0>)
  4052e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4052ea:	4934      	ldr	r1, [pc, #208]	; (4053bc <SystemCoreClockUpdate+0xf4>)
  4052ec:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4052f0:	680b      	ldr	r3, [r1, #0]
  4052f2:	40d3      	lsrs	r3, r2
  4052f4:	600b      	str	r3, [r1, #0]
  4052f6:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4052f8:	4b31      	ldr	r3, [pc, #196]	; (4053c0 <SystemCoreClockUpdate+0xf8>)
  4052fa:	695b      	ldr	r3, [r3, #20]
  4052fc:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  405300:	bf14      	ite	ne
  405302:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  405306:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40530a:	4b2c      	ldr	r3, [pc, #176]	; (4053bc <SystemCoreClockUpdate+0xf4>)
  40530c:	601a      	str	r2, [r3, #0]
  40530e:	e7e4      	b.n	4052da <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  405310:	4b29      	ldr	r3, [pc, #164]	; (4053b8 <SystemCoreClockUpdate+0xf0>)
  405312:	6a1b      	ldr	r3, [r3, #32]
  405314:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  405318:	d003      	beq.n	405322 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40531a:	4a2a      	ldr	r2, [pc, #168]	; (4053c4 <SystemCoreClockUpdate+0xfc>)
  40531c:	4b27      	ldr	r3, [pc, #156]	; (4053bc <SystemCoreClockUpdate+0xf4>)
  40531e:	601a      	str	r2, [r3, #0]
  405320:	e7db      	b.n	4052da <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405322:	4a29      	ldr	r2, [pc, #164]	; (4053c8 <SystemCoreClockUpdate+0x100>)
  405324:	4b25      	ldr	r3, [pc, #148]	; (4053bc <SystemCoreClockUpdate+0xf4>)
  405326:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  405328:	4b23      	ldr	r3, [pc, #140]	; (4053b8 <SystemCoreClockUpdate+0xf0>)
  40532a:	6a1b      	ldr	r3, [r3, #32]
  40532c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405330:	2b10      	cmp	r3, #16
  405332:	d005      	beq.n	405340 <SystemCoreClockUpdate+0x78>
  405334:	2b20      	cmp	r3, #32
  405336:	d1d0      	bne.n	4052da <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  405338:	4a22      	ldr	r2, [pc, #136]	; (4053c4 <SystemCoreClockUpdate+0xfc>)
  40533a:	4b20      	ldr	r3, [pc, #128]	; (4053bc <SystemCoreClockUpdate+0xf4>)
  40533c:	601a      	str	r2, [r3, #0]
          break;
  40533e:	e7cc      	b.n	4052da <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  405340:	4a22      	ldr	r2, [pc, #136]	; (4053cc <SystemCoreClockUpdate+0x104>)
  405342:	4b1e      	ldr	r3, [pc, #120]	; (4053bc <SystemCoreClockUpdate+0xf4>)
  405344:	601a      	str	r2, [r3, #0]
          break;
  405346:	e7c8      	b.n	4052da <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  405348:	4b1b      	ldr	r3, [pc, #108]	; (4053b8 <SystemCoreClockUpdate+0xf0>)
  40534a:	6a1b      	ldr	r3, [r3, #32]
  40534c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  405350:	d016      	beq.n	405380 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  405352:	4a1c      	ldr	r2, [pc, #112]	; (4053c4 <SystemCoreClockUpdate+0xfc>)
  405354:	4b19      	ldr	r3, [pc, #100]	; (4053bc <SystemCoreClockUpdate+0xf4>)
  405356:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  405358:	4b17      	ldr	r3, [pc, #92]	; (4053b8 <SystemCoreClockUpdate+0xf0>)
  40535a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40535c:	f003 0303 	and.w	r3, r3, #3
  405360:	2b02      	cmp	r3, #2
  405362:	d1ba      	bne.n	4052da <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  405364:	4a14      	ldr	r2, [pc, #80]	; (4053b8 <SystemCoreClockUpdate+0xf0>)
  405366:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  405368:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40536a:	4814      	ldr	r0, [pc, #80]	; (4053bc <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40536c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  405370:	6803      	ldr	r3, [r0, #0]
  405372:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  405376:	b2d2      	uxtb	r2, r2
  405378:	fbb3 f3f2 	udiv	r3, r3, r2
  40537c:	6003      	str	r3, [r0, #0]
  40537e:	e7ac      	b.n	4052da <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405380:	4a11      	ldr	r2, [pc, #68]	; (4053c8 <SystemCoreClockUpdate+0x100>)
  405382:	4b0e      	ldr	r3, [pc, #56]	; (4053bc <SystemCoreClockUpdate+0xf4>)
  405384:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  405386:	4b0c      	ldr	r3, [pc, #48]	; (4053b8 <SystemCoreClockUpdate+0xf0>)
  405388:	6a1b      	ldr	r3, [r3, #32]
  40538a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40538e:	2b10      	cmp	r3, #16
  405390:	d005      	beq.n	40539e <SystemCoreClockUpdate+0xd6>
  405392:	2b20      	cmp	r3, #32
  405394:	d1e0      	bne.n	405358 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  405396:	4a0b      	ldr	r2, [pc, #44]	; (4053c4 <SystemCoreClockUpdate+0xfc>)
  405398:	4b08      	ldr	r3, [pc, #32]	; (4053bc <SystemCoreClockUpdate+0xf4>)
  40539a:	601a      	str	r2, [r3, #0]
          break;
  40539c:	e7dc      	b.n	405358 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40539e:	4a0b      	ldr	r2, [pc, #44]	; (4053cc <SystemCoreClockUpdate+0x104>)
  4053a0:	4b06      	ldr	r3, [pc, #24]	; (4053bc <SystemCoreClockUpdate+0xf4>)
  4053a2:	601a      	str	r2, [r3, #0]
          break;
  4053a4:	e7d8      	b.n	405358 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4053a6:	4a05      	ldr	r2, [pc, #20]	; (4053bc <SystemCoreClockUpdate+0xf4>)
  4053a8:	6813      	ldr	r3, [r2, #0]
  4053aa:	4909      	ldr	r1, [pc, #36]	; (4053d0 <SystemCoreClockUpdate+0x108>)
  4053ac:	fba1 1303 	umull	r1, r3, r1, r3
  4053b0:	085b      	lsrs	r3, r3, #1
  4053b2:	6013      	str	r3, [r2, #0]
  4053b4:	4770      	bx	lr
  4053b6:	bf00      	nop
  4053b8:	400e0600 	.word	0x400e0600
  4053bc:	2040001c 	.word	0x2040001c
  4053c0:	400e1810 	.word	0x400e1810
  4053c4:	00b71b00 	.word	0x00b71b00
  4053c8:	003d0900 	.word	0x003d0900
  4053cc:	007a1200 	.word	0x007a1200
  4053d0:	aaaaaaab 	.word	0xaaaaaaab

004053d4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4053d4:	4b12      	ldr	r3, [pc, #72]	; (405420 <system_init_flash+0x4c>)
  4053d6:	4298      	cmp	r0, r3
  4053d8:	d911      	bls.n	4053fe <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4053da:	4b12      	ldr	r3, [pc, #72]	; (405424 <system_init_flash+0x50>)
  4053dc:	4298      	cmp	r0, r3
  4053de:	d913      	bls.n	405408 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4053e0:	4b11      	ldr	r3, [pc, #68]	; (405428 <system_init_flash+0x54>)
  4053e2:	4298      	cmp	r0, r3
  4053e4:	d914      	bls.n	405410 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4053e6:	4b11      	ldr	r3, [pc, #68]	; (40542c <system_init_flash+0x58>)
  4053e8:	4298      	cmp	r0, r3
  4053ea:	d915      	bls.n	405418 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4053ec:	4b10      	ldr	r3, [pc, #64]	; (405430 <system_init_flash+0x5c>)
  4053ee:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4053f0:	bf94      	ite	ls
  4053f2:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4053f6:	4a0f      	ldrhi	r2, [pc, #60]	; (405434 <system_init_flash+0x60>)
  4053f8:	4b0f      	ldr	r3, [pc, #60]	; (405438 <system_init_flash+0x64>)
  4053fa:	601a      	str	r2, [r3, #0]
  4053fc:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4053fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  405402:	4b0d      	ldr	r3, [pc, #52]	; (405438 <system_init_flash+0x64>)
  405404:	601a      	str	r2, [r3, #0]
  405406:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  405408:	4a0c      	ldr	r2, [pc, #48]	; (40543c <system_init_flash+0x68>)
  40540a:	4b0b      	ldr	r3, [pc, #44]	; (405438 <system_init_flash+0x64>)
  40540c:	601a      	str	r2, [r3, #0]
  40540e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  405410:	4a0b      	ldr	r2, [pc, #44]	; (405440 <system_init_flash+0x6c>)
  405412:	4b09      	ldr	r3, [pc, #36]	; (405438 <system_init_flash+0x64>)
  405414:	601a      	str	r2, [r3, #0]
  405416:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  405418:	4a0a      	ldr	r2, [pc, #40]	; (405444 <system_init_flash+0x70>)
  40541a:	4b07      	ldr	r3, [pc, #28]	; (405438 <system_init_flash+0x64>)
  40541c:	601a      	str	r2, [r3, #0]
  40541e:	4770      	bx	lr
  405420:	01312cff 	.word	0x01312cff
  405424:	026259ff 	.word	0x026259ff
  405428:	039386ff 	.word	0x039386ff
  40542c:	04c4b3ff 	.word	0x04c4b3ff
  405430:	05f5e0ff 	.word	0x05f5e0ff
  405434:	04000500 	.word	0x04000500
  405438:	400e0c00 	.word	0x400e0c00
  40543c:	04000100 	.word	0x04000100
  405440:	04000200 	.word	0x04000200
  405444:	04000300 	.word	0x04000300

00405448 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  405448:	4b0a      	ldr	r3, [pc, #40]	; (405474 <_sbrk+0x2c>)
  40544a:	681b      	ldr	r3, [r3, #0]
  40544c:	b153      	cbz	r3, 405464 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40544e:	4b09      	ldr	r3, [pc, #36]	; (405474 <_sbrk+0x2c>)
  405450:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  405452:	181a      	adds	r2, r3, r0
  405454:	4908      	ldr	r1, [pc, #32]	; (405478 <_sbrk+0x30>)
  405456:	4291      	cmp	r1, r2
  405458:	db08      	blt.n	40546c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40545a:	4610      	mov	r0, r2
  40545c:	4a05      	ldr	r2, [pc, #20]	; (405474 <_sbrk+0x2c>)
  40545e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  405460:	4618      	mov	r0, r3
  405462:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  405464:	4a05      	ldr	r2, [pc, #20]	; (40547c <_sbrk+0x34>)
  405466:	4b03      	ldr	r3, [pc, #12]	; (405474 <_sbrk+0x2c>)
  405468:	601a      	str	r2, [r3, #0]
  40546a:	e7f0      	b.n	40544e <_sbrk+0x6>
		return (caddr_t) -1;	
  40546c:	f04f 30ff 	mov.w	r0, #4294967295
}
  405470:	4770      	bx	lr
  405472:	bf00      	nop
  405474:	2040c3d4 	.word	0x2040c3d4
  405478:	2045fffc 	.word	0x2045fffc
  40547c:	2040ed70 	.word	0x2040ed70

00405480 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  405480:	f04f 30ff 	mov.w	r0, #4294967295
  405484:	4770      	bx	lr

00405486 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  405486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40548a:	604b      	str	r3, [r1, #4]

	return 0;
}
  40548c:	2000      	movs	r0, #0
  40548e:	4770      	bx	lr

00405490 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  405490:	2001      	movs	r0, #1
  405492:	4770      	bx	lr

00405494 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  405494:	2000      	movs	r0, #0
  405496:	4770      	bx	lr

00405498 <resolve_cb>:
 * \param[in] hostIp Server IP.
 *
 * \return None.
 */
static void resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
  405498:	b510      	push	{r4, lr}
  40549a:	b082      	sub	sp, #8
	gu32HostIp = hostIp;
  40549c:	4b07      	ldr	r3, [pc, #28]	; (4054bc <resolve_cb+0x24>)
  40549e:	6019      	str	r1, [r3, #0]
	gbHostIpByName = true;
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
  4054a0:	0e0b      	lsrs	r3, r1, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
  4054a2:	9301      	str	r3, [sp, #4]
  4054a4:	f3c1 4307 	ubfx	r3, r1, #16, #8
  4054a8:	9300      	str	r3, [sp, #0]
  4054aa:	f3c1 2307 	ubfx	r3, r1, #8, #8
  4054ae:	b2ca      	uxtb	r2, r1
  4054b0:	4601      	mov	r1, r0
  4054b2:	4803      	ldr	r0, [pc, #12]	; (4054c0 <resolve_cb+0x28>)
  4054b4:	4c03      	ldr	r4, [pc, #12]	; (4054c4 <resolve_cb+0x2c>)
  4054b6:	47a0      	blx	r4
}
  4054b8:	b002      	add	sp, #8
  4054ba:	bd10      	pop	{r4, pc}
  4054bc:	2040c958 	.word	0x2040c958
  4054c0:	004098c4 	.word	0x004098c4
  4054c4:	00405c79 	.word	0x00405c79

004054c8 <task_afec>:
		printf(szList);
		vTaskDelay(1000);
	}
}

static void task_afec(void){
  4054c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4054ca:	b08b      	sub	sp, #44	; 0x2c
	afec_enable(AFEC0);
  4054cc:	4c1a      	ldr	r4, [pc, #104]	; (405538 <task_afec+0x70>)
  4054ce:	4620      	mov	r0, r4
  4054d0:	4b1a      	ldr	r3, [pc, #104]	; (40553c <task_afec+0x74>)
  4054d2:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  4054d4:	a804      	add	r0, sp, #16
  4054d6:	4b1a      	ldr	r3, [pc, #104]	; (405540 <task_afec+0x78>)
  4054d8:	4798      	blx	r3
	afec_init(AFEC0, &afec_cfg);
  4054da:	a904      	add	r1, sp, #16
  4054dc:	4620      	mov	r0, r4
  4054de:	4b19      	ldr	r3, [pc, #100]	; (405544 <task_afec+0x7c>)
  4054e0:	4798      	blx	r3
	reg = afec->AFEC_MR;
  4054e2:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  4054e4:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  4054e8:	6063      	str	r3, [r4, #4]
	afec_set_callback(AFEC0, AFEC_INTERRUPT_EOC_0,	AFEC_Temp_callback, 5);
  4054ea:	2305      	movs	r3, #5
  4054ec:	4a16      	ldr	r2, [pc, #88]	; (405548 <task_afec+0x80>)
  4054ee:	2100      	movs	r1, #0
  4054f0:	4620      	mov	r0, r4
  4054f2:	4d16      	ldr	r5, [pc, #88]	; (40554c <task_afec+0x84>)
  4054f4:	47a8      	blx	r5
	afec_ch_get_config_defaults(&afec_ch_cfg);
  4054f6:	a801      	add	r0, sp, #4
  4054f8:	4b15      	ldr	r3, [pc, #84]	; (405550 <task_afec+0x88>)
  4054fa:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  4054fc:	2500      	movs	r5, #0
  4054fe:	f88d 5005 	strb.w	r5, [sp, #5]
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_TEMP_SENSOR, &afec_ch_cfg);
  405502:	aa01      	add	r2, sp, #4
  405504:	4629      	mov	r1, r5
  405506:	4620      	mov	r0, r4
  405508:	4b12      	ldr	r3, [pc, #72]	; (405554 <task_afec+0x8c>)
  40550a:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  40550c:	6665      	str	r5, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  40550e:	f44f 7300 	mov.w	r3, #512	; 0x200
  405512:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  405514:	a802      	add	r0, sp, #8
  405516:	4b10      	ldr	r3, [pc, #64]	; (405558 <task_afec+0x90>)
  405518:	4798      	blx	r3
	afec_temp_sensor_set_config(AFEC0, &afec_temp_sensor_cfg);
  40551a:	a902      	add	r1, sp, #8
  40551c:	4620      	mov	r0, r4
  40551e:	4b0f      	ldr	r3, [pc, #60]	; (40555c <task_afec+0x94>)
  405520:	4798      	blx	r3
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  405522:	2301      	movs	r3, #1
  405524:	6163      	str	r3, [r4, #20]
	afec->AFEC_CR = AFEC_CR_START;
  405526:	4627      	mov	r7, r4
  405528:	2602      	movs	r6, #2
	config_ADC_TEMP_RES();
	const TickType_t xDelay = 4000 / portTICK_PERIOD_MS;
	for(;;){
		afec_start_software_conversion(AFEC0);
		vTaskDelay(xDelay);
  40552a:	f44f 657a 	mov.w	r5, #4000	; 0xfa0
  40552e:	4c0c      	ldr	r4, [pc, #48]	; (405560 <task_afec+0x98>)
  405530:	603e      	str	r6, [r7, #0]
  405532:	4628      	mov	r0, r5
  405534:	47a0      	blx	r4
  405536:	e7fb      	b.n	405530 <task_afec+0x68>
  405538:	4003c000 	.word	0x4003c000
  40553c:	00400449 	.word	0x00400449
  405540:	00400279 	.word	0x00400279
  405544:	004002c9 	.word	0x004002c9
  405548:	00405565 	.word	0x00405565
  40554c:	004003c9 	.word	0x004003c9
  405550:	004002a9 	.word	0x004002a9
  405554:	00400235 	.word	0x00400235
  405558:	004002b3 	.word	0x004002b3
  40555c:	00400265 	.word	0x00400265
  405560:	004013c9 	.word	0x004013c9

00405564 <AFEC_Temp_callback>:
{
  405564:	b510      	push	{r4, lr}
	afec->AFEC_CSELR = afec_ch;
  405566:	4b06      	ldr	r3, [pc, #24]	; (405580 <AFEC_Temp_callback+0x1c>)
  405568:	2200      	movs	r2, #0
  40556a:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  40556c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	g_ul_value = afec_channel_get_value(AFEC0, AFEC_CHANNEL_TEMP_SENSOR);
  40556e:	4905      	ldr	r1, [pc, #20]	; (405584 <AFEC_Temp_callback+0x20>)
  405570:	600b      	str	r3, [r1, #0]
	xQueueSendFromISR( xQueueAfec, &g_ul_value, 0);
  405572:	4613      	mov	r3, r2
  405574:	4804      	ldr	r0, [pc, #16]	; (405588 <AFEC_Temp_callback+0x24>)
  405576:	6800      	ldr	r0, [r0, #0]
  405578:	4c04      	ldr	r4, [pc, #16]	; (40558c <AFEC_Temp_callback+0x28>)
  40557a:	47a0      	blx	r4
  40557c:	bd10      	pop	{r4, pc}
  40557e:	bf00      	nop
  405580:	4003c000 	.word	0x4003c000
  405584:	2040c3d8 	.word	0x2040c3d8
  405588:	2040cb40 	.word	0x2040cb40
  40558c:	00400b69 	.word	0x00400b69

00405590 <socket_cb>:
	if (sock == tcp_client_socket) {
  405590:	4b3b      	ldr	r3, [pc, #236]	; (405680 <socket_cb+0xf0>)
  405592:	f993 3000 	ldrsb.w	r3, [r3]
  405596:	4283      	cmp	r3, r0
  405598:	d000      	beq.n	40559c <socket_cb+0xc>
  40559a:	4770      	bx	lr
{
  40559c:	b570      	push	{r4, r5, r6, lr}
  40559e:	4614      	mov	r4, r2
		switch (u8Msg) {
  4055a0:	2905      	cmp	r1, #5
  4055a2:	d002      	beq.n	4055aa <socket_cb+0x1a>
  4055a4:	2906      	cmp	r1, #6
  4055a6:	d047      	beq.n	405638 <socket_cb+0xa8>
  4055a8:	bd70      	pop	{r4, r5, r6, pc}
			printf("socket_msg_connect\n"); 
  4055aa:	4836      	ldr	r0, [pc, #216]	; (405684 <socket_cb+0xf4>)
  4055ac:	4b36      	ldr	r3, [pc, #216]	; (405688 <socket_cb+0xf8>)
  4055ae:	4798      	blx	r3
			if (gbTcpConnection) {
  4055b0:	4b36      	ldr	r3, [pc, #216]	; (40568c <socket_cb+0xfc>)
  4055b2:	781b      	ldrb	r3, [r3, #0]
  4055b4:	2b00      	cmp	r3, #0
  4055b6:	d04e      	beq.n	405656 <socket_cb+0xc6>
				memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  4055b8:	4d35      	ldr	r5, [pc, #212]	; (405690 <socket_cb+0x100>)
  4055ba:	f44f 62af 	mov.w	r2, #1400	; 0x578
  4055be:	2100      	movs	r1, #0
  4055c0:	4628      	mov	r0, r5
  4055c2:	4b34      	ldr	r3, [pc, #208]	; (405694 <socket_cb+0x104>)
  4055c4:	4798      	blx	r3
				sprintf((char *)gau8ReceivedBuffer, "%s", MAIN_PREFIX_BUFFER);
  4055c6:	4e34      	ldr	r6, [pc, #208]	; (405698 <socket_cb+0x108>)
  4055c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  4055ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4055cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  4055ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4055d0:	6833      	ldr	r3, [r6, #0]
  4055d2:	702b      	strb	r3, [r5, #0]
				if (pstrConnect && pstrConnect->s8Error >= SOCK_ERR_NO_ERROR) {
  4055d4:	b314      	cbz	r4, 40561c <socket_cb+0x8c>
  4055d6:	f994 3001 	ldrsb.w	r3, [r4, #1]
  4055da:	2b00      	cmp	r3, #0
  4055dc:	db1e      	blt.n	40561c <socket_cb+0x8c>
					printf("send \n");
  4055de:	482f      	ldr	r0, [pc, #188]	; (40569c <socket_cb+0x10c>)
  4055e0:	4b29      	ldr	r3, [pc, #164]	; (405688 <socket_cb+0xf8>)
  4055e2:	4798      	blx	r3
					send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
  4055e4:	f1a5 0420 	sub.w	r4, r5, #32
  4055e8:	4620      	mov	r0, r4
  4055ea:	4b2d      	ldr	r3, [pc, #180]	; (4056a0 <socket_cb+0x110>)
  4055ec:	4798      	blx	r3
  4055ee:	4d24      	ldr	r5, [pc, #144]	; (405680 <socket_cb+0xf0>)
  4055f0:	2300      	movs	r3, #0
  4055f2:	b282      	uxth	r2, r0
  4055f4:	4621      	mov	r1, r4
  4055f6:	f995 0000 	ldrsb.w	r0, [r5]
  4055fa:	4e2a      	ldr	r6, [pc, #168]	; (4056a4 <socket_cb+0x114>)
  4055fc:	47b0      	blx	r6
					memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  4055fe:	f44f 66af 	mov.w	r6, #1400	; 0x578
  405602:	4632      	mov	r2, r6
  405604:	2100      	movs	r1, #0
  405606:	4620      	mov	r0, r4
  405608:	4b22      	ldr	r3, [pc, #136]	; (405694 <socket_cb+0x104>)
  40560a:	4798      	blx	r3
					recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  40560c:	2300      	movs	r3, #0
  40560e:	4632      	mov	r2, r6
  405610:	4621      	mov	r1, r4
  405612:	f995 0000 	ldrsb.w	r0, [r5]
  405616:	4c24      	ldr	r4, [pc, #144]	; (4056a8 <socket_cb+0x118>)
  405618:	47a0      	blx	r4
  40561a:	bd70      	pop	{r4, r5, r6, pc}
					printf("socket_cb: connect error!\r\n");
  40561c:	4823      	ldr	r0, [pc, #140]	; (4056ac <socket_cb+0x11c>)
  40561e:	4b1a      	ldr	r3, [pc, #104]	; (405688 <socket_cb+0xf8>)
  405620:	4798      	blx	r3
					gbTcpConnection = false;
  405622:	2200      	movs	r2, #0
  405624:	4b19      	ldr	r3, [pc, #100]	; (40568c <socket_cb+0xfc>)
  405626:	701a      	strb	r2, [r3, #0]
					close(tcp_client_socket);
  405628:	4c15      	ldr	r4, [pc, #84]	; (405680 <socket_cb+0xf0>)
  40562a:	f994 0000 	ldrsb.w	r0, [r4]
  40562e:	4b20      	ldr	r3, [pc, #128]	; (4056b0 <socket_cb+0x120>)
  405630:	4798      	blx	r3
					tcp_client_socket = -1;
  405632:	23ff      	movs	r3, #255	; 0xff
  405634:	7023      	strb	r3, [r4, #0]
  405636:	bd70      	pop	{r4, r5, r6, pc}
			if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  405638:	b11a      	cbz	r2, 405642 <socket_cb+0xb2>
  40563a:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  40563e:	2b00      	cmp	r3, #0
  405640:	dc0a      	bgt.n	405658 <socket_cb+0xc8>
				printf("socket_cb: recv error!\r\n");
  405642:	481c      	ldr	r0, [pc, #112]	; (4056b4 <socket_cb+0x124>)
  405644:	4b10      	ldr	r3, [pc, #64]	; (405688 <socket_cb+0xf8>)
  405646:	4798      	blx	r3
				close(tcp_client_socket);
  405648:	4c0d      	ldr	r4, [pc, #52]	; (405680 <socket_cb+0xf0>)
  40564a:	f994 0000 	ldrsb.w	r0, [r4]
  40564e:	4b18      	ldr	r3, [pc, #96]	; (4056b0 <socket_cb+0x120>)
  405650:	4798      	blx	r3
				tcp_client_socket = -1;
  405652:	23ff      	movs	r3, #255	; 0xff
  405654:	7023      	strb	r3, [r4, #0]
  405656:	bd70      	pop	{r4, r5, r6, pc}
        printf(pstrRecv->pu8Buffer);
  405658:	6810      	ldr	r0, [r2, #0]
  40565a:	4b0b      	ldr	r3, [pc, #44]	; (405688 <socket_cb+0xf8>)
  40565c:	4798      	blx	r3
				memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  40565e:	4c0c      	ldr	r4, [pc, #48]	; (405690 <socket_cb+0x100>)
  405660:	f44f 65af 	mov.w	r5, #1400	; 0x578
  405664:	462a      	mov	r2, r5
  405666:	2100      	movs	r1, #0
  405668:	4620      	mov	r0, r4
  40566a:	4b0a      	ldr	r3, [pc, #40]	; (405694 <socket_cb+0x104>)
  40566c:	4798      	blx	r3
				recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  40566e:	2300      	movs	r3, #0
  405670:	462a      	mov	r2, r5
  405672:	4621      	mov	r1, r4
  405674:	4802      	ldr	r0, [pc, #8]	; (405680 <socket_cb+0xf0>)
  405676:	f990 0000 	ldrsb.w	r0, [r0]
  40567a:	4c0b      	ldr	r4, [pc, #44]	; (4056a8 <socket_cb+0x118>)
  40567c:	47a0      	blx	r4
  40567e:	bd70      	pop	{r4, r5, r6, pc}
  405680:	20400020 	.word	0x20400020
  405684:	004098f4 	.word	0x004098f4
  405688:	00405c79 	.word	0x00405c79
  40568c:	2040c954 	.word	0x2040c954
  405690:	2040c3dc 	.word	0x2040c3dc
  405694:	00405dd5 	.word	0x00405dd5
  405698:	00409908 	.word	0x00409908
  40569c:	0040992c 	.word	0x0040992c
  4056a0:	00406041 	.word	0x00406041
  4056a4:	004044b9 	.word	0x004044b9
  4056a8:	00404555 	.word	0x00404555
  4056ac:	00409934 	.word	0x00409934
  4056b0:	004045f5 	.word	0x004045f5
  4056b4:	00409950 	.word	0x00409950

004056b8 <wifi_cb>:
{
  4056b8:	b510      	push	{r4, lr}
  4056ba:	b082      	sub	sp, #8
	switch (u8MsgType) {
  4056bc:	282c      	cmp	r0, #44	; 0x2c
  4056be:	d003      	beq.n	4056c8 <wifi_cb+0x10>
  4056c0:	2832      	cmp	r0, #50	; 0x32
  4056c2:	d013      	beq.n	4056ec <wifi_cb+0x34>
}
  4056c4:	b002      	add	sp, #8
  4056c6:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  4056c8:	780b      	ldrb	r3, [r1, #0]
  4056ca:	2b01      	cmp	r3, #1
  4056cc:	d008      	beq.n	4056e0 <wifi_cb+0x28>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  4056ce:	2b00      	cmp	r3, #0
  4056d0:	d1f8      	bne.n	4056c4 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
  4056d2:	480d      	ldr	r0, [pc, #52]	; (405708 <wifi_cb+0x50>)
  4056d4:	4b0d      	ldr	r3, [pc, #52]	; (40570c <wifi_cb+0x54>)
  4056d6:	4798      	blx	r3
 			wifi_connected = 0;
  4056d8:	2200      	movs	r2, #0
  4056da:	4b0d      	ldr	r3, [pc, #52]	; (405710 <wifi_cb+0x58>)
  4056dc:	701a      	strb	r2, [r3, #0]
  4056de:	e7f1      	b.n	4056c4 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
  4056e0:	480c      	ldr	r0, [pc, #48]	; (405714 <wifi_cb+0x5c>)
  4056e2:	4b0a      	ldr	r3, [pc, #40]	; (40570c <wifi_cb+0x54>)
  4056e4:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
  4056e6:	4b0c      	ldr	r3, [pc, #48]	; (405718 <wifi_cb+0x60>)
  4056e8:	4798      	blx	r3
  4056ea:	e7eb      	b.n	4056c4 <wifi_cb+0xc>
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
  4056ec:	788b      	ldrb	r3, [r1, #2]
  4056ee:	784a      	ldrb	r2, [r1, #1]
  4056f0:	7808      	ldrb	r0, [r1, #0]
  4056f2:	78c9      	ldrb	r1, [r1, #3]
  4056f4:	9100      	str	r1, [sp, #0]
  4056f6:	4601      	mov	r1, r0
  4056f8:	4808      	ldr	r0, [pc, #32]	; (40571c <wifi_cb+0x64>)
  4056fa:	4c04      	ldr	r4, [pc, #16]	; (40570c <wifi_cb+0x54>)
  4056fc:	47a0      	blx	r4
		wifi_connected = M2M_WIFI_CONNECTED;
  4056fe:	2201      	movs	r2, #1
  405700:	4b03      	ldr	r3, [pc, #12]	; (405710 <wifi_cb+0x58>)
  405702:	701a      	strb	r2, [r3, #0]
}
  405704:	e7de      	b.n	4056c4 <wifi_cb+0xc>
  405706:	bf00      	nop
  405708:	00409a88 	.word	0x00409a88
  40570c:	00405c79 	.word	0x00405c79
  405710:	2040c95c 	.word	0x2040c95c
  405714:	00409a68 	.word	0x00409a68
  405718:	00402eb5 	.word	0x00402eb5
  40571c:	00409aac 	.word	0x00409aac

00405720 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  405720:	b5f0      	push	{r4, r5, r6, r7, lr}
  405722:	b083      	sub	sp, #12
  405724:	4605      	mov	r5, r0
  405726:	460c      	mov	r4, r1
	uint32_t val = 0;
  405728:	2300      	movs	r3, #0
  40572a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40572c:	4b2a      	ldr	r3, [pc, #168]	; (4057d8 <usart_serial_getchar+0xb8>)
  40572e:	4298      	cmp	r0, r3
  405730:	d013      	beq.n	40575a <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  405732:	4b2a      	ldr	r3, [pc, #168]	; (4057dc <usart_serial_getchar+0xbc>)
  405734:	4298      	cmp	r0, r3
  405736:	d018      	beq.n	40576a <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  405738:	4b29      	ldr	r3, [pc, #164]	; (4057e0 <usart_serial_getchar+0xc0>)
  40573a:	4298      	cmp	r0, r3
  40573c:	d01d      	beq.n	40577a <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40573e:	4b29      	ldr	r3, [pc, #164]	; (4057e4 <usart_serial_getchar+0xc4>)
  405740:	429d      	cmp	r5, r3
  405742:	d022      	beq.n	40578a <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  405744:	4b28      	ldr	r3, [pc, #160]	; (4057e8 <usart_serial_getchar+0xc8>)
  405746:	429d      	cmp	r5, r3
  405748:	d027      	beq.n	40579a <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40574a:	4b28      	ldr	r3, [pc, #160]	; (4057ec <usart_serial_getchar+0xcc>)
  40574c:	429d      	cmp	r5, r3
  40574e:	d02e      	beq.n	4057ae <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  405750:	4b27      	ldr	r3, [pc, #156]	; (4057f0 <usart_serial_getchar+0xd0>)
  405752:	429d      	cmp	r5, r3
  405754:	d035      	beq.n	4057c2 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  405756:	b003      	add	sp, #12
  405758:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40575a:	461f      	mov	r7, r3
  40575c:	4e25      	ldr	r6, [pc, #148]	; (4057f4 <usart_serial_getchar+0xd4>)
  40575e:	4621      	mov	r1, r4
  405760:	4638      	mov	r0, r7
  405762:	47b0      	blx	r6
  405764:	2800      	cmp	r0, #0
  405766:	d1fa      	bne.n	40575e <usart_serial_getchar+0x3e>
  405768:	e7e9      	b.n	40573e <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40576a:	461f      	mov	r7, r3
  40576c:	4e21      	ldr	r6, [pc, #132]	; (4057f4 <usart_serial_getchar+0xd4>)
  40576e:	4621      	mov	r1, r4
  405770:	4638      	mov	r0, r7
  405772:	47b0      	blx	r6
  405774:	2800      	cmp	r0, #0
  405776:	d1fa      	bne.n	40576e <usart_serial_getchar+0x4e>
  405778:	e7e4      	b.n	405744 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  40577a:	461f      	mov	r7, r3
  40577c:	4e1d      	ldr	r6, [pc, #116]	; (4057f4 <usart_serial_getchar+0xd4>)
  40577e:	4621      	mov	r1, r4
  405780:	4638      	mov	r0, r7
  405782:	47b0      	blx	r6
  405784:	2800      	cmp	r0, #0
  405786:	d1fa      	bne.n	40577e <usart_serial_getchar+0x5e>
  405788:	e7df      	b.n	40574a <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  40578a:	461f      	mov	r7, r3
  40578c:	4e19      	ldr	r6, [pc, #100]	; (4057f4 <usart_serial_getchar+0xd4>)
  40578e:	4621      	mov	r1, r4
  405790:	4638      	mov	r0, r7
  405792:	47b0      	blx	r6
  405794:	2800      	cmp	r0, #0
  405796:	d1fa      	bne.n	40578e <usart_serial_getchar+0x6e>
  405798:	e7da      	b.n	405750 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  40579a:	461e      	mov	r6, r3
  40579c:	4d16      	ldr	r5, [pc, #88]	; (4057f8 <usart_serial_getchar+0xd8>)
  40579e:	a901      	add	r1, sp, #4
  4057a0:	4630      	mov	r0, r6
  4057a2:	47a8      	blx	r5
  4057a4:	2800      	cmp	r0, #0
  4057a6:	d1fa      	bne.n	40579e <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4057a8:	9b01      	ldr	r3, [sp, #4]
  4057aa:	7023      	strb	r3, [r4, #0]
  4057ac:	e7d3      	b.n	405756 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4057ae:	461e      	mov	r6, r3
  4057b0:	4d11      	ldr	r5, [pc, #68]	; (4057f8 <usart_serial_getchar+0xd8>)
  4057b2:	a901      	add	r1, sp, #4
  4057b4:	4630      	mov	r0, r6
  4057b6:	47a8      	blx	r5
  4057b8:	2800      	cmp	r0, #0
  4057ba:	d1fa      	bne.n	4057b2 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4057bc:	9b01      	ldr	r3, [sp, #4]
  4057be:	7023      	strb	r3, [r4, #0]
  4057c0:	e7c9      	b.n	405756 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4057c2:	461e      	mov	r6, r3
  4057c4:	4d0c      	ldr	r5, [pc, #48]	; (4057f8 <usart_serial_getchar+0xd8>)
  4057c6:	a901      	add	r1, sp, #4
  4057c8:	4630      	mov	r0, r6
  4057ca:	47a8      	blx	r5
  4057cc:	2800      	cmp	r0, #0
  4057ce:	d1fa      	bne.n	4057c6 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  4057d0:	9b01      	ldr	r3, [sp, #4]
  4057d2:	7023      	strb	r3, [r4, #0]
}
  4057d4:	e7bf      	b.n	405756 <usart_serial_getchar+0x36>
  4057d6:	bf00      	nop
  4057d8:	400e0800 	.word	0x400e0800
  4057dc:	400e0a00 	.word	0x400e0a00
  4057e0:	400e1a00 	.word	0x400e1a00
  4057e4:	400e1c00 	.word	0x400e1c00
  4057e8:	40024000 	.word	0x40024000
  4057ec:	40028000 	.word	0x40028000
  4057f0:	4002c000 	.word	0x4002c000
  4057f4:	004050d9 	.word	0x004050d9
  4057f8:	004051e7 	.word	0x004051e7

004057fc <usart_serial_putchar>:
{
  4057fc:	b570      	push	{r4, r5, r6, lr}
  4057fe:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  405800:	4b2a      	ldr	r3, [pc, #168]	; (4058ac <usart_serial_putchar+0xb0>)
  405802:	4298      	cmp	r0, r3
  405804:	d013      	beq.n	40582e <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  405806:	4b2a      	ldr	r3, [pc, #168]	; (4058b0 <usart_serial_putchar+0xb4>)
  405808:	4298      	cmp	r0, r3
  40580a:	d019      	beq.n	405840 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  40580c:	4b29      	ldr	r3, [pc, #164]	; (4058b4 <usart_serial_putchar+0xb8>)
  40580e:	4298      	cmp	r0, r3
  405810:	d01f      	beq.n	405852 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  405812:	4b29      	ldr	r3, [pc, #164]	; (4058b8 <usart_serial_putchar+0xbc>)
  405814:	4298      	cmp	r0, r3
  405816:	d025      	beq.n	405864 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  405818:	4b28      	ldr	r3, [pc, #160]	; (4058bc <usart_serial_putchar+0xc0>)
  40581a:	4298      	cmp	r0, r3
  40581c:	d02b      	beq.n	405876 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  40581e:	4b28      	ldr	r3, [pc, #160]	; (4058c0 <usart_serial_putchar+0xc4>)
  405820:	4298      	cmp	r0, r3
  405822:	d031      	beq.n	405888 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  405824:	4b27      	ldr	r3, [pc, #156]	; (4058c4 <usart_serial_putchar+0xc8>)
  405826:	4298      	cmp	r0, r3
  405828:	d037      	beq.n	40589a <usart_serial_putchar+0x9e>
	return 0;
  40582a:	2000      	movs	r0, #0
}
  40582c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40582e:	461e      	mov	r6, r3
  405830:	4d25      	ldr	r5, [pc, #148]	; (4058c8 <usart_serial_putchar+0xcc>)
  405832:	4621      	mov	r1, r4
  405834:	4630      	mov	r0, r6
  405836:	47a8      	blx	r5
  405838:	2800      	cmp	r0, #0
  40583a:	d1fa      	bne.n	405832 <usart_serial_putchar+0x36>
		return 1;
  40583c:	2001      	movs	r0, #1
  40583e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  405840:	461e      	mov	r6, r3
  405842:	4d21      	ldr	r5, [pc, #132]	; (4058c8 <usart_serial_putchar+0xcc>)
  405844:	4621      	mov	r1, r4
  405846:	4630      	mov	r0, r6
  405848:	47a8      	blx	r5
  40584a:	2800      	cmp	r0, #0
  40584c:	d1fa      	bne.n	405844 <usart_serial_putchar+0x48>
		return 1;
  40584e:	2001      	movs	r0, #1
  405850:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  405852:	461e      	mov	r6, r3
  405854:	4d1c      	ldr	r5, [pc, #112]	; (4058c8 <usart_serial_putchar+0xcc>)
  405856:	4621      	mov	r1, r4
  405858:	4630      	mov	r0, r6
  40585a:	47a8      	blx	r5
  40585c:	2800      	cmp	r0, #0
  40585e:	d1fa      	bne.n	405856 <usart_serial_putchar+0x5a>
		return 1;
  405860:	2001      	movs	r0, #1
  405862:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  405864:	461e      	mov	r6, r3
  405866:	4d18      	ldr	r5, [pc, #96]	; (4058c8 <usart_serial_putchar+0xcc>)
  405868:	4621      	mov	r1, r4
  40586a:	4630      	mov	r0, r6
  40586c:	47a8      	blx	r5
  40586e:	2800      	cmp	r0, #0
  405870:	d1fa      	bne.n	405868 <usart_serial_putchar+0x6c>
		return 1;
  405872:	2001      	movs	r0, #1
  405874:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  405876:	461e      	mov	r6, r3
  405878:	4d14      	ldr	r5, [pc, #80]	; (4058cc <usart_serial_putchar+0xd0>)
  40587a:	4621      	mov	r1, r4
  40587c:	4630      	mov	r0, r6
  40587e:	47a8      	blx	r5
  405880:	2800      	cmp	r0, #0
  405882:	d1fa      	bne.n	40587a <usart_serial_putchar+0x7e>
		return 1;
  405884:	2001      	movs	r0, #1
  405886:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  405888:	461e      	mov	r6, r3
  40588a:	4d10      	ldr	r5, [pc, #64]	; (4058cc <usart_serial_putchar+0xd0>)
  40588c:	4621      	mov	r1, r4
  40588e:	4630      	mov	r0, r6
  405890:	47a8      	blx	r5
  405892:	2800      	cmp	r0, #0
  405894:	d1fa      	bne.n	40588c <usart_serial_putchar+0x90>
		return 1;
  405896:	2001      	movs	r0, #1
  405898:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40589a:	461e      	mov	r6, r3
  40589c:	4d0b      	ldr	r5, [pc, #44]	; (4058cc <usart_serial_putchar+0xd0>)
  40589e:	4621      	mov	r1, r4
  4058a0:	4630      	mov	r0, r6
  4058a2:	47a8      	blx	r5
  4058a4:	2800      	cmp	r0, #0
  4058a6:	d1fa      	bne.n	40589e <usart_serial_putchar+0xa2>
		return 1;
  4058a8:	2001      	movs	r0, #1
  4058aa:	bd70      	pop	{r4, r5, r6, pc}
  4058ac:	400e0800 	.word	0x400e0800
  4058b0:	400e0a00 	.word	0x400e0a00
  4058b4:	400e1a00 	.word	0x400e1a00
  4058b8:	400e1c00 	.word	0x400e1c00
  4058bc:	40024000 	.word	0x40024000
  4058c0:	40028000 	.word	0x40028000
  4058c4:	4002c000 	.word	0x4002c000
  4058c8:	004050c7 	.word	0x004050c7
  4058cc:	004051d1 	.word	0x004051d1

004058d0 <vApplicationStackOverflowHook>:
{
  4058d0:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  4058d2:	460a      	mov	r2, r1
  4058d4:	4601      	mov	r1, r0
  4058d6:	4802      	ldr	r0, [pc, #8]	; (4058e0 <vApplicationStackOverflowHook+0x10>)
  4058d8:	4b02      	ldr	r3, [pc, #8]	; (4058e4 <vApplicationStackOverflowHook+0x14>)
  4058da:	4798      	blx	r3
  4058dc:	e7fe      	b.n	4058dc <vApplicationStackOverflowHook+0xc>
  4058de:	bf00      	nop
  4058e0:	00409a50 	.word	0x00409a50
  4058e4:	00405c79 	.word	0x00405c79

004058e8 <vApplicationTickHook>:
{
  4058e8:	4770      	bx	lr

004058ea <vApplicationMallocFailedHook>:
{
  4058ea:	4770      	bx	lr

004058ec <RTC_Handler>:
void RTC_Handler(void){
  4058ec:	b538      	push	{r3, r4, r5, lr}
	uint32_t ul_status = rtc_get_status(RTC);
  4058ee:	4814      	ldr	r0, [pc, #80]	; (405940 <RTC_Handler+0x54>)
  4058f0:	4b14      	ldr	r3, [pc, #80]	; (405944 <RTC_Handler+0x58>)
  4058f2:	4798      	blx	r3
  4058f4:	4604      	mov	r4, r0
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {
  4058f6:	f010 0f04 	tst.w	r0, #4
  4058fa:	d111      	bne.n	405920 <RTC_Handler+0x34>
	if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  4058fc:	f014 0f02 	tst.w	r4, #2
  405900:	d118      	bne.n	405934 <RTC_Handler+0x48>
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  405902:	4d0f      	ldr	r5, [pc, #60]	; (405940 <RTC_Handler+0x54>)
  405904:	2101      	movs	r1, #1
  405906:	4628      	mov	r0, r5
  405908:	4c0f      	ldr	r4, [pc, #60]	; (405948 <RTC_Handler+0x5c>)
  40590a:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  40590c:	2108      	movs	r1, #8
  40590e:	4628      	mov	r0, r5
  405910:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  405912:	2110      	movs	r1, #16
  405914:	4628      	mov	r0, r5
  405916:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  405918:	2120      	movs	r1, #32
  40591a:	4628      	mov	r0, r5
  40591c:	47a0      	blx	r4
  40591e:	bd38      	pop	{r3, r4, r5, pc}
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  405920:	2104      	movs	r1, #4
  405922:	4807      	ldr	r0, [pc, #28]	; (405940 <RTC_Handler+0x54>)
  405924:	4b08      	ldr	r3, [pc, #32]	; (405948 <RTC_Handler+0x5c>)
  405926:	4798      	blx	r3
		xSemaphoreGiveFromISR(xSemaphoreRTC, 0);
  405928:	2100      	movs	r1, #0
  40592a:	4b08      	ldr	r3, [pc, #32]	; (40594c <RTC_Handler+0x60>)
  40592c:	6818      	ldr	r0, [r3, #0]
  40592e:	4b08      	ldr	r3, [pc, #32]	; (405950 <RTC_Handler+0x64>)
  405930:	4798      	blx	r3
  405932:	e7e3      	b.n	4058fc <RTC_Handler+0x10>
		rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  405934:	2102      	movs	r1, #2
  405936:	4802      	ldr	r0, [pc, #8]	; (405940 <RTC_Handler+0x54>)
  405938:	4b03      	ldr	r3, [pc, #12]	; (405948 <RTC_Handler+0x5c>)
  40593a:	4798      	blx	r3
  40593c:	e7e1      	b.n	405902 <RTC_Handler+0x16>
  40593e:	bf00      	nop
  405940:	400e1860 	.word	0x400e1860
  405944:	004004ad 	.word	0x004004ad
  405948:	004004b1 	.word	0x004004b1
  40594c:	2040cb3c 	.word	0x2040cb3c
  405950:	00400bf9 	.word	0x00400bf9

00405954 <inet_aton>:
{
  405954:	b4f0      	push	{r4, r5, r6, r7}
  405956:	3801      	subs	r0, #1
  register u_long acc = 0, addr = 0;
  405958:	2400      	movs	r4, #0
  40595a:	4622      	mov	r2, r4
  int dots = 0;
  40595c:	4625      	mov	r5, r4
	        acc = 0;
  40595e:	4626      	mov	r6, r4
  405960:	e011      	b.n	405986 <inet_aton+0x32>
	  switch (cc) {
  405962:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
  405966:	2f09      	cmp	r7, #9
  405968:	d814      	bhi.n	405994 <inet_aton+0x40>
	        acc = acc * 10 + (cc - '0');
  40596a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40596e:	eb07 0242 	add.w	r2, r7, r2, lsl #1
	        break;
  405972:	e007      	b.n	405984 <inet_aton+0x30>
	        if (++dots > 3) {
  405974:	3501      	adds	r5, #1
  405976:	2d03      	cmp	r5, #3
  405978:	dc24      	bgt.n	4059c4 <inet_aton+0x70>
	        if (acc > 255) {
  40597a:	2aff      	cmp	r2, #255	; 0xff
  40597c:	d824      	bhi.n	4059c8 <inet_aton+0x74>
	        addr = addr << 8 | acc;
  40597e:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	        acc = 0;
  405982:	4632      	mov	r2, r6
  } while (*cp++) ;
  405984:	b14b      	cbz	r3, 40599a <inet_aton+0x46>
	  register char cc = *cp;
  405986:	f810 3f01 	ldrb.w	r3, [r0, #1]!
	  switch (cc) {
  40598a:	2b2e      	cmp	r3, #46	; 0x2e
  40598c:	d0f2      	beq.n	405974 <inet_aton+0x20>
  40598e:	d8e8      	bhi.n	405962 <inet_aton+0xe>
  405990:	2b00      	cmp	r3, #0
  405992:	d0f2      	beq.n	40597a <inet_aton+0x26>
	        return 0;
  405994:	2000      	movs	r0, #0
}
  405996:	bcf0      	pop	{r4, r5, r6, r7}
  405998:	4770      	bx	lr
  if (dots < 3) {
  40599a:	2d02      	cmp	r5, #2
  40599c:	dc03      	bgt.n	4059a6 <inet_aton+0x52>
	  addr <<= 8 * (3 - dots) ;
  40599e:	f1c5 0303 	rsb	r3, r5, #3
  4059a2:	00db      	lsls	r3, r3, #3
  4059a4:	409c      	lsls	r4, r3
  if (ap) {
  4059a6:	b189      	cbz	r1, 4059cc <inet_aton+0x78>
	  ap->s_addr = _htonl(addr);
  4059a8:	0e23      	lsrs	r3, r4, #24
  4059aa:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  4059ae:	0222      	lsls	r2, r4, #8
  4059b0:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  4059b4:	431a      	orrs	r2, r3
  4059b6:	0a23      	lsrs	r3, r4, #8
  4059b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  4059bc:	4313      	orrs	r3, r2
  4059be:	600b      	str	r3, [r1, #0]
  return 1;    
  4059c0:	2001      	movs	r0, #1
  4059c2:	e7e8      	b.n	405996 <inet_aton+0x42>
		    return 0;
  4059c4:	2000      	movs	r0, #0
  4059c6:	e7e6      	b.n	405996 <inet_aton+0x42>
		    return 0;
  4059c8:	2000      	movs	r0, #0
  4059ca:	e7e4      	b.n	405996 <inet_aton+0x42>
  return 1;    
  4059cc:	2001      	movs	r0, #1
  4059ce:	e7e2      	b.n	405996 <inet_aton+0x42>

004059d0 <task_wifi>:
	}
}

static void task_wifi(void *pvParameters) {
  4059d0:	b570      	push	{r4, r5, r6, lr}
  4059d2:	b08c      	sub	sp, #48	; 0x30
	uint8_t mac_addr[6];
	uint8_t u8IsMacAddrValid;
	struct sockaddr_in addr_in;
	
	/* Initialize the BSP. */
	nm_bsp_init();
  4059d4:	4b33      	ldr	r3, [pc, #204]	; (405aa4 <task_wifi+0xd4>)
  4059d6:	4798      	blx	r3
	
	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  4059d8:	2300      	movs	r3, #0
  4059da:	9307      	str	r3, [sp, #28]
  4059dc:	9308      	str	r3, [sp, #32]
  4059de:	9309      	str	r3, [sp, #36]	; 0x24
  4059e0:	930a      	str	r3, [sp, #40]	; 0x28
  4059e2:	930b      	str	r3, [sp, #44]	; 0x2c

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
  4059e4:	4b30      	ldr	r3, [pc, #192]	; (405aa8 <task_wifi+0xd8>)
  4059e6:	9306      	str	r3, [sp, #24]
	ret = m2m_wifi_init(&param);
  4059e8:	a806      	add	r0, sp, #24
  4059ea:	4b30      	ldr	r3, [pc, #192]	; (405aac <task_wifi+0xdc>)
  4059ec:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4059ee:	b120      	cbz	r0, 4059fa <task_wifi+0x2a>
  4059f0:	4601      	mov	r1, r0
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  4059f2:	482f      	ldr	r0, [pc, #188]	; (405ab0 <task_wifi+0xe0>)
  4059f4:	4b2f      	ldr	r3, [pc, #188]	; (405ab4 <task_wifi+0xe4>)
  4059f6:	4798      	blx	r3
  4059f8:	e7fe      	b.n	4059f8 <task_wifi+0x28>
		while (1) {
		}
	}
	
	/* Initialize socket module. */
	socketInit();
  4059fa:	4b2f      	ldr	r3, [pc, #188]	; (405ab8 <task_wifi+0xe8>)
  4059fc:	4798      	blx	r3

	/* Register socket callback function. */
	registerSocketCallback(socket_cb, resolve_cb);
  4059fe:	492f      	ldr	r1, [pc, #188]	; (405abc <task_wifi+0xec>)
  405a00:	482f      	ldr	r0, [pc, #188]	; (405ac0 <task_wifi+0xf0>)
  405a02:	4b30      	ldr	r3, [pc, #192]	; (405ac4 <task_wifi+0xf4>)
  405a04:	4798      	blx	r3

	/* Connect to router. */
	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
  405a06:	4d30      	ldr	r5, [pc, #192]	; (405ac8 <task_wifi+0xf8>)
  405a08:	4629      	mov	r1, r5
  405a0a:	4830      	ldr	r0, [pc, #192]	; (405acc <task_wifi+0xfc>)
  405a0c:	4c29      	ldr	r4, [pc, #164]	; (405ab4 <task_wifi+0xe4>)
  405a0e:	47a0      	blx	r4
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  405a10:	23ff      	movs	r3, #255	; 0xff
  405a12:	9300      	str	r3, [sp, #0]
  405a14:	4b2e      	ldr	r3, [pc, #184]	; (405ad0 <task_wifi+0x100>)
  405a16:	2202      	movs	r2, #2
  405a18:	210a      	movs	r1, #10
  405a1a:	4628      	mov	r0, r5
  405a1c:	4d2d      	ldr	r5, [pc, #180]	; (405ad4 <task_wifi+0x104>)
  405a1e:	47a8      	blx	r5

	addr_in.sin_family = AF_INET;
  405a20:	2302      	movs	r3, #2
  405a22:	f8ad 3008 	strh.w	r3, [sp, #8]
	addr_in.sin_port = _htons(MAIN_SERVER_PORT);
  405a26:	f648 0313 	movw	r3, #34835	; 0x8813
  405a2a:	f8ad 300a 	strh.w	r3, [sp, #10]
	inet_aton(MAIN_SERVER_NAME, &addr_in.sin_addr);
  405a2e:	a903      	add	r1, sp, #12
  405a30:	4829      	ldr	r0, [pc, #164]	; (405ad8 <task_wifi+0x108>)
  405a32:	4b2a      	ldr	r3, [pc, #168]	; (405adc <task_wifi+0x10c>)
  405a34:	4798      	blx	r3
	printf("Inet aton : %d", addr_in.sin_addr);
  405a36:	9903      	ldr	r1, [sp, #12]
  405a38:	4829      	ldr	r0, [pc, #164]	; (405ae0 <task_wifi+0x110>)
  405a3a:	47a0      	blx	r4
	
  while(1){
	  m2m_wifi_handle_events(NULL);
  405a3c:	4d29      	ldr	r5, [pc, #164]	; (405ae4 <task_wifi+0x114>)

	  if (wifi_connected == M2M_WIFI_CONNECTED) {
  405a3e:	4c2a      	ldr	r4, [pc, #168]	; (405ae8 <task_wifi+0x118>)
		  /* Open client socket. */
		  if (tcp_client_socket < 0) {
  405a40:	4e2a      	ldr	r6, [pc, #168]	; (405aec <task_wifi+0x11c>)
  405a42:	e002      	b.n	405a4a <task_wifi+0x7a>
			  printf("socket init \n");
			  if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
				  printf("main: failed to create TCP client socket error!\r\n");
  405a44:	482a      	ldr	r0, [pc, #168]	; (405af0 <task_wifi+0x120>)
  405a46:	4b1b      	ldr	r3, [pc, #108]	; (405ab4 <task_wifi+0xe4>)
  405a48:	4798      	blx	r3
	  m2m_wifi_handle_events(NULL);
  405a4a:	2000      	movs	r0, #0
  405a4c:	47a8      	blx	r5
	  if (wifi_connected == M2M_WIFI_CONNECTED) {
  405a4e:	7823      	ldrb	r3, [r4, #0]
  405a50:	2b01      	cmp	r3, #1
  405a52:	d1fa      	bne.n	405a4a <task_wifi+0x7a>
		  if (tcp_client_socket < 0) {
  405a54:	f996 3000 	ldrsb.w	r3, [r6]
  405a58:	2b00      	cmp	r3, #0
  405a5a:	daf6      	bge.n	405a4a <task_wifi+0x7a>
			  printf("socket init \n");
  405a5c:	4825      	ldr	r0, [pc, #148]	; (405af4 <task_wifi+0x124>)
  405a5e:	4b15      	ldr	r3, [pc, #84]	; (405ab4 <task_wifi+0xe4>)
  405a60:	4798      	blx	r3
			  if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  405a62:	2200      	movs	r2, #0
  405a64:	2101      	movs	r1, #1
  405a66:	2002      	movs	r0, #2
  405a68:	4b23      	ldr	r3, [pc, #140]	; (405af8 <task_wifi+0x128>)
  405a6a:	4798      	blx	r3
  405a6c:	7030      	strb	r0, [r6, #0]
  405a6e:	2800      	cmp	r0, #0
  405a70:	dbe8      	blt.n	405a44 <task_wifi+0x74>
				  continue;
			  }

			  /* Connect server */
			  printf("socket connecting\n");
  405a72:	4822      	ldr	r0, [pc, #136]	; (405afc <task_wifi+0x12c>)
  405a74:	4b0f      	ldr	r3, [pc, #60]	; (405ab4 <task_wifi+0xe4>)
  405a76:	4798      	blx	r3
			  
			  if (connect(tcp_client_socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
  405a78:	2210      	movs	r2, #16
  405a7a:	a902      	add	r1, sp, #8
  405a7c:	f996 0000 	ldrsb.w	r0, [r6]
  405a80:	4b1f      	ldr	r3, [pc, #124]	; (405b00 <task_wifi+0x130>)
  405a82:	4798      	blx	r3
  405a84:	b918      	cbnz	r0, 405a8e <task_wifi+0xbe>
				  close(tcp_client_socket);
				  tcp_client_socket = -1;
				  printf("error\n");
				  }else{
				  gbTcpConnection = true;
  405a86:	2201      	movs	r2, #1
  405a88:	4b1e      	ldr	r3, [pc, #120]	; (405b04 <task_wifi+0x134>)
  405a8a:	701a      	strb	r2, [r3, #0]
  405a8c:	e7dd      	b.n	405a4a <task_wifi+0x7a>
				  close(tcp_client_socket);
  405a8e:	f996 0000 	ldrsb.w	r0, [r6]
  405a92:	4b1d      	ldr	r3, [pc, #116]	; (405b08 <task_wifi+0x138>)
  405a94:	4798      	blx	r3
				  tcp_client_socket = -1;
  405a96:	23ff      	movs	r3, #255	; 0xff
  405a98:	7033      	strb	r3, [r6, #0]
				  printf("error\n");
  405a9a:	481c      	ldr	r0, [pc, #112]	; (405b0c <task_wifi+0x13c>)
  405a9c:	4b05      	ldr	r3, [pc, #20]	; (405ab4 <task_wifi+0xe4>)
  405a9e:	4798      	blx	r3
  405aa0:	e7d3      	b.n	405a4a <task_wifi+0x7a>
  405aa2:	bf00      	nop
  405aa4:	00401d01 	.word	0x00401d01
  405aa8:	004056b9 	.word	0x004056b9
  405aac:	00402b41 	.word	0x00402b41
  405ab0:	0040996c 	.word	0x0040996c
  405ab4:	00405c79 	.word	0x00405c79
  405ab8:	004042f1 	.word	0x004042f1
  405abc:	00405499 	.word	0x00405499
  405ac0:	00405591 	.word	0x00405591
  405ac4:	00404335 	.word	0x00404335
  405ac8:	00409994 	.word	0x00409994
  405acc:	004099a0 	.word	0x004099a0
  405ad0:	004099c4 	.word	0x004099c4
  405ad4:	00402e99 	.word	0x00402e99
  405ad8:	004099d0 	.word	0x004099d0
  405adc:	00405955 	.word	0x00405955
  405ae0:	004099e0 	.word	0x004099e0
  405ae4:	00402c3d 	.word	0x00402c3d
  405ae8:	2040c95c 	.word	0x2040c95c
  405aec:	20400020 	.word	0x20400020
  405af0:	00409a00 	.word	0x00409a00
  405af4:	004099f0 	.word	0x004099f0
  405af8:	00404349 	.word	0x00404349
  405afc:	00409a34 	.word	0x00409a34
  405b00:	00404429 	.word	0x00404429
  405b04:	2040c954 	.word	0x2040c954
  405b08:	004045f5 	.word	0x004045f5
  405b0c:	00409a48 	.word	0x00409a48

00405b10 <main>:
 * Initialize system, UART console, network then start weather client.
 *
 * \return Program return value.
 */
int main(void)
{
  405b10:	b580      	push	{r7, lr}
  405b12:	b08a      	sub	sp, #40	; 0x28
	/* Initialize the board. */
	sysclk_init();
  405b14:	4b2b      	ldr	r3, [pc, #172]	; (405bc4 <main+0xb4>)
  405b16:	4798      	blx	r3
	board_init();
  405b18:	4b2b      	ldr	r3, [pc, #172]	; (405bc8 <main+0xb8>)
  405b1a:	4798      	blx	r3
  405b1c:	200e      	movs	r0, #14
  405b1e:	4f2b      	ldr	r7, [pc, #172]	; (405bcc <main+0xbc>)
  405b20:	47b8      	blx	r7
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  405b22:	4d2b      	ldr	r5, [pc, #172]	; (405bd0 <main+0xc0>)
  405b24:	4b2b      	ldr	r3, [pc, #172]	; (405bd4 <main+0xc4>)
  405b26:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  405b28:	4a2b      	ldr	r2, [pc, #172]	; (405bd8 <main+0xc8>)
  405b2a:	4b2c      	ldr	r3, [pc, #176]	; (405bdc <main+0xcc>)
  405b2c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  405b2e:	4a2c      	ldr	r2, [pc, #176]	; (405be0 <main+0xd0>)
  405b30:	4b2c      	ldr	r3, [pc, #176]	; (405be4 <main+0xd4>)
  405b32:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  405b34:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  405b38:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  405b3a:	23c0      	movs	r3, #192	; 0xc0
  405b3c:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  405b3e:	f44f 6600 	mov.w	r6, #2048	; 0x800
  405b42:	9606      	str	r6, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  405b44:	2400      	movs	r4, #0
  405b46:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  405b48:	9408      	str	r4, [sp, #32]
  405b4a:	200e      	movs	r0, #14
  405b4c:	47b8      	blx	r7
		usart_init_rs232(p_usart, &usart_settings,
  405b4e:	4a26      	ldr	r2, [pc, #152]	; (405be8 <main+0xd8>)
  405b50:	a904      	add	r1, sp, #16
  405b52:	4628      	mov	r0, r5
  405b54:	4b25      	ldr	r3, [pc, #148]	; (405bec <main+0xdc>)
  405b56:	4798      	blx	r3
		usart_enable_tx(p_usart);
  405b58:	4628      	mov	r0, r5
  405b5a:	4b25      	ldr	r3, [pc, #148]	; (405bf0 <main+0xe0>)
  405b5c:	4798      	blx	r3
		usart_enable_rx(p_usart);
  405b5e:	4628      	mov	r0, r5
  405b60:	4b24      	ldr	r3, [pc, #144]	; (405bf4 <main+0xe4>)
  405b62:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  405b64:	4f24      	ldr	r7, [pc, #144]	; (405bf8 <main+0xe8>)
  405b66:	683b      	ldr	r3, [r7, #0]
  405b68:	4621      	mov	r1, r4
  405b6a:	6898      	ldr	r0, [r3, #8]
  405b6c:	4d23      	ldr	r5, [pc, #140]	; (405bfc <main+0xec>)
  405b6e:	47a8      	blx	r5
	setbuf(stdin, NULL);
  405b70:	683b      	ldr	r3, [r7, #0]
  405b72:	4621      	mov	r1, r4
  405b74:	6858      	ldr	r0, [r3, #4]
  405b76:	47a8      	blx	r5

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
  405b78:	4821      	ldr	r0, [pc, #132]	; (405c00 <main+0xf0>)
  405b7a:	4b22      	ldr	r3, [pc, #136]	; (405c04 <main+0xf4>)
  405b7c:	4798      	blx	r3
	
	
	if (xTaskCreate(task_wifi, "Wifi", TASK_WIFI_STACK_SIZE, NULL,TASK_WIFI_STACK_PRIORITY, NULL) != pdPASS) {
  405b7e:	9403      	str	r4, [sp, #12]
  405b80:	9402      	str	r4, [sp, #8]
  405b82:	9401      	str	r4, [sp, #4]
  405b84:	9400      	str	r4, [sp, #0]
  405b86:	4623      	mov	r3, r4
  405b88:	4632      	mov	r2, r6
  405b8a:	491f      	ldr	r1, [pc, #124]	; (405c08 <main+0xf8>)
  405b8c:	481f      	ldr	r0, [pc, #124]	; (405c0c <main+0xfc>)
  405b8e:	4c20      	ldr	r4, [pc, #128]	; (405c10 <main+0x100>)
  405b90:	47a0      	blx	r4
  405b92:	2801      	cmp	r0, #1
  405b94:	d002      	beq.n	405b9c <main+0x8c>
		printf("Failed to create Wifi task\r\n");
  405b96:	481f      	ldr	r0, [pc, #124]	; (405c14 <main+0x104>)
  405b98:	4b1a      	ldr	r3, [pc, #104]	; (405c04 <main+0xf4>)
  405b9a:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_afec, "afec", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_STACK_PRIORITY, NULL) != pdPASS) {
  405b9c:	2300      	movs	r3, #0
  405b9e:	9303      	str	r3, [sp, #12]
  405ba0:	9302      	str	r3, [sp, #8]
  405ba2:	9301      	str	r3, [sp, #4]
  405ba4:	9300      	str	r3, [sp, #0]
  405ba6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  405baa:	491b      	ldr	r1, [pc, #108]	; (405c18 <main+0x108>)
  405bac:	481b      	ldr	r0, [pc, #108]	; (405c1c <main+0x10c>)
  405bae:	4c18      	ldr	r4, [pc, #96]	; (405c10 <main+0x100>)
  405bb0:	47a0      	blx	r4
  405bb2:	2801      	cmp	r0, #1
  405bb4:	d002      	beq.n	405bbc <main+0xac>
		printf("Failed to create test afec task\r\n");
  405bb6:	481a      	ldr	r0, [pc, #104]	; (405c20 <main+0x110>)
  405bb8:	4b12      	ldr	r3, [pc, #72]	; (405c04 <main+0xf4>)
  405bba:	4798      	blx	r3
	}


	vTaskStartScheduler();
  405bbc:	4b19      	ldr	r3, [pc, #100]	; (405c24 <main+0x114>)
  405bbe:	4798      	blx	r3
  405bc0:	e7fe      	b.n	405bc0 <main+0xb0>
  405bc2:	bf00      	nop
  405bc4:	00404759 	.word	0x00404759
  405bc8:	00404855 	.word	0x00404855
  405bcc:	00404f21 	.word	0x00404f21
  405bd0:	40028000 	.word	0x40028000
  405bd4:	2040cb24 	.word	0x2040cb24
  405bd8:	004057fd 	.word	0x004057fd
  405bdc:	2040cb20 	.word	0x2040cb20
  405be0:	00405721 	.word	0x00405721
  405be4:	2040cb1c 	.word	0x2040cb1c
  405be8:	08f0d180 	.word	0x08f0d180
  405bec:	00405171 	.word	0x00405171
  405bf0:	004051c5 	.word	0x004051c5
  405bf4:	004051cb 	.word	0x004051cb
  405bf8:	20400024 	.word	0x20400024
  405bfc:	00405e71 	.word	0x00405e71
  405c00:	0040980c 	.word	0x0040980c
  405c04:	00405c79 	.word	0x00405c79
  405c08:	00409870 	.word	0x00409870
  405c0c:	004059d1 	.word	0x004059d1
  405c10:	00400f05 	.word	0x00400f05
  405c14:	00409878 	.word	0x00409878
  405c18:	00409898 	.word	0x00409898
  405c1c:	004054c9 	.word	0x004054c9
  405c20:	004098a0 	.word	0x004098a0
  405c24:	00401101 	.word	0x00401101

00405c28 <__libc_init_array>:
  405c28:	b570      	push	{r4, r5, r6, lr}
  405c2a:	4e0f      	ldr	r6, [pc, #60]	; (405c68 <__libc_init_array+0x40>)
  405c2c:	4d0f      	ldr	r5, [pc, #60]	; (405c6c <__libc_init_array+0x44>)
  405c2e:	1b76      	subs	r6, r6, r5
  405c30:	10b6      	asrs	r6, r6, #2
  405c32:	bf18      	it	ne
  405c34:	2400      	movne	r4, #0
  405c36:	d005      	beq.n	405c44 <__libc_init_array+0x1c>
  405c38:	3401      	adds	r4, #1
  405c3a:	f855 3b04 	ldr.w	r3, [r5], #4
  405c3e:	4798      	blx	r3
  405c40:	42a6      	cmp	r6, r4
  405c42:	d1f9      	bne.n	405c38 <__libc_init_array+0x10>
  405c44:	4e0a      	ldr	r6, [pc, #40]	; (405c70 <__libc_init_array+0x48>)
  405c46:	4d0b      	ldr	r5, [pc, #44]	; (405c74 <__libc_init_array+0x4c>)
  405c48:	1b76      	subs	r6, r6, r5
  405c4a:	f003 fff7 	bl	409c3c <_init>
  405c4e:	10b6      	asrs	r6, r6, #2
  405c50:	bf18      	it	ne
  405c52:	2400      	movne	r4, #0
  405c54:	d006      	beq.n	405c64 <__libc_init_array+0x3c>
  405c56:	3401      	adds	r4, #1
  405c58:	f855 3b04 	ldr.w	r3, [r5], #4
  405c5c:	4798      	blx	r3
  405c5e:	42a6      	cmp	r6, r4
  405c60:	d1f9      	bne.n	405c56 <__libc_init_array+0x2e>
  405c62:	bd70      	pop	{r4, r5, r6, pc}
  405c64:	bd70      	pop	{r4, r5, r6, pc}
  405c66:	bf00      	nop
  405c68:	00409c48 	.word	0x00409c48
  405c6c:	00409c48 	.word	0x00409c48
  405c70:	00409c50 	.word	0x00409c50
  405c74:	00409c48 	.word	0x00409c48

00405c78 <iprintf>:
  405c78:	b40f      	push	{r0, r1, r2, r3}
  405c7a:	b500      	push	{lr}
  405c7c:	4907      	ldr	r1, [pc, #28]	; (405c9c <iprintf+0x24>)
  405c7e:	b083      	sub	sp, #12
  405c80:	ab04      	add	r3, sp, #16
  405c82:	6808      	ldr	r0, [r1, #0]
  405c84:	f853 2b04 	ldr.w	r2, [r3], #4
  405c88:	6881      	ldr	r1, [r0, #8]
  405c8a:	9301      	str	r3, [sp, #4]
  405c8c:	f000 fa86 	bl	40619c <_vfiprintf_r>
  405c90:	b003      	add	sp, #12
  405c92:	f85d eb04 	ldr.w	lr, [sp], #4
  405c96:	b004      	add	sp, #16
  405c98:	4770      	bx	lr
  405c9a:	bf00      	nop
  405c9c:	20400024 	.word	0x20400024

00405ca0 <memcpy>:
  405ca0:	4684      	mov	ip, r0
  405ca2:	ea41 0300 	orr.w	r3, r1, r0
  405ca6:	f013 0303 	ands.w	r3, r3, #3
  405caa:	d16d      	bne.n	405d88 <memcpy+0xe8>
  405cac:	3a40      	subs	r2, #64	; 0x40
  405cae:	d341      	bcc.n	405d34 <memcpy+0x94>
  405cb0:	f851 3b04 	ldr.w	r3, [r1], #4
  405cb4:	f840 3b04 	str.w	r3, [r0], #4
  405cb8:	f851 3b04 	ldr.w	r3, [r1], #4
  405cbc:	f840 3b04 	str.w	r3, [r0], #4
  405cc0:	f851 3b04 	ldr.w	r3, [r1], #4
  405cc4:	f840 3b04 	str.w	r3, [r0], #4
  405cc8:	f851 3b04 	ldr.w	r3, [r1], #4
  405ccc:	f840 3b04 	str.w	r3, [r0], #4
  405cd0:	f851 3b04 	ldr.w	r3, [r1], #4
  405cd4:	f840 3b04 	str.w	r3, [r0], #4
  405cd8:	f851 3b04 	ldr.w	r3, [r1], #4
  405cdc:	f840 3b04 	str.w	r3, [r0], #4
  405ce0:	f851 3b04 	ldr.w	r3, [r1], #4
  405ce4:	f840 3b04 	str.w	r3, [r0], #4
  405ce8:	f851 3b04 	ldr.w	r3, [r1], #4
  405cec:	f840 3b04 	str.w	r3, [r0], #4
  405cf0:	f851 3b04 	ldr.w	r3, [r1], #4
  405cf4:	f840 3b04 	str.w	r3, [r0], #4
  405cf8:	f851 3b04 	ldr.w	r3, [r1], #4
  405cfc:	f840 3b04 	str.w	r3, [r0], #4
  405d00:	f851 3b04 	ldr.w	r3, [r1], #4
  405d04:	f840 3b04 	str.w	r3, [r0], #4
  405d08:	f851 3b04 	ldr.w	r3, [r1], #4
  405d0c:	f840 3b04 	str.w	r3, [r0], #4
  405d10:	f851 3b04 	ldr.w	r3, [r1], #4
  405d14:	f840 3b04 	str.w	r3, [r0], #4
  405d18:	f851 3b04 	ldr.w	r3, [r1], #4
  405d1c:	f840 3b04 	str.w	r3, [r0], #4
  405d20:	f851 3b04 	ldr.w	r3, [r1], #4
  405d24:	f840 3b04 	str.w	r3, [r0], #4
  405d28:	f851 3b04 	ldr.w	r3, [r1], #4
  405d2c:	f840 3b04 	str.w	r3, [r0], #4
  405d30:	3a40      	subs	r2, #64	; 0x40
  405d32:	d2bd      	bcs.n	405cb0 <memcpy+0x10>
  405d34:	3230      	adds	r2, #48	; 0x30
  405d36:	d311      	bcc.n	405d5c <memcpy+0xbc>
  405d38:	f851 3b04 	ldr.w	r3, [r1], #4
  405d3c:	f840 3b04 	str.w	r3, [r0], #4
  405d40:	f851 3b04 	ldr.w	r3, [r1], #4
  405d44:	f840 3b04 	str.w	r3, [r0], #4
  405d48:	f851 3b04 	ldr.w	r3, [r1], #4
  405d4c:	f840 3b04 	str.w	r3, [r0], #4
  405d50:	f851 3b04 	ldr.w	r3, [r1], #4
  405d54:	f840 3b04 	str.w	r3, [r0], #4
  405d58:	3a10      	subs	r2, #16
  405d5a:	d2ed      	bcs.n	405d38 <memcpy+0x98>
  405d5c:	320c      	adds	r2, #12
  405d5e:	d305      	bcc.n	405d6c <memcpy+0xcc>
  405d60:	f851 3b04 	ldr.w	r3, [r1], #4
  405d64:	f840 3b04 	str.w	r3, [r0], #4
  405d68:	3a04      	subs	r2, #4
  405d6a:	d2f9      	bcs.n	405d60 <memcpy+0xc0>
  405d6c:	3204      	adds	r2, #4
  405d6e:	d008      	beq.n	405d82 <memcpy+0xe2>
  405d70:	07d2      	lsls	r2, r2, #31
  405d72:	bf1c      	itt	ne
  405d74:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405d78:	f800 3b01 	strbne.w	r3, [r0], #1
  405d7c:	d301      	bcc.n	405d82 <memcpy+0xe2>
  405d7e:	880b      	ldrh	r3, [r1, #0]
  405d80:	8003      	strh	r3, [r0, #0]
  405d82:	4660      	mov	r0, ip
  405d84:	4770      	bx	lr
  405d86:	bf00      	nop
  405d88:	2a08      	cmp	r2, #8
  405d8a:	d313      	bcc.n	405db4 <memcpy+0x114>
  405d8c:	078b      	lsls	r3, r1, #30
  405d8e:	d08d      	beq.n	405cac <memcpy+0xc>
  405d90:	f010 0303 	ands.w	r3, r0, #3
  405d94:	d08a      	beq.n	405cac <memcpy+0xc>
  405d96:	f1c3 0304 	rsb	r3, r3, #4
  405d9a:	1ad2      	subs	r2, r2, r3
  405d9c:	07db      	lsls	r3, r3, #31
  405d9e:	bf1c      	itt	ne
  405da0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405da4:	f800 3b01 	strbne.w	r3, [r0], #1
  405da8:	d380      	bcc.n	405cac <memcpy+0xc>
  405daa:	f831 3b02 	ldrh.w	r3, [r1], #2
  405dae:	f820 3b02 	strh.w	r3, [r0], #2
  405db2:	e77b      	b.n	405cac <memcpy+0xc>
  405db4:	3a04      	subs	r2, #4
  405db6:	d3d9      	bcc.n	405d6c <memcpy+0xcc>
  405db8:	3a01      	subs	r2, #1
  405dba:	f811 3b01 	ldrb.w	r3, [r1], #1
  405dbe:	f800 3b01 	strb.w	r3, [r0], #1
  405dc2:	d2f9      	bcs.n	405db8 <memcpy+0x118>
  405dc4:	780b      	ldrb	r3, [r1, #0]
  405dc6:	7003      	strb	r3, [r0, #0]
  405dc8:	784b      	ldrb	r3, [r1, #1]
  405dca:	7043      	strb	r3, [r0, #1]
  405dcc:	788b      	ldrb	r3, [r1, #2]
  405dce:	7083      	strb	r3, [r0, #2]
  405dd0:	4660      	mov	r0, ip
  405dd2:	4770      	bx	lr

00405dd4 <memset>:
  405dd4:	b470      	push	{r4, r5, r6}
  405dd6:	0786      	lsls	r6, r0, #30
  405dd8:	d046      	beq.n	405e68 <memset+0x94>
  405dda:	1e54      	subs	r4, r2, #1
  405ddc:	2a00      	cmp	r2, #0
  405dde:	d041      	beq.n	405e64 <memset+0x90>
  405de0:	b2ca      	uxtb	r2, r1
  405de2:	4603      	mov	r3, r0
  405de4:	e002      	b.n	405dec <memset+0x18>
  405de6:	f114 34ff 	adds.w	r4, r4, #4294967295
  405dea:	d33b      	bcc.n	405e64 <memset+0x90>
  405dec:	f803 2b01 	strb.w	r2, [r3], #1
  405df0:	079d      	lsls	r5, r3, #30
  405df2:	d1f8      	bne.n	405de6 <memset+0x12>
  405df4:	2c03      	cmp	r4, #3
  405df6:	d92e      	bls.n	405e56 <memset+0x82>
  405df8:	b2cd      	uxtb	r5, r1
  405dfa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  405dfe:	2c0f      	cmp	r4, #15
  405e00:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  405e04:	d919      	bls.n	405e3a <memset+0x66>
  405e06:	f103 0210 	add.w	r2, r3, #16
  405e0a:	4626      	mov	r6, r4
  405e0c:	3e10      	subs	r6, #16
  405e0e:	2e0f      	cmp	r6, #15
  405e10:	f842 5c10 	str.w	r5, [r2, #-16]
  405e14:	f842 5c0c 	str.w	r5, [r2, #-12]
  405e18:	f842 5c08 	str.w	r5, [r2, #-8]
  405e1c:	f842 5c04 	str.w	r5, [r2, #-4]
  405e20:	f102 0210 	add.w	r2, r2, #16
  405e24:	d8f2      	bhi.n	405e0c <memset+0x38>
  405e26:	f1a4 0210 	sub.w	r2, r4, #16
  405e2a:	f022 020f 	bic.w	r2, r2, #15
  405e2e:	f004 040f 	and.w	r4, r4, #15
  405e32:	3210      	adds	r2, #16
  405e34:	2c03      	cmp	r4, #3
  405e36:	4413      	add	r3, r2
  405e38:	d90d      	bls.n	405e56 <memset+0x82>
  405e3a:	461e      	mov	r6, r3
  405e3c:	4622      	mov	r2, r4
  405e3e:	3a04      	subs	r2, #4
  405e40:	2a03      	cmp	r2, #3
  405e42:	f846 5b04 	str.w	r5, [r6], #4
  405e46:	d8fa      	bhi.n	405e3e <memset+0x6a>
  405e48:	1f22      	subs	r2, r4, #4
  405e4a:	f022 0203 	bic.w	r2, r2, #3
  405e4e:	3204      	adds	r2, #4
  405e50:	4413      	add	r3, r2
  405e52:	f004 0403 	and.w	r4, r4, #3
  405e56:	b12c      	cbz	r4, 405e64 <memset+0x90>
  405e58:	b2c9      	uxtb	r1, r1
  405e5a:	441c      	add	r4, r3
  405e5c:	f803 1b01 	strb.w	r1, [r3], #1
  405e60:	429c      	cmp	r4, r3
  405e62:	d1fb      	bne.n	405e5c <memset+0x88>
  405e64:	bc70      	pop	{r4, r5, r6}
  405e66:	4770      	bx	lr
  405e68:	4614      	mov	r4, r2
  405e6a:	4603      	mov	r3, r0
  405e6c:	e7c2      	b.n	405df4 <memset+0x20>
  405e6e:	bf00      	nop

00405e70 <setbuf>:
  405e70:	2900      	cmp	r1, #0
  405e72:	bf0c      	ite	eq
  405e74:	2202      	moveq	r2, #2
  405e76:	2200      	movne	r2, #0
  405e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405e7c:	f000 b800 	b.w	405e80 <setvbuf>

00405e80 <setvbuf>:
  405e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405e84:	4c61      	ldr	r4, [pc, #388]	; (40600c <setvbuf+0x18c>)
  405e86:	6825      	ldr	r5, [r4, #0]
  405e88:	b083      	sub	sp, #12
  405e8a:	4604      	mov	r4, r0
  405e8c:	460f      	mov	r7, r1
  405e8e:	4690      	mov	r8, r2
  405e90:	461e      	mov	r6, r3
  405e92:	b115      	cbz	r5, 405e9a <setvbuf+0x1a>
  405e94:	6bab      	ldr	r3, [r5, #56]	; 0x38
  405e96:	2b00      	cmp	r3, #0
  405e98:	d064      	beq.n	405f64 <setvbuf+0xe4>
  405e9a:	f1b8 0f02 	cmp.w	r8, #2
  405e9e:	d006      	beq.n	405eae <setvbuf+0x2e>
  405ea0:	f1b8 0f01 	cmp.w	r8, #1
  405ea4:	f200 809f 	bhi.w	405fe6 <setvbuf+0x166>
  405ea8:	2e00      	cmp	r6, #0
  405eaa:	f2c0 809c 	blt.w	405fe6 <setvbuf+0x166>
  405eae:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405eb0:	07d8      	lsls	r0, r3, #31
  405eb2:	d534      	bpl.n	405f1e <setvbuf+0x9e>
  405eb4:	4621      	mov	r1, r4
  405eb6:	4628      	mov	r0, r5
  405eb8:	f001 f90e 	bl	4070d8 <_fflush_r>
  405ebc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405ebe:	b141      	cbz	r1, 405ed2 <setvbuf+0x52>
  405ec0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405ec4:	4299      	cmp	r1, r3
  405ec6:	d002      	beq.n	405ece <setvbuf+0x4e>
  405ec8:	4628      	mov	r0, r5
  405eca:	f001 fa83 	bl	4073d4 <_free_r>
  405ece:	2300      	movs	r3, #0
  405ed0:	6323      	str	r3, [r4, #48]	; 0x30
  405ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405ed6:	2200      	movs	r2, #0
  405ed8:	61a2      	str	r2, [r4, #24]
  405eda:	6062      	str	r2, [r4, #4]
  405edc:	061a      	lsls	r2, r3, #24
  405ede:	d43a      	bmi.n	405f56 <setvbuf+0xd6>
  405ee0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  405ee4:	f023 0303 	bic.w	r3, r3, #3
  405ee8:	f1b8 0f02 	cmp.w	r8, #2
  405eec:	81a3      	strh	r3, [r4, #12]
  405eee:	d01d      	beq.n	405f2c <setvbuf+0xac>
  405ef0:	ab01      	add	r3, sp, #4
  405ef2:	466a      	mov	r2, sp
  405ef4:	4621      	mov	r1, r4
  405ef6:	4628      	mov	r0, r5
  405ef8:	f001 fd0a 	bl	407910 <__swhatbuf_r>
  405efc:	89a3      	ldrh	r3, [r4, #12]
  405efe:	4318      	orrs	r0, r3
  405f00:	81a0      	strh	r0, [r4, #12]
  405f02:	2e00      	cmp	r6, #0
  405f04:	d132      	bne.n	405f6c <setvbuf+0xec>
  405f06:	9e00      	ldr	r6, [sp, #0]
  405f08:	4630      	mov	r0, r6
  405f0a:	f001 fd79 	bl	407a00 <malloc>
  405f0e:	4607      	mov	r7, r0
  405f10:	2800      	cmp	r0, #0
  405f12:	d06b      	beq.n	405fec <setvbuf+0x16c>
  405f14:	89a3      	ldrh	r3, [r4, #12]
  405f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405f1a:	81a3      	strh	r3, [r4, #12]
  405f1c:	e028      	b.n	405f70 <setvbuf+0xf0>
  405f1e:	89a3      	ldrh	r3, [r4, #12]
  405f20:	0599      	lsls	r1, r3, #22
  405f22:	d4c7      	bmi.n	405eb4 <setvbuf+0x34>
  405f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405f26:	f001 fcef 	bl	407908 <__retarget_lock_acquire_recursive>
  405f2a:	e7c3      	b.n	405eb4 <setvbuf+0x34>
  405f2c:	2500      	movs	r5, #0
  405f2e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  405f30:	2600      	movs	r6, #0
  405f32:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405f36:	f043 0302 	orr.w	r3, r3, #2
  405f3a:	2001      	movs	r0, #1
  405f3c:	60a6      	str	r6, [r4, #8]
  405f3e:	07ce      	lsls	r6, r1, #31
  405f40:	81a3      	strh	r3, [r4, #12]
  405f42:	6022      	str	r2, [r4, #0]
  405f44:	6122      	str	r2, [r4, #16]
  405f46:	6160      	str	r0, [r4, #20]
  405f48:	d401      	bmi.n	405f4e <setvbuf+0xce>
  405f4a:	0598      	lsls	r0, r3, #22
  405f4c:	d53e      	bpl.n	405fcc <setvbuf+0x14c>
  405f4e:	4628      	mov	r0, r5
  405f50:	b003      	add	sp, #12
  405f52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405f56:	6921      	ldr	r1, [r4, #16]
  405f58:	4628      	mov	r0, r5
  405f5a:	f001 fa3b 	bl	4073d4 <_free_r>
  405f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405f62:	e7bd      	b.n	405ee0 <setvbuf+0x60>
  405f64:	4628      	mov	r0, r5
  405f66:	f001 f90f 	bl	407188 <__sinit>
  405f6a:	e796      	b.n	405e9a <setvbuf+0x1a>
  405f6c:	2f00      	cmp	r7, #0
  405f6e:	d0cb      	beq.n	405f08 <setvbuf+0x88>
  405f70:	6bab      	ldr	r3, [r5, #56]	; 0x38
  405f72:	2b00      	cmp	r3, #0
  405f74:	d033      	beq.n	405fde <setvbuf+0x15e>
  405f76:	9b00      	ldr	r3, [sp, #0]
  405f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405f7c:	6027      	str	r7, [r4, #0]
  405f7e:	429e      	cmp	r6, r3
  405f80:	bf1c      	itt	ne
  405f82:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  405f86:	81a2      	strhne	r2, [r4, #12]
  405f88:	f1b8 0f01 	cmp.w	r8, #1
  405f8c:	bf04      	itt	eq
  405f8e:	f042 0201 	orreq.w	r2, r2, #1
  405f92:	81a2      	strheq	r2, [r4, #12]
  405f94:	b292      	uxth	r2, r2
  405f96:	f012 0308 	ands.w	r3, r2, #8
  405f9a:	6127      	str	r7, [r4, #16]
  405f9c:	6166      	str	r6, [r4, #20]
  405f9e:	d00e      	beq.n	405fbe <setvbuf+0x13e>
  405fa0:	07d1      	lsls	r1, r2, #31
  405fa2:	d51a      	bpl.n	405fda <setvbuf+0x15a>
  405fa4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  405fa6:	4276      	negs	r6, r6
  405fa8:	2300      	movs	r3, #0
  405faa:	f015 0501 	ands.w	r5, r5, #1
  405fae:	61a6      	str	r6, [r4, #24]
  405fb0:	60a3      	str	r3, [r4, #8]
  405fb2:	d009      	beq.n	405fc8 <setvbuf+0x148>
  405fb4:	2500      	movs	r5, #0
  405fb6:	4628      	mov	r0, r5
  405fb8:	b003      	add	sp, #12
  405fba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405fbe:	60a3      	str	r3, [r4, #8]
  405fc0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  405fc2:	f015 0501 	ands.w	r5, r5, #1
  405fc6:	d1f5      	bne.n	405fb4 <setvbuf+0x134>
  405fc8:	0593      	lsls	r3, r2, #22
  405fca:	d4c0      	bmi.n	405f4e <setvbuf+0xce>
  405fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405fce:	f001 fc9d 	bl	40790c <__retarget_lock_release_recursive>
  405fd2:	4628      	mov	r0, r5
  405fd4:	b003      	add	sp, #12
  405fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405fda:	60a6      	str	r6, [r4, #8]
  405fdc:	e7f0      	b.n	405fc0 <setvbuf+0x140>
  405fde:	4628      	mov	r0, r5
  405fe0:	f001 f8d2 	bl	407188 <__sinit>
  405fe4:	e7c7      	b.n	405f76 <setvbuf+0xf6>
  405fe6:	f04f 35ff 	mov.w	r5, #4294967295
  405fea:	e7b0      	b.n	405f4e <setvbuf+0xce>
  405fec:	f8dd 9000 	ldr.w	r9, [sp]
  405ff0:	45b1      	cmp	r9, r6
  405ff2:	d004      	beq.n	405ffe <setvbuf+0x17e>
  405ff4:	4648      	mov	r0, r9
  405ff6:	f001 fd03 	bl	407a00 <malloc>
  405ffa:	4607      	mov	r7, r0
  405ffc:	b920      	cbnz	r0, 406008 <setvbuf+0x188>
  405ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406002:	f04f 35ff 	mov.w	r5, #4294967295
  406006:	e792      	b.n	405f2e <setvbuf+0xae>
  406008:	464e      	mov	r6, r9
  40600a:	e783      	b.n	405f14 <setvbuf+0x94>
  40600c:	20400024 	.word	0x20400024
	...

00406040 <strlen>:
  406040:	f890 f000 	pld	[r0]
  406044:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406048:	f020 0107 	bic.w	r1, r0, #7
  40604c:	f06f 0c00 	mvn.w	ip, #0
  406050:	f010 0407 	ands.w	r4, r0, #7
  406054:	f891 f020 	pld	[r1, #32]
  406058:	f040 8049 	bne.w	4060ee <strlen+0xae>
  40605c:	f04f 0400 	mov.w	r4, #0
  406060:	f06f 0007 	mvn.w	r0, #7
  406064:	e9d1 2300 	ldrd	r2, r3, [r1]
  406068:	f891 f040 	pld	[r1, #64]	; 0x40
  40606c:	f100 0008 	add.w	r0, r0, #8
  406070:	fa82 f24c 	uadd8	r2, r2, ip
  406074:	faa4 f28c 	sel	r2, r4, ip
  406078:	fa83 f34c 	uadd8	r3, r3, ip
  40607c:	faa2 f38c 	sel	r3, r2, ip
  406080:	bb4b      	cbnz	r3, 4060d6 <strlen+0x96>
  406082:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406086:	fa82 f24c 	uadd8	r2, r2, ip
  40608a:	f100 0008 	add.w	r0, r0, #8
  40608e:	faa4 f28c 	sel	r2, r4, ip
  406092:	fa83 f34c 	uadd8	r3, r3, ip
  406096:	faa2 f38c 	sel	r3, r2, ip
  40609a:	b9e3      	cbnz	r3, 4060d6 <strlen+0x96>
  40609c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4060a0:	fa82 f24c 	uadd8	r2, r2, ip
  4060a4:	f100 0008 	add.w	r0, r0, #8
  4060a8:	faa4 f28c 	sel	r2, r4, ip
  4060ac:	fa83 f34c 	uadd8	r3, r3, ip
  4060b0:	faa2 f38c 	sel	r3, r2, ip
  4060b4:	b97b      	cbnz	r3, 4060d6 <strlen+0x96>
  4060b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4060ba:	f101 0120 	add.w	r1, r1, #32
  4060be:	fa82 f24c 	uadd8	r2, r2, ip
  4060c2:	f100 0008 	add.w	r0, r0, #8
  4060c6:	faa4 f28c 	sel	r2, r4, ip
  4060ca:	fa83 f34c 	uadd8	r3, r3, ip
  4060ce:	faa2 f38c 	sel	r3, r2, ip
  4060d2:	2b00      	cmp	r3, #0
  4060d4:	d0c6      	beq.n	406064 <strlen+0x24>
  4060d6:	2a00      	cmp	r2, #0
  4060d8:	bf04      	itt	eq
  4060da:	3004      	addeq	r0, #4
  4060dc:	461a      	moveq	r2, r3
  4060de:	ba12      	rev	r2, r2
  4060e0:	fab2 f282 	clz	r2, r2
  4060e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4060e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4060ec:	4770      	bx	lr
  4060ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4060f2:	f004 0503 	and.w	r5, r4, #3
  4060f6:	f1c4 0000 	rsb	r0, r4, #0
  4060fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4060fe:	f014 0f04 	tst.w	r4, #4
  406102:	f891 f040 	pld	[r1, #64]	; 0x40
  406106:	fa0c f505 	lsl.w	r5, ip, r5
  40610a:	ea62 0205 	orn	r2, r2, r5
  40610e:	bf1c      	itt	ne
  406110:	ea63 0305 	ornne	r3, r3, r5
  406114:	4662      	movne	r2, ip
  406116:	f04f 0400 	mov.w	r4, #0
  40611a:	e7a9      	b.n	406070 <strlen+0x30>

0040611c <__sprint_r.part.0>:
  40611c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406120:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  406122:	049c      	lsls	r4, r3, #18
  406124:	4693      	mov	fp, r2
  406126:	d52f      	bpl.n	406188 <__sprint_r.part.0+0x6c>
  406128:	6893      	ldr	r3, [r2, #8]
  40612a:	6812      	ldr	r2, [r2, #0]
  40612c:	b353      	cbz	r3, 406184 <__sprint_r.part.0+0x68>
  40612e:	460e      	mov	r6, r1
  406130:	4607      	mov	r7, r0
  406132:	f102 0908 	add.w	r9, r2, #8
  406136:	e919 0420 	ldmdb	r9, {r5, sl}
  40613a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40613e:	d017      	beq.n	406170 <__sprint_r.part.0+0x54>
  406140:	3d04      	subs	r5, #4
  406142:	2400      	movs	r4, #0
  406144:	e001      	b.n	40614a <__sprint_r.part.0+0x2e>
  406146:	45a0      	cmp	r8, r4
  406148:	d010      	beq.n	40616c <__sprint_r.part.0+0x50>
  40614a:	4632      	mov	r2, r6
  40614c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  406150:	4638      	mov	r0, r7
  406152:	f001 f8bb 	bl	4072cc <_fputwc_r>
  406156:	1c43      	adds	r3, r0, #1
  406158:	f104 0401 	add.w	r4, r4, #1
  40615c:	d1f3      	bne.n	406146 <__sprint_r.part.0+0x2a>
  40615e:	2300      	movs	r3, #0
  406160:	f8cb 3008 	str.w	r3, [fp, #8]
  406164:	f8cb 3004 	str.w	r3, [fp, #4]
  406168:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40616c:	f8db 3008 	ldr.w	r3, [fp, #8]
  406170:	f02a 0a03 	bic.w	sl, sl, #3
  406174:	eba3 030a 	sub.w	r3, r3, sl
  406178:	f8cb 3008 	str.w	r3, [fp, #8]
  40617c:	f109 0908 	add.w	r9, r9, #8
  406180:	2b00      	cmp	r3, #0
  406182:	d1d8      	bne.n	406136 <__sprint_r.part.0+0x1a>
  406184:	2000      	movs	r0, #0
  406186:	e7ea      	b.n	40615e <__sprint_r.part.0+0x42>
  406188:	f001 fa0a 	bl	4075a0 <__sfvwrite_r>
  40618c:	2300      	movs	r3, #0
  40618e:	f8cb 3008 	str.w	r3, [fp, #8]
  406192:	f8cb 3004 	str.w	r3, [fp, #4]
  406196:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40619a:	bf00      	nop

0040619c <_vfiprintf_r>:
  40619c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4061a0:	b0ad      	sub	sp, #180	; 0xb4
  4061a2:	461d      	mov	r5, r3
  4061a4:	468b      	mov	fp, r1
  4061a6:	4690      	mov	r8, r2
  4061a8:	9307      	str	r3, [sp, #28]
  4061aa:	9006      	str	r0, [sp, #24]
  4061ac:	b118      	cbz	r0, 4061b6 <_vfiprintf_r+0x1a>
  4061ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4061b0:	2b00      	cmp	r3, #0
  4061b2:	f000 80f3 	beq.w	40639c <_vfiprintf_r+0x200>
  4061b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4061ba:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4061be:	07df      	lsls	r7, r3, #31
  4061c0:	b281      	uxth	r1, r0
  4061c2:	d402      	bmi.n	4061ca <_vfiprintf_r+0x2e>
  4061c4:	058e      	lsls	r6, r1, #22
  4061c6:	f140 80fc 	bpl.w	4063c2 <_vfiprintf_r+0x226>
  4061ca:	048c      	lsls	r4, r1, #18
  4061cc:	d40a      	bmi.n	4061e4 <_vfiprintf_r+0x48>
  4061ce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4061d2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4061d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4061da:	f8ab 100c 	strh.w	r1, [fp, #12]
  4061de:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4061e2:	b289      	uxth	r1, r1
  4061e4:	0708      	lsls	r0, r1, #28
  4061e6:	f140 80b3 	bpl.w	406350 <_vfiprintf_r+0x1b4>
  4061ea:	f8db 3010 	ldr.w	r3, [fp, #16]
  4061ee:	2b00      	cmp	r3, #0
  4061f0:	f000 80ae 	beq.w	406350 <_vfiprintf_r+0x1b4>
  4061f4:	f001 031a 	and.w	r3, r1, #26
  4061f8:	2b0a      	cmp	r3, #10
  4061fa:	f000 80b5 	beq.w	406368 <_vfiprintf_r+0x1cc>
  4061fe:	2300      	movs	r3, #0
  406200:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  406204:	930b      	str	r3, [sp, #44]	; 0x2c
  406206:	9311      	str	r3, [sp, #68]	; 0x44
  406208:	9310      	str	r3, [sp, #64]	; 0x40
  40620a:	9303      	str	r3, [sp, #12]
  40620c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  406210:	46ca      	mov	sl, r9
  406212:	f8cd b010 	str.w	fp, [sp, #16]
  406216:	f898 3000 	ldrb.w	r3, [r8]
  40621a:	4644      	mov	r4, r8
  40621c:	b1fb      	cbz	r3, 40625e <_vfiprintf_r+0xc2>
  40621e:	2b25      	cmp	r3, #37	; 0x25
  406220:	d102      	bne.n	406228 <_vfiprintf_r+0x8c>
  406222:	e01c      	b.n	40625e <_vfiprintf_r+0xc2>
  406224:	2b25      	cmp	r3, #37	; 0x25
  406226:	d003      	beq.n	406230 <_vfiprintf_r+0x94>
  406228:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40622c:	2b00      	cmp	r3, #0
  40622e:	d1f9      	bne.n	406224 <_vfiprintf_r+0x88>
  406230:	eba4 0508 	sub.w	r5, r4, r8
  406234:	b19d      	cbz	r5, 40625e <_vfiprintf_r+0xc2>
  406236:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406238:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40623a:	f8ca 8000 	str.w	r8, [sl]
  40623e:	3301      	adds	r3, #1
  406240:	442a      	add	r2, r5
  406242:	2b07      	cmp	r3, #7
  406244:	f8ca 5004 	str.w	r5, [sl, #4]
  406248:	9211      	str	r2, [sp, #68]	; 0x44
  40624a:	9310      	str	r3, [sp, #64]	; 0x40
  40624c:	dd7a      	ble.n	406344 <_vfiprintf_r+0x1a8>
  40624e:	2a00      	cmp	r2, #0
  406250:	f040 84b0 	bne.w	406bb4 <_vfiprintf_r+0xa18>
  406254:	9b03      	ldr	r3, [sp, #12]
  406256:	9210      	str	r2, [sp, #64]	; 0x40
  406258:	442b      	add	r3, r5
  40625a:	46ca      	mov	sl, r9
  40625c:	9303      	str	r3, [sp, #12]
  40625e:	7823      	ldrb	r3, [r4, #0]
  406260:	2b00      	cmp	r3, #0
  406262:	f000 83e0 	beq.w	406a26 <_vfiprintf_r+0x88a>
  406266:	2000      	movs	r0, #0
  406268:	f04f 0300 	mov.w	r3, #0
  40626c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  406270:	f104 0801 	add.w	r8, r4, #1
  406274:	7862      	ldrb	r2, [r4, #1]
  406276:	4605      	mov	r5, r0
  406278:	4606      	mov	r6, r0
  40627a:	4603      	mov	r3, r0
  40627c:	f04f 34ff 	mov.w	r4, #4294967295
  406280:	f108 0801 	add.w	r8, r8, #1
  406284:	f1a2 0120 	sub.w	r1, r2, #32
  406288:	2958      	cmp	r1, #88	; 0x58
  40628a:	f200 82de 	bhi.w	40684a <_vfiprintf_r+0x6ae>
  40628e:	e8df f011 	tbh	[pc, r1, lsl #1]
  406292:	0221      	.short	0x0221
  406294:	02dc02dc 	.word	0x02dc02dc
  406298:	02dc0229 	.word	0x02dc0229
  40629c:	02dc02dc 	.word	0x02dc02dc
  4062a0:	02dc02dc 	.word	0x02dc02dc
  4062a4:	028902dc 	.word	0x028902dc
  4062a8:	02dc0295 	.word	0x02dc0295
  4062ac:	02bd00a2 	.word	0x02bd00a2
  4062b0:	019f02dc 	.word	0x019f02dc
  4062b4:	01a401a4 	.word	0x01a401a4
  4062b8:	01a401a4 	.word	0x01a401a4
  4062bc:	01a401a4 	.word	0x01a401a4
  4062c0:	01a401a4 	.word	0x01a401a4
  4062c4:	02dc01a4 	.word	0x02dc01a4
  4062c8:	02dc02dc 	.word	0x02dc02dc
  4062cc:	02dc02dc 	.word	0x02dc02dc
  4062d0:	02dc02dc 	.word	0x02dc02dc
  4062d4:	02dc02dc 	.word	0x02dc02dc
  4062d8:	01b202dc 	.word	0x01b202dc
  4062dc:	02dc02dc 	.word	0x02dc02dc
  4062e0:	02dc02dc 	.word	0x02dc02dc
  4062e4:	02dc02dc 	.word	0x02dc02dc
  4062e8:	02dc02dc 	.word	0x02dc02dc
  4062ec:	02dc02dc 	.word	0x02dc02dc
  4062f0:	02dc0197 	.word	0x02dc0197
  4062f4:	02dc02dc 	.word	0x02dc02dc
  4062f8:	02dc02dc 	.word	0x02dc02dc
  4062fc:	02dc019b 	.word	0x02dc019b
  406300:	025302dc 	.word	0x025302dc
  406304:	02dc02dc 	.word	0x02dc02dc
  406308:	02dc02dc 	.word	0x02dc02dc
  40630c:	02dc02dc 	.word	0x02dc02dc
  406310:	02dc02dc 	.word	0x02dc02dc
  406314:	02dc02dc 	.word	0x02dc02dc
  406318:	021b025a 	.word	0x021b025a
  40631c:	02dc02dc 	.word	0x02dc02dc
  406320:	026e02dc 	.word	0x026e02dc
  406324:	02dc021b 	.word	0x02dc021b
  406328:	027302dc 	.word	0x027302dc
  40632c:	01f502dc 	.word	0x01f502dc
  406330:	02090182 	.word	0x02090182
  406334:	02dc02d7 	.word	0x02dc02d7
  406338:	02dc029a 	.word	0x02dc029a
  40633c:	02dc00a7 	.word	0x02dc00a7
  406340:	022e02dc 	.word	0x022e02dc
  406344:	f10a 0a08 	add.w	sl, sl, #8
  406348:	9b03      	ldr	r3, [sp, #12]
  40634a:	442b      	add	r3, r5
  40634c:	9303      	str	r3, [sp, #12]
  40634e:	e786      	b.n	40625e <_vfiprintf_r+0xc2>
  406350:	4659      	mov	r1, fp
  406352:	9806      	ldr	r0, [sp, #24]
  406354:	f000 fdac 	bl	406eb0 <__swsetup_r>
  406358:	bb18      	cbnz	r0, 4063a2 <_vfiprintf_r+0x206>
  40635a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40635e:	f001 031a 	and.w	r3, r1, #26
  406362:	2b0a      	cmp	r3, #10
  406364:	f47f af4b 	bne.w	4061fe <_vfiprintf_r+0x62>
  406368:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40636c:	2b00      	cmp	r3, #0
  40636e:	f6ff af46 	blt.w	4061fe <_vfiprintf_r+0x62>
  406372:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406376:	07db      	lsls	r3, r3, #31
  406378:	d405      	bmi.n	406386 <_vfiprintf_r+0x1ea>
  40637a:	058f      	lsls	r7, r1, #22
  40637c:	d403      	bmi.n	406386 <_vfiprintf_r+0x1ea>
  40637e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406382:	f001 fac3 	bl	40790c <__retarget_lock_release_recursive>
  406386:	462b      	mov	r3, r5
  406388:	4642      	mov	r2, r8
  40638a:	4659      	mov	r1, fp
  40638c:	9806      	ldr	r0, [sp, #24]
  40638e:	f000 fd4d 	bl	406e2c <__sbprintf>
  406392:	9003      	str	r0, [sp, #12]
  406394:	9803      	ldr	r0, [sp, #12]
  406396:	b02d      	add	sp, #180	; 0xb4
  406398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40639c:	f000 fef4 	bl	407188 <__sinit>
  4063a0:	e709      	b.n	4061b6 <_vfiprintf_r+0x1a>
  4063a2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4063a6:	07d9      	lsls	r1, r3, #31
  4063a8:	d404      	bmi.n	4063b4 <_vfiprintf_r+0x218>
  4063aa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4063ae:	059a      	lsls	r2, r3, #22
  4063b0:	f140 84aa 	bpl.w	406d08 <_vfiprintf_r+0xb6c>
  4063b4:	f04f 33ff 	mov.w	r3, #4294967295
  4063b8:	9303      	str	r3, [sp, #12]
  4063ba:	9803      	ldr	r0, [sp, #12]
  4063bc:	b02d      	add	sp, #180	; 0xb4
  4063be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4063c2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4063c6:	f001 fa9f 	bl	407908 <__retarget_lock_acquire_recursive>
  4063ca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4063ce:	b281      	uxth	r1, r0
  4063d0:	e6fb      	b.n	4061ca <_vfiprintf_r+0x2e>
  4063d2:	4276      	negs	r6, r6
  4063d4:	9207      	str	r2, [sp, #28]
  4063d6:	f043 0304 	orr.w	r3, r3, #4
  4063da:	f898 2000 	ldrb.w	r2, [r8]
  4063de:	e74f      	b.n	406280 <_vfiprintf_r+0xe4>
  4063e0:	9608      	str	r6, [sp, #32]
  4063e2:	069e      	lsls	r6, r3, #26
  4063e4:	f100 8450 	bmi.w	406c88 <_vfiprintf_r+0xaec>
  4063e8:	9907      	ldr	r1, [sp, #28]
  4063ea:	06dd      	lsls	r5, r3, #27
  4063ec:	460a      	mov	r2, r1
  4063ee:	f100 83ef 	bmi.w	406bd0 <_vfiprintf_r+0xa34>
  4063f2:	0658      	lsls	r0, r3, #25
  4063f4:	f140 83ec 	bpl.w	406bd0 <_vfiprintf_r+0xa34>
  4063f8:	880e      	ldrh	r6, [r1, #0]
  4063fa:	3104      	adds	r1, #4
  4063fc:	2700      	movs	r7, #0
  4063fe:	2201      	movs	r2, #1
  406400:	9107      	str	r1, [sp, #28]
  406402:	f04f 0100 	mov.w	r1, #0
  406406:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40640a:	2500      	movs	r5, #0
  40640c:	1c61      	adds	r1, r4, #1
  40640e:	f000 8116 	beq.w	40663e <_vfiprintf_r+0x4a2>
  406412:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  406416:	9102      	str	r1, [sp, #8]
  406418:	ea56 0107 	orrs.w	r1, r6, r7
  40641c:	f040 8114 	bne.w	406648 <_vfiprintf_r+0x4ac>
  406420:	2c00      	cmp	r4, #0
  406422:	f040 835c 	bne.w	406ade <_vfiprintf_r+0x942>
  406426:	2a00      	cmp	r2, #0
  406428:	f040 83b7 	bne.w	406b9a <_vfiprintf_r+0x9fe>
  40642c:	f013 0301 	ands.w	r3, r3, #1
  406430:	9305      	str	r3, [sp, #20]
  406432:	f000 8457 	beq.w	406ce4 <_vfiprintf_r+0xb48>
  406436:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40643a:	2330      	movs	r3, #48	; 0x30
  40643c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  406440:	9b05      	ldr	r3, [sp, #20]
  406442:	42a3      	cmp	r3, r4
  406444:	bfb8      	it	lt
  406446:	4623      	movlt	r3, r4
  406448:	9301      	str	r3, [sp, #4]
  40644a:	b10d      	cbz	r5, 406450 <_vfiprintf_r+0x2b4>
  40644c:	3301      	adds	r3, #1
  40644e:	9301      	str	r3, [sp, #4]
  406450:	9b02      	ldr	r3, [sp, #8]
  406452:	f013 0302 	ands.w	r3, r3, #2
  406456:	9309      	str	r3, [sp, #36]	; 0x24
  406458:	d002      	beq.n	406460 <_vfiprintf_r+0x2c4>
  40645a:	9b01      	ldr	r3, [sp, #4]
  40645c:	3302      	adds	r3, #2
  40645e:	9301      	str	r3, [sp, #4]
  406460:	9b02      	ldr	r3, [sp, #8]
  406462:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  406466:	930a      	str	r3, [sp, #40]	; 0x28
  406468:	f040 8217 	bne.w	40689a <_vfiprintf_r+0x6fe>
  40646c:	9b08      	ldr	r3, [sp, #32]
  40646e:	9a01      	ldr	r2, [sp, #4]
  406470:	1a9d      	subs	r5, r3, r2
  406472:	2d00      	cmp	r5, #0
  406474:	f340 8211 	ble.w	40689a <_vfiprintf_r+0x6fe>
  406478:	2d10      	cmp	r5, #16
  40647a:	f340 8490 	ble.w	406d9e <_vfiprintf_r+0xc02>
  40647e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406480:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406482:	4ec4      	ldr	r6, [pc, #784]	; (406794 <_vfiprintf_r+0x5f8>)
  406484:	46d6      	mov	lr, sl
  406486:	2710      	movs	r7, #16
  406488:	46a2      	mov	sl, r4
  40648a:	4619      	mov	r1, r3
  40648c:	9c06      	ldr	r4, [sp, #24]
  40648e:	e007      	b.n	4064a0 <_vfiprintf_r+0x304>
  406490:	f101 0c02 	add.w	ip, r1, #2
  406494:	f10e 0e08 	add.w	lr, lr, #8
  406498:	4601      	mov	r1, r0
  40649a:	3d10      	subs	r5, #16
  40649c:	2d10      	cmp	r5, #16
  40649e:	dd11      	ble.n	4064c4 <_vfiprintf_r+0x328>
  4064a0:	1c48      	adds	r0, r1, #1
  4064a2:	3210      	adds	r2, #16
  4064a4:	2807      	cmp	r0, #7
  4064a6:	9211      	str	r2, [sp, #68]	; 0x44
  4064a8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4064ac:	9010      	str	r0, [sp, #64]	; 0x40
  4064ae:	ddef      	ble.n	406490 <_vfiprintf_r+0x2f4>
  4064b0:	2a00      	cmp	r2, #0
  4064b2:	f040 81e4 	bne.w	40687e <_vfiprintf_r+0x6e2>
  4064b6:	3d10      	subs	r5, #16
  4064b8:	2d10      	cmp	r5, #16
  4064ba:	4611      	mov	r1, r2
  4064bc:	f04f 0c01 	mov.w	ip, #1
  4064c0:	46ce      	mov	lr, r9
  4064c2:	dced      	bgt.n	4064a0 <_vfiprintf_r+0x304>
  4064c4:	4654      	mov	r4, sl
  4064c6:	4661      	mov	r1, ip
  4064c8:	46f2      	mov	sl, lr
  4064ca:	442a      	add	r2, r5
  4064cc:	2907      	cmp	r1, #7
  4064ce:	9211      	str	r2, [sp, #68]	; 0x44
  4064d0:	f8ca 6000 	str.w	r6, [sl]
  4064d4:	f8ca 5004 	str.w	r5, [sl, #4]
  4064d8:	9110      	str	r1, [sp, #64]	; 0x40
  4064da:	f300 82ec 	bgt.w	406ab6 <_vfiprintf_r+0x91a>
  4064de:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4064e2:	f10a 0a08 	add.w	sl, sl, #8
  4064e6:	1c48      	adds	r0, r1, #1
  4064e8:	2d00      	cmp	r5, #0
  4064ea:	f040 81de 	bne.w	4068aa <_vfiprintf_r+0x70e>
  4064ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4064f0:	2b00      	cmp	r3, #0
  4064f2:	f000 81f8 	beq.w	4068e6 <_vfiprintf_r+0x74a>
  4064f6:	3202      	adds	r2, #2
  4064f8:	a90e      	add	r1, sp, #56	; 0x38
  4064fa:	2302      	movs	r3, #2
  4064fc:	2807      	cmp	r0, #7
  4064fe:	9211      	str	r2, [sp, #68]	; 0x44
  406500:	9010      	str	r0, [sp, #64]	; 0x40
  406502:	e88a 000a 	stmia.w	sl, {r1, r3}
  406506:	f340 81ea 	ble.w	4068de <_vfiprintf_r+0x742>
  40650a:	2a00      	cmp	r2, #0
  40650c:	f040 838c 	bne.w	406c28 <_vfiprintf_r+0xa8c>
  406510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406512:	2b80      	cmp	r3, #128	; 0x80
  406514:	f04f 0001 	mov.w	r0, #1
  406518:	4611      	mov	r1, r2
  40651a:	46ca      	mov	sl, r9
  40651c:	f040 81e7 	bne.w	4068ee <_vfiprintf_r+0x752>
  406520:	9b08      	ldr	r3, [sp, #32]
  406522:	9d01      	ldr	r5, [sp, #4]
  406524:	1b5e      	subs	r6, r3, r5
  406526:	2e00      	cmp	r6, #0
  406528:	f340 81e1 	ble.w	4068ee <_vfiprintf_r+0x752>
  40652c:	2e10      	cmp	r6, #16
  40652e:	4d9a      	ldr	r5, [pc, #616]	; (406798 <_vfiprintf_r+0x5fc>)
  406530:	f340 8450 	ble.w	406dd4 <_vfiprintf_r+0xc38>
  406534:	46d4      	mov	ip, sl
  406536:	2710      	movs	r7, #16
  406538:	46a2      	mov	sl, r4
  40653a:	9c06      	ldr	r4, [sp, #24]
  40653c:	e007      	b.n	40654e <_vfiprintf_r+0x3b2>
  40653e:	f101 0e02 	add.w	lr, r1, #2
  406542:	f10c 0c08 	add.w	ip, ip, #8
  406546:	4601      	mov	r1, r0
  406548:	3e10      	subs	r6, #16
  40654a:	2e10      	cmp	r6, #16
  40654c:	dd11      	ble.n	406572 <_vfiprintf_r+0x3d6>
  40654e:	1c48      	adds	r0, r1, #1
  406550:	3210      	adds	r2, #16
  406552:	2807      	cmp	r0, #7
  406554:	9211      	str	r2, [sp, #68]	; 0x44
  406556:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40655a:	9010      	str	r0, [sp, #64]	; 0x40
  40655c:	ddef      	ble.n	40653e <_vfiprintf_r+0x3a2>
  40655e:	2a00      	cmp	r2, #0
  406560:	f040 829d 	bne.w	406a9e <_vfiprintf_r+0x902>
  406564:	3e10      	subs	r6, #16
  406566:	2e10      	cmp	r6, #16
  406568:	f04f 0e01 	mov.w	lr, #1
  40656c:	4611      	mov	r1, r2
  40656e:	46cc      	mov	ip, r9
  406570:	dced      	bgt.n	40654e <_vfiprintf_r+0x3b2>
  406572:	4654      	mov	r4, sl
  406574:	46e2      	mov	sl, ip
  406576:	4432      	add	r2, r6
  406578:	f1be 0f07 	cmp.w	lr, #7
  40657c:	9211      	str	r2, [sp, #68]	; 0x44
  40657e:	e88a 0060 	stmia.w	sl, {r5, r6}
  406582:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  406586:	f300 8369 	bgt.w	406c5c <_vfiprintf_r+0xac0>
  40658a:	f10a 0a08 	add.w	sl, sl, #8
  40658e:	f10e 0001 	add.w	r0, lr, #1
  406592:	4671      	mov	r1, lr
  406594:	e1ab      	b.n	4068ee <_vfiprintf_r+0x752>
  406596:	9608      	str	r6, [sp, #32]
  406598:	f013 0220 	ands.w	r2, r3, #32
  40659c:	f040 838c 	bne.w	406cb8 <_vfiprintf_r+0xb1c>
  4065a0:	f013 0110 	ands.w	r1, r3, #16
  4065a4:	f040 831a 	bne.w	406bdc <_vfiprintf_r+0xa40>
  4065a8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4065ac:	f000 8316 	beq.w	406bdc <_vfiprintf_r+0xa40>
  4065b0:	9807      	ldr	r0, [sp, #28]
  4065b2:	460a      	mov	r2, r1
  4065b4:	4601      	mov	r1, r0
  4065b6:	3104      	adds	r1, #4
  4065b8:	8806      	ldrh	r6, [r0, #0]
  4065ba:	9107      	str	r1, [sp, #28]
  4065bc:	2700      	movs	r7, #0
  4065be:	e720      	b.n	406402 <_vfiprintf_r+0x266>
  4065c0:	9608      	str	r6, [sp, #32]
  4065c2:	f043 0310 	orr.w	r3, r3, #16
  4065c6:	e7e7      	b.n	406598 <_vfiprintf_r+0x3fc>
  4065c8:	9608      	str	r6, [sp, #32]
  4065ca:	f043 0310 	orr.w	r3, r3, #16
  4065ce:	e708      	b.n	4063e2 <_vfiprintf_r+0x246>
  4065d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4065d4:	f898 2000 	ldrb.w	r2, [r8]
  4065d8:	e652      	b.n	406280 <_vfiprintf_r+0xe4>
  4065da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4065de:	2600      	movs	r6, #0
  4065e0:	f818 2b01 	ldrb.w	r2, [r8], #1
  4065e4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4065e8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4065ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4065f0:	2909      	cmp	r1, #9
  4065f2:	d9f5      	bls.n	4065e0 <_vfiprintf_r+0x444>
  4065f4:	e646      	b.n	406284 <_vfiprintf_r+0xe8>
  4065f6:	9608      	str	r6, [sp, #32]
  4065f8:	2800      	cmp	r0, #0
  4065fa:	f040 8408 	bne.w	406e0e <_vfiprintf_r+0xc72>
  4065fe:	f043 0310 	orr.w	r3, r3, #16
  406602:	069e      	lsls	r6, r3, #26
  406604:	f100 834c 	bmi.w	406ca0 <_vfiprintf_r+0xb04>
  406608:	06dd      	lsls	r5, r3, #27
  40660a:	f100 82f3 	bmi.w	406bf4 <_vfiprintf_r+0xa58>
  40660e:	0658      	lsls	r0, r3, #25
  406610:	f140 82f0 	bpl.w	406bf4 <_vfiprintf_r+0xa58>
  406614:	9d07      	ldr	r5, [sp, #28]
  406616:	f9b5 6000 	ldrsh.w	r6, [r5]
  40661a:	462a      	mov	r2, r5
  40661c:	17f7      	asrs	r7, r6, #31
  40661e:	3204      	adds	r2, #4
  406620:	4630      	mov	r0, r6
  406622:	4639      	mov	r1, r7
  406624:	9207      	str	r2, [sp, #28]
  406626:	2800      	cmp	r0, #0
  406628:	f171 0200 	sbcs.w	r2, r1, #0
  40662c:	f2c0 835d 	blt.w	406cea <_vfiprintf_r+0xb4e>
  406630:	1c61      	adds	r1, r4, #1
  406632:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406636:	f04f 0201 	mov.w	r2, #1
  40663a:	f47f aeea 	bne.w	406412 <_vfiprintf_r+0x276>
  40663e:	ea56 0107 	orrs.w	r1, r6, r7
  406642:	f000 824d 	beq.w	406ae0 <_vfiprintf_r+0x944>
  406646:	9302      	str	r3, [sp, #8]
  406648:	2a01      	cmp	r2, #1
  40664a:	f000 828c 	beq.w	406b66 <_vfiprintf_r+0x9ca>
  40664e:	2a02      	cmp	r2, #2
  406650:	f040 825c 	bne.w	406b0c <_vfiprintf_r+0x970>
  406654:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406656:	46cb      	mov	fp, r9
  406658:	0933      	lsrs	r3, r6, #4
  40665a:	f006 010f 	and.w	r1, r6, #15
  40665e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  406662:	093a      	lsrs	r2, r7, #4
  406664:	461e      	mov	r6, r3
  406666:	4617      	mov	r7, r2
  406668:	5c43      	ldrb	r3, [r0, r1]
  40666a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40666e:	ea56 0307 	orrs.w	r3, r6, r7
  406672:	d1f1      	bne.n	406658 <_vfiprintf_r+0x4bc>
  406674:	eba9 030b 	sub.w	r3, r9, fp
  406678:	9305      	str	r3, [sp, #20]
  40667a:	e6e1      	b.n	406440 <_vfiprintf_r+0x2a4>
  40667c:	2800      	cmp	r0, #0
  40667e:	f040 83c0 	bne.w	406e02 <_vfiprintf_r+0xc66>
  406682:	0699      	lsls	r1, r3, #26
  406684:	f100 8367 	bmi.w	406d56 <_vfiprintf_r+0xbba>
  406688:	06da      	lsls	r2, r3, #27
  40668a:	f100 80f1 	bmi.w	406870 <_vfiprintf_r+0x6d4>
  40668e:	065b      	lsls	r3, r3, #25
  406690:	f140 80ee 	bpl.w	406870 <_vfiprintf_r+0x6d4>
  406694:	9a07      	ldr	r2, [sp, #28]
  406696:	6813      	ldr	r3, [r2, #0]
  406698:	3204      	adds	r2, #4
  40669a:	9207      	str	r2, [sp, #28]
  40669c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4066a0:	801a      	strh	r2, [r3, #0]
  4066a2:	e5b8      	b.n	406216 <_vfiprintf_r+0x7a>
  4066a4:	9807      	ldr	r0, [sp, #28]
  4066a6:	4a3d      	ldr	r2, [pc, #244]	; (40679c <_vfiprintf_r+0x600>)
  4066a8:	9608      	str	r6, [sp, #32]
  4066aa:	920b      	str	r2, [sp, #44]	; 0x2c
  4066ac:	6806      	ldr	r6, [r0, #0]
  4066ae:	2278      	movs	r2, #120	; 0x78
  4066b0:	2130      	movs	r1, #48	; 0x30
  4066b2:	3004      	adds	r0, #4
  4066b4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4066b8:	f043 0302 	orr.w	r3, r3, #2
  4066bc:	9007      	str	r0, [sp, #28]
  4066be:	2700      	movs	r7, #0
  4066c0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4066c4:	2202      	movs	r2, #2
  4066c6:	e69c      	b.n	406402 <_vfiprintf_r+0x266>
  4066c8:	9608      	str	r6, [sp, #32]
  4066ca:	2800      	cmp	r0, #0
  4066cc:	d099      	beq.n	406602 <_vfiprintf_r+0x466>
  4066ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4066d2:	e796      	b.n	406602 <_vfiprintf_r+0x466>
  4066d4:	f898 2000 	ldrb.w	r2, [r8]
  4066d8:	2d00      	cmp	r5, #0
  4066da:	f47f add1 	bne.w	406280 <_vfiprintf_r+0xe4>
  4066de:	2001      	movs	r0, #1
  4066e0:	2520      	movs	r5, #32
  4066e2:	e5cd      	b.n	406280 <_vfiprintf_r+0xe4>
  4066e4:	f043 0301 	orr.w	r3, r3, #1
  4066e8:	f898 2000 	ldrb.w	r2, [r8]
  4066ec:	e5c8      	b.n	406280 <_vfiprintf_r+0xe4>
  4066ee:	9608      	str	r6, [sp, #32]
  4066f0:	2800      	cmp	r0, #0
  4066f2:	f040 8393 	bne.w	406e1c <_vfiprintf_r+0xc80>
  4066f6:	4929      	ldr	r1, [pc, #164]	; (40679c <_vfiprintf_r+0x600>)
  4066f8:	910b      	str	r1, [sp, #44]	; 0x2c
  4066fa:	069f      	lsls	r7, r3, #26
  4066fc:	f100 82e8 	bmi.w	406cd0 <_vfiprintf_r+0xb34>
  406700:	9807      	ldr	r0, [sp, #28]
  406702:	06de      	lsls	r6, r3, #27
  406704:	4601      	mov	r1, r0
  406706:	f100 8270 	bmi.w	406bea <_vfiprintf_r+0xa4e>
  40670a:	065d      	lsls	r5, r3, #25
  40670c:	f140 826d 	bpl.w	406bea <_vfiprintf_r+0xa4e>
  406710:	3104      	adds	r1, #4
  406712:	8806      	ldrh	r6, [r0, #0]
  406714:	9107      	str	r1, [sp, #28]
  406716:	2700      	movs	r7, #0
  406718:	07d8      	lsls	r0, r3, #31
  40671a:	f140 8222 	bpl.w	406b62 <_vfiprintf_r+0x9c6>
  40671e:	ea56 0107 	orrs.w	r1, r6, r7
  406722:	f000 821e 	beq.w	406b62 <_vfiprintf_r+0x9c6>
  406726:	2130      	movs	r1, #48	; 0x30
  406728:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40672c:	f043 0302 	orr.w	r3, r3, #2
  406730:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406734:	2202      	movs	r2, #2
  406736:	e664      	b.n	406402 <_vfiprintf_r+0x266>
  406738:	9608      	str	r6, [sp, #32]
  40673a:	2800      	cmp	r0, #0
  40673c:	f040 836b 	bne.w	406e16 <_vfiprintf_r+0xc7a>
  406740:	4917      	ldr	r1, [pc, #92]	; (4067a0 <_vfiprintf_r+0x604>)
  406742:	910b      	str	r1, [sp, #44]	; 0x2c
  406744:	e7d9      	b.n	4066fa <_vfiprintf_r+0x55e>
  406746:	9907      	ldr	r1, [sp, #28]
  406748:	9608      	str	r6, [sp, #32]
  40674a:	680a      	ldr	r2, [r1, #0]
  40674c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  406750:	f04f 0000 	mov.w	r0, #0
  406754:	460a      	mov	r2, r1
  406756:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40675a:	3204      	adds	r2, #4
  40675c:	2001      	movs	r0, #1
  40675e:	9001      	str	r0, [sp, #4]
  406760:	9207      	str	r2, [sp, #28]
  406762:	9005      	str	r0, [sp, #20]
  406764:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  406768:	9302      	str	r3, [sp, #8]
  40676a:	2400      	movs	r4, #0
  40676c:	e670      	b.n	406450 <_vfiprintf_r+0x2b4>
  40676e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406772:	f898 2000 	ldrb.w	r2, [r8]
  406776:	e583      	b.n	406280 <_vfiprintf_r+0xe4>
  406778:	f898 2000 	ldrb.w	r2, [r8]
  40677c:	2a6c      	cmp	r2, #108	; 0x6c
  40677e:	bf03      	ittte	eq
  406780:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  406784:	f043 0320 	orreq.w	r3, r3, #32
  406788:	f108 0801 	addeq.w	r8, r8, #1
  40678c:	f043 0310 	orrne.w	r3, r3, #16
  406790:	e576      	b.n	406280 <_vfiprintf_r+0xe4>
  406792:	bf00      	nop
  406794:	00409b08 	.word	0x00409b08
  406798:	00409b18 	.word	0x00409b18
  40679c:	00409aec 	.word	0x00409aec
  4067a0:	00409ad8 	.word	0x00409ad8
  4067a4:	9907      	ldr	r1, [sp, #28]
  4067a6:	680e      	ldr	r6, [r1, #0]
  4067a8:	460a      	mov	r2, r1
  4067aa:	2e00      	cmp	r6, #0
  4067ac:	f102 0204 	add.w	r2, r2, #4
  4067b0:	f6ff ae0f 	blt.w	4063d2 <_vfiprintf_r+0x236>
  4067b4:	9207      	str	r2, [sp, #28]
  4067b6:	f898 2000 	ldrb.w	r2, [r8]
  4067ba:	e561      	b.n	406280 <_vfiprintf_r+0xe4>
  4067bc:	f898 2000 	ldrb.w	r2, [r8]
  4067c0:	2001      	movs	r0, #1
  4067c2:	252b      	movs	r5, #43	; 0x2b
  4067c4:	e55c      	b.n	406280 <_vfiprintf_r+0xe4>
  4067c6:	9907      	ldr	r1, [sp, #28]
  4067c8:	9608      	str	r6, [sp, #32]
  4067ca:	f8d1 b000 	ldr.w	fp, [r1]
  4067ce:	f04f 0200 	mov.w	r2, #0
  4067d2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4067d6:	1d0e      	adds	r6, r1, #4
  4067d8:	f1bb 0f00 	cmp.w	fp, #0
  4067dc:	f000 82e5 	beq.w	406daa <_vfiprintf_r+0xc0e>
  4067e0:	1c67      	adds	r7, r4, #1
  4067e2:	f000 82c4 	beq.w	406d6e <_vfiprintf_r+0xbd2>
  4067e6:	4622      	mov	r2, r4
  4067e8:	2100      	movs	r1, #0
  4067ea:	4658      	mov	r0, fp
  4067ec:	9301      	str	r3, [sp, #4]
  4067ee:	f001 fbd7 	bl	407fa0 <memchr>
  4067f2:	9b01      	ldr	r3, [sp, #4]
  4067f4:	2800      	cmp	r0, #0
  4067f6:	f000 82e5 	beq.w	406dc4 <_vfiprintf_r+0xc28>
  4067fa:	eba0 020b 	sub.w	r2, r0, fp
  4067fe:	9205      	str	r2, [sp, #20]
  406800:	9607      	str	r6, [sp, #28]
  406802:	9302      	str	r3, [sp, #8]
  406804:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406808:	2400      	movs	r4, #0
  40680a:	e619      	b.n	406440 <_vfiprintf_r+0x2a4>
  40680c:	f898 2000 	ldrb.w	r2, [r8]
  406810:	2a2a      	cmp	r2, #42	; 0x2a
  406812:	f108 0701 	add.w	r7, r8, #1
  406816:	f000 82e9 	beq.w	406dec <_vfiprintf_r+0xc50>
  40681a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40681e:	2909      	cmp	r1, #9
  406820:	46b8      	mov	r8, r7
  406822:	f04f 0400 	mov.w	r4, #0
  406826:	f63f ad2d 	bhi.w	406284 <_vfiprintf_r+0xe8>
  40682a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40682e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406832:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  406836:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40683a:	2909      	cmp	r1, #9
  40683c:	d9f5      	bls.n	40682a <_vfiprintf_r+0x68e>
  40683e:	e521      	b.n	406284 <_vfiprintf_r+0xe8>
  406840:	f043 0320 	orr.w	r3, r3, #32
  406844:	f898 2000 	ldrb.w	r2, [r8]
  406848:	e51a      	b.n	406280 <_vfiprintf_r+0xe4>
  40684a:	9608      	str	r6, [sp, #32]
  40684c:	2800      	cmp	r0, #0
  40684e:	f040 82db 	bne.w	406e08 <_vfiprintf_r+0xc6c>
  406852:	2a00      	cmp	r2, #0
  406854:	f000 80e7 	beq.w	406a26 <_vfiprintf_r+0x88a>
  406858:	2101      	movs	r1, #1
  40685a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40685e:	f04f 0200 	mov.w	r2, #0
  406862:	9101      	str	r1, [sp, #4]
  406864:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406868:	9105      	str	r1, [sp, #20]
  40686a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40686e:	e77b      	b.n	406768 <_vfiprintf_r+0x5cc>
  406870:	9a07      	ldr	r2, [sp, #28]
  406872:	6813      	ldr	r3, [r2, #0]
  406874:	3204      	adds	r2, #4
  406876:	9207      	str	r2, [sp, #28]
  406878:	9a03      	ldr	r2, [sp, #12]
  40687a:	601a      	str	r2, [r3, #0]
  40687c:	e4cb      	b.n	406216 <_vfiprintf_r+0x7a>
  40687e:	aa0f      	add	r2, sp, #60	; 0x3c
  406880:	9904      	ldr	r1, [sp, #16]
  406882:	4620      	mov	r0, r4
  406884:	f7ff fc4a 	bl	40611c <__sprint_r.part.0>
  406888:	2800      	cmp	r0, #0
  40688a:	f040 8139 	bne.w	406b00 <_vfiprintf_r+0x964>
  40688e:	9910      	ldr	r1, [sp, #64]	; 0x40
  406890:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406892:	f101 0c01 	add.w	ip, r1, #1
  406896:	46ce      	mov	lr, r9
  406898:	e5ff      	b.n	40649a <_vfiprintf_r+0x2fe>
  40689a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40689c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40689e:	1c48      	adds	r0, r1, #1
  4068a0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4068a4:	2d00      	cmp	r5, #0
  4068a6:	f43f ae22 	beq.w	4064ee <_vfiprintf_r+0x352>
  4068aa:	3201      	adds	r2, #1
  4068ac:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4068b0:	2101      	movs	r1, #1
  4068b2:	2807      	cmp	r0, #7
  4068b4:	9211      	str	r2, [sp, #68]	; 0x44
  4068b6:	9010      	str	r0, [sp, #64]	; 0x40
  4068b8:	f8ca 5000 	str.w	r5, [sl]
  4068bc:	f8ca 1004 	str.w	r1, [sl, #4]
  4068c0:	f340 8108 	ble.w	406ad4 <_vfiprintf_r+0x938>
  4068c4:	2a00      	cmp	r2, #0
  4068c6:	f040 81bc 	bne.w	406c42 <_vfiprintf_r+0xaa6>
  4068ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4068cc:	2b00      	cmp	r3, #0
  4068ce:	f43f ae1f 	beq.w	406510 <_vfiprintf_r+0x374>
  4068d2:	ab0e      	add	r3, sp, #56	; 0x38
  4068d4:	2202      	movs	r2, #2
  4068d6:	4608      	mov	r0, r1
  4068d8:	931c      	str	r3, [sp, #112]	; 0x70
  4068da:	921d      	str	r2, [sp, #116]	; 0x74
  4068dc:	46ca      	mov	sl, r9
  4068de:	4601      	mov	r1, r0
  4068e0:	f10a 0a08 	add.w	sl, sl, #8
  4068e4:	3001      	adds	r0, #1
  4068e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4068e8:	2b80      	cmp	r3, #128	; 0x80
  4068ea:	f43f ae19 	beq.w	406520 <_vfiprintf_r+0x384>
  4068ee:	9b05      	ldr	r3, [sp, #20]
  4068f0:	1ae4      	subs	r4, r4, r3
  4068f2:	2c00      	cmp	r4, #0
  4068f4:	dd2e      	ble.n	406954 <_vfiprintf_r+0x7b8>
  4068f6:	2c10      	cmp	r4, #16
  4068f8:	4db3      	ldr	r5, [pc, #716]	; (406bc8 <_vfiprintf_r+0xa2c>)
  4068fa:	dd1e      	ble.n	40693a <_vfiprintf_r+0x79e>
  4068fc:	46d6      	mov	lr, sl
  4068fe:	2610      	movs	r6, #16
  406900:	9f06      	ldr	r7, [sp, #24]
  406902:	f8dd a010 	ldr.w	sl, [sp, #16]
  406906:	e006      	b.n	406916 <_vfiprintf_r+0x77a>
  406908:	1c88      	adds	r0, r1, #2
  40690a:	f10e 0e08 	add.w	lr, lr, #8
  40690e:	4619      	mov	r1, r3
  406910:	3c10      	subs	r4, #16
  406912:	2c10      	cmp	r4, #16
  406914:	dd10      	ble.n	406938 <_vfiprintf_r+0x79c>
  406916:	1c4b      	adds	r3, r1, #1
  406918:	3210      	adds	r2, #16
  40691a:	2b07      	cmp	r3, #7
  40691c:	9211      	str	r2, [sp, #68]	; 0x44
  40691e:	e88e 0060 	stmia.w	lr, {r5, r6}
  406922:	9310      	str	r3, [sp, #64]	; 0x40
  406924:	ddf0      	ble.n	406908 <_vfiprintf_r+0x76c>
  406926:	2a00      	cmp	r2, #0
  406928:	d165      	bne.n	4069f6 <_vfiprintf_r+0x85a>
  40692a:	3c10      	subs	r4, #16
  40692c:	2c10      	cmp	r4, #16
  40692e:	f04f 0001 	mov.w	r0, #1
  406932:	4611      	mov	r1, r2
  406934:	46ce      	mov	lr, r9
  406936:	dcee      	bgt.n	406916 <_vfiprintf_r+0x77a>
  406938:	46f2      	mov	sl, lr
  40693a:	4422      	add	r2, r4
  40693c:	2807      	cmp	r0, #7
  40693e:	9211      	str	r2, [sp, #68]	; 0x44
  406940:	f8ca 5000 	str.w	r5, [sl]
  406944:	f8ca 4004 	str.w	r4, [sl, #4]
  406948:	9010      	str	r0, [sp, #64]	; 0x40
  40694a:	f300 8085 	bgt.w	406a58 <_vfiprintf_r+0x8bc>
  40694e:	f10a 0a08 	add.w	sl, sl, #8
  406952:	3001      	adds	r0, #1
  406954:	9905      	ldr	r1, [sp, #20]
  406956:	f8ca b000 	str.w	fp, [sl]
  40695a:	440a      	add	r2, r1
  40695c:	2807      	cmp	r0, #7
  40695e:	9211      	str	r2, [sp, #68]	; 0x44
  406960:	f8ca 1004 	str.w	r1, [sl, #4]
  406964:	9010      	str	r0, [sp, #64]	; 0x40
  406966:	f340 8082 	ble.w	406a6e <_vfiprintf_r+0x8d2>
  40696a:	2a00      	cmp	r2, #0
  40696c:	f040 8118 	bne.w	406ba0 <_vfiprintf_r+0xa04>
  406970:	9b02      	ldr	r3, [sp, #8]
  406972:	9210      	str	r2, [sp, #64]	; 0x40
  406974:	0758      	lsls	r0, r3, #29
  406976:	d535      	bpl.n	4069e4 <_vfiprintf_r+0x848>
  406978:	9b08      	ldr	r3, [sp, #32]
  40697a:	9901      	ldr	r1, [sp, #4]
  40697c:	1a5c      	subs	r4, r3, r1
  40697e:	2c00      	cmp	r4, #0
  406980:	f340 80e7 	ble.w	406b52 <_vfiprintf_r+0x9b6>
  406984:	46ca      	mov	sl, r9
  406986:	2c10      	cmp	r4, #16
  406988:	f340 8218 	ble.w	406dbc <_vfiprintf_r+0xc20>
  40698c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40698e:	4e8f      	ldr	r6, [pc, #572]	; (406bcc <_vfiprintf_r+0xa30>)
  406990:	9f06      	ldr	r7, [sp, #24]
  406992:	f8dd b010 	ldr.w	fp, [sp, #16]
  406996:	2510      	movs	r5, #16
  406998:	e006      	b.n	4069a8 <_vfiprintf_r+0x80c>
  40699a:	1c88      	adds	r0, r1, #2
  40699c:	f10a 0a08 	add.w	sl, sl, #8
  4069a0:	4619      	mov	r1, r3
  4069a2:	3c10      	subs	r4, #16
  4069a4:	2c10      	cmp	r4, #16
  4069a6:	dd11      	ble.n	4069cc <_vfiprintf_r+0x830>
  4069a8:	1c4b      	adds	r3, r1, #1
  4069aa:	3210      	adds	r2, #16
  4069ac:	2b07      	cmp	r3, #7
  4069ae:	9211      	str	r2, [sp, #68]	; 0x44
  4069b0:	f8ca 6000 	str.w	r6, [sl]
  4069b4:	f8ca 5004 	str.w	r5, [sl, #4]
  4069b8:	9310      	str	r3, [sp, #64]	; 0x40
  4069ba:	ddee      	ble.n	40699a <_vfiprintf_r+0x7fe>
  4069bc:	bb42      	cbnz	r2, 406a10 <_vfiprintf_r+0x874>
  4069be:	3c10      	subs	r4, #16
  4069c0:	2c10      	cmp	r4, #16
  4069c2:	f04f 0001 	mov.w	r0, #1
  4069c6:	4611      	mov	r1, r2
  4069c8:	46ca      	mov	sl, r9
  4069ca:	dced      	bgt.n	4069a8 <_vfiprintf_r+0x80c>
  4069cc:	4422      	add	r2, r4
  4069ce:	2807      	cmp	r0, #7
  4069d0:	9211      	str	r2, [sp, #68]	; 0x44
  4069d2:	f8ca 6000 	str.w	r6, [sl]
  4069d6:	f8ca 4004 	str.w	r4, [sl, #4]
  4069da:	9010      	str	r0, [sp, #64]	; 0x40
  4069dc:	dd51      	ble.n	406a82 <_vfiprintf_r+0x8e6>
  4069de:	2a00      	cmp	r2, #0
  4069e0:	f040 819b 	bne.w	406d1a <_vfiprintf_r+0xb7e>
  4069e4:	9b03      	ldr	r3, [sp, #12]
  4069e6:	9a08      	ldr	r2, [sp, #32]
  4069e8:	9901      	ldr	r1, [sp, #4]
  4069ea:	428a      	cmp	r2, r1
  4069ec:	bfac      	ite	ge
  4069ee:	189b      	addge	r3, r3, r2
  4069f0:	185b      	addlt	r3, r3, r1
  4069f2:	9303      	str	r3, [sp, #12]
  4069f4:	e04e      	b.n	406a94 <_vfiprintf_r+0x8f8>
  4069f6:	aa0f      	add	r2, sp, #60	; 0x3c
  4069f8:	4651      	mov	r1, sl
  4069fa:	4638      	mov	r0, r7
  4069fc:	f7ff fb8e 	bl	40611c <__sprint_r.part.0>
  406a00:	2800      	cmp	r0, #0
  406a02:	f040 813f 	bne.w	406c84 <_vfiprintf_r+0xae8>
  406a06:	9910      	ldr	r1, [sp, #64]	; 0x40
  406a08:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406a0a:	1c48      	adds	r0, r1, #1
  406a0c:	46ce      	mov	lr, r9
  406a0e:	e77f      	b.n	406910 <_vfiprintf_r+0x774>
  406a10:	aa0f      	add	r2, sp, #60	; 0x3c
  406a12:	4659      	mov	r1, fp
  406a14:	4638      	mov	r0, r7
  406a16:	f7ff fb81 	bl	40611c <__sprint_r.part.0>
  406a1a:	b960      	cbnz	r0, 406a36 <_vfiprintf_r+0x89a>
  406a1c:	9910      	ldr	r1, [sp, #64]	; 0x40
  406a1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406a20:	1c48      	adds	r0, r1, #1
  406a22:	46ca      	mov	sl, r9
  406a24:	e7bd      	b.n	4069a2 <_vfiprintf_r+0x806>
  406a26:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406a28:	f8dd b010 	ldr.w	fp, [sp, #16]
  406a2c:	2b00      	cmp	r3, #0
  406a2e:	f040 81d4 	bne.w	406dda <_vfiprintf_r+0xc3e>
  406a32:	2300      	movs	r3, #0
  406a34:	9310      	str	r3, [sp, #64]	; 0x40
  406a36:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406a3a:	f013 0f01 	tst.w	r3, #1
  406a3e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406a42:	d102      	bne.n	406a4a <_vfiprintf_r+0x8ae>
  406a44:	059a      	lsls	r2, r3, #22
  406a46:	f140 80de 	bpl.w	406c06 <_vfiprintf_r+0xa6a>
  406a4a:	065b      	lsls	r3, r3, #25
  406a4c:	f53f acb2 	bmi.w	4063b4 <_vfiprintf_r+0x218>
  406a50:	9803      	ldr	r0, [sp, #12]
  406a52:	b02d      	add	sp, #180	; 0xb4
  406a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a58:	2a00      	cmp	r2, #0
  406a5a:	f040 8106 	bne.w	406c6a <_vfiprintf_r+0xace>
  406a5e:	9a05      	ldr	r2, [sp, #20]
  406a60:	921d      	str	r2, [sp, #116]	; 0x74
  406a62:	2301      	movs	r3, #1
  406a64:	9211      	str	r2, [sp, #68]	; 0x44
  406a66:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  406a6a:	9310      	str	r3, [sp, #64]	; 0x40
  406a6c:	46ca      	mov	sl, r9
  406a6e:	f10a 0a08 	add.w	sl, sl, #8
  406a72:	9b02      	ldr	r3, [sp, #8]
  406a74:	0759      	lsls	r1, r3, #29
  406a76:	d504      	bpl.n	406a82 <_vfiprintf_r+0x8e6>
  406a78:	9b08      	ldr	r3, [sp, #32]
  406a7a:	9901      	ldr	r1, [sp, #4]
  406a7c:	1a5c      	subs	r4, r3, r1
  406a7e:	2c00      	cmp	r4, #0
  406a80:	dc81      	bgt.n	406986 <_vfiprintf_r+0x7ea>
  406a82:	9b03      	ldr	r3, [sp, #12]
  406a84:	9908      	ldr	r1, [sp, #32]
  406a86:	9801      	ldr	r0, [sp, #4]
  406a88:	4281      	cmp	r1, r0
  406a8a:	bfac      	ite	ge
  406a8c:	185b      	addge	r3, r3, r1
  406a8e:	181b      	addlt	r3, r3, r0
  406a90:	9303      	str	r3, [sp, #12]
  406a92:	bb72      	cbnz	r2, 406af2 <_vfiprintf_r+0x956>
  406a94:	2300      	movs	r3, #0
  406a96:	9310      	str	r3, [sp, #64]	; 0x40
  406a98:	46ca      	mov	sl, r9
  406a9a:	f7ff bbbc 	b.w	406216 <_vfiprintf_r+0x7a>
  406a9e:	aa0f      	add	r2, sp, #60	; 0x3c
  406aa0:	9904      	ldr	r1, [sp, #16]
  406aa2:	4620      	mov	r0, r4
  406aa4:	f7ff fb3a 	bl	40611c <__sprint_r.part.0>
  406aa8:	bb50      	cbnz	r0, 406b00 <_vfiprintf_r+0x964>
  406aaa:	9910      	ldr	r1, [sp, #64]	; 0x40
  406aac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406aae:	f101 0e01 	add.w	lr, r1, #1
  406ab2:	46cc      	mov	ip, r9
  406ab4:	e548      	b.n	406548 <_vfiprintf_r+0x3ac>
  406ab6:	2a00      	cmp	r2, #0
  406ab8:	f040 8140 	bne.w	406d3c <_vfiprintf_r+0xba0>
  406abc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  406ac0:	2900      	cmp	r1, #0
  406ac2:	f000 811b 	beq.w	406cfc <_vfiprintf_r+0xb60>
  406ac6:	2201      	movs	r2, #1
  406ac8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  406acc:	4610      	mov	r0, r2
  406ace:	921d      	str	r2, [sp, #116]	; 0x74
  406ad0:	911c      	str	r1, [sp, #112]	; 0x70
  406ad2:	46ca      	mov	sl, r9
  406ad4:	4601      	mov	r1, r0
  406ad6:	f10a 0a08 	add.w	sl, sl, #8
  406ada:	3001      	adds	r0, #1
  406adc:	e507      	b.n	4064ee <_vfiprintf_r+0x352>
  406ade:	9b02      	ldr	r3, [sp, #8]
  406ae0:	2a01      	cmp	r2, #1
  406ae2:	f000 8098 	beq.w	406c16 <_vfiprintf_r+0xa7a>
  406ae6:	2a02      	cmp	r2, #2
  406ae8:	d10d      	bne.n	406b06 <_vfiprintf_r+0x96a>
  406aea:	9302      	str	r3, [sp, #8]
  406aec:	2600      	movs	r6, #0
  406aee:	2700      	movs	r7, #0
  406af0:	e5b0      	b.n	406654 <_vfiprintf_r+0x4b8>
  406af2:	aa0f      	add	r2, sp, #60	; 0x3c
  406af4:	9904      	ldr	r1, [sp, #16]
  406af6:	9806      	ldr	r0, [sp, #24]
  406af8:	f7ff fb10 	bl	40611c <__sprint_r.part.0>
  406afc:	2800      	cmp	r0, #0
  406afe:	d0c9      	beq.n	406a94 <_vfiprintf_r+0x8f8>
  406b00:	f8dd b010 	ldr.w	fp, [sp, #16]
  406b04:	e797      	b.n	406a36 <_vfiprintf_r+0x89a>
  406b06:	9302      	str	r3, [sp, #8]
  406b08:	2600      	movs	r6, #0
  406b0a:	2700      	movs	r7, #0
  406b0c:	4649      	mov	r1, r9
  406b0e:	e000      	b.n	406b12 <_vfiprintf_r+0x976>
  406b10:	4659      	mov	r1, fp
  406b12:	08f2      	lsrs	r2, r6, #3
  406b14:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  406b18:	08f8      	lsrs	r0, r7, #3
  406b1a:	f006 0307 	and.w	r3, r6, #7
  406b1e:	4607      	mov	r7, r0
  406b20:	4616      	mov	r6, r2
  406b22:	3330      	adds	r3, #48	; 0x30
  406b24:	ea56 0207 	orrs.w	r2, r6, r7
  406b28:	f801 3c01 	strb.w	r3, [r1, #-1]
  406b2c:	f101 3bff 	add.w	fp, r1, #4294967295
  406b30:	d1ee      	bne.n	406b10 <_vfiprintf_r+0x974>
  406b32:	9a02      	ldr	r2, [sp, #8]
  406b34:	07d6      	lsls	r6, r2, #31
  406b36:	f57f ad9d 	bpl.w	406674 <_vfiprintf_r+0x4d8>
  406b3a:	2b30      	cmp	r3, #48	; 0x30
  406b3c:	f43f ad9a 	beq.w	406674 <_vfiprintf_r+0x4d8>
  406b40:	3902      	subs	r1, #2
  406b42:	2330      	movs	r3, #48	; 0x30
  406b44:	f80b 3c01 	strb.w	r3, [fp, #-1]
  406b48:	eba9 0301 	sub.w	r3, r9, r1
  406b4c:	9305      	str	r3, [sp, #20]
  406b4e:	468b      	mov	fp, r1
  406b50:	e476      	b.n	406440 <_vfiprintf_r+0x2a4>
  406b52:	9b03      	ldr	r3, [sp, #12]
  406b54:	9a08      	ldr	r2, [sp, #32]
  406b56:	428a      	cmp	r2, r1
  406b58:	bfac      	ite	ge
  406b5a:	189b      	addge	r3, r3, r2
  406b5c:	185b      	addlt	r3, r3, r1
  406b5e:	9303      	str	r3, [sp, #12]
  406b60:	e798      	b.n	406a94 <_vfiprintf_r+0x8f8>
  406b62:	2202      	movs	r2, #2
  406b64:	e44d      	b.n	406402 <_vfiprintf_r+0x266>
  406b66:	2f00      	cmp	r7, #0
  406b68:	bf08      	it	eq
  406b6a:	2e0a      	cmpeq	r6, #10
  406b6c:	d352      	bcc.n	406c14 <_vfiprintf_r+0xa78>
  406b6e:	46cb      	mov	fp, r9
  406b70:	4630      	mov	r0, r6
  406b72:	4639      	mov	r1, r7
  406b74:	220a      	movs	r2, #10
  406b76:	2300      	movs	r3, #0
  406b78:	f001 fe9c 	bl	4088b4 <__aeabi_uldivmod>
  406b7c:	3230      	adds	r2, #48	; 0x30
  406b7e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  406b82:	4630      	mov	r0, r6
  406b84:	4639      	mov	r1, r7
  406b86:	2300      	movs	r3, #0
  406b88:	220a      	movs	r2, #10
  406b8a:	f001 fe93 	bl	4088b4 <__aeabi_uldivmod>
  406b8e:	4606      	mov	r6, r0
  406b90:	460f      	mov	r7, r1
  406b92:	ea56 0307 	orrs.w	r3, r6, r7
  406b96:	d1eb      	bne.n	406b70 <_vfiprintf_r+0x9d4>
  406b98:	e56c      	b.n	406674 <_vfiprintf_r+0x4d8>
  406b9a:	9405      	str	r4, [sp, #20]
  406b9c:	46cb      	mov	fp, r9
  406b9e:	e44f      	b.n	406440 <_vfiprintf_r+0x2a4>
  406ba0:	aa0f      	add	r2, sp, #60	; 0x3c
  406ba2:	9904      	ldr	r1, [sp, #16]
  406ba4:	9806      	ldr	r0, [sp, #24]
  406ba6:	f7ff fab9 	bl	40611c <__sprint_r.part.0>
  406baa:	2800      	cmp	r0, #0
  406bac:	d1a8      	bne.n	406b00 <_vfiprintf_r+0x964>
  406bae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406bb0:	46ca      	mov	sl, r9
  406bb2:	e75e      	b.n	406a72 <_vfiprintf_r+0x8d6>
  406bb4:	aa0f      	add	r2, sp, #60	; 0x3c
  406bb6:	9904      	ldr	r1, [sp, #16]
  406bb8:	9806      	ldr	r0, [sp, #24]
  406bba:	f7ff faaf 	bl	40611c <__sprint_r.part.0>
  406bbe:	2800      	cmp	r0, #0
  406bc0:	d19e      	bne.n	406b00 <_vfiprintf_r+0x964>
  406bc2:	46ca      	mov	sl, r9
  406bc4:	f7ff bbc0 	b.w	406348 <_vfiprintf_r+0x1ac>
  406bc8:	00409b18 	.word	0x00409b18
  406bcc:	00409b08 	.word	0x00409b08
  406bd0:	3104      	adds	r1, #4
  406bd2:	6816      	ldr	r6, [r2, #0]
  406bd4:	9107      	str	r1, [sp, #28]
  406bd6:	2201      	movs	r2, #1
  406bd8:	2700      	movs	r7, #0
  406bda:	e412      	b.n	406402 <_vfiprintf_r+0x266>
  406bdc:	9807      	ldr	r0, [sp, #28]
  406bde:	4601      	mov	r1, r0
  406be0:	3104      	adds	r1, #4
  406be2:	6806      	ldr	r6, [r0, #0]
  406be4:	9107      	str	r1, [sp, #28]
  406be6:	2700      	movs	r7, #0
  406be8:	e40b      	b.n	406402 <_vfiprintf_r+0x266>
  406bea:	680e      	ldr	r6, [r1, #0]
  406bec:	3104      	adds	r1, #4
  406bee:	9107      	str	r1, [sp, #28]
  406bf0:	2700      	movs	r7, #0
  406bf2:	e591      	b.n	406718 <_vfiprintf_r+0x57c>
  406bf4:	9907      	ldr	r1, [sp, #28]
  406bf6:	680e      	ldr	r6, [r1, #0]
  406bf8:	460a      	mov	r2, r1
  406bfa:	17f7      	asrs	r7, r6, #31
  406bfc:	3204      	adds	r2, #4
  406bfe:	9207      	str	r2, [sp, #28]
  406c00:	4630      	mov	r0, r6
  406c02:	4639      	mov	r1, r7
  406c04:	e50f      	b.n	406626 <_vfiprintf_r+0x48a>
  406c06:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406c0a:	f000 fe7f 	bl	40790c <__retarget_lock_release_recursive>
  406c0e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406c12:	e71a      	b.n	406a4a <_vfiprintf_r+0x8ae>
  406c14:	9b02      	ldr	r3, [sp, #8]
  406c16:	9302      	str	r3, [sp, #8]
  406c18:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  406c1c:	3630      	adds	r6, #48	; 0x30
  406c1e:	2301      	movs	r3, #1
  406c20:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  406c24:	9305      	str	r3, [sp, #20]
  406c26:	e40b      	b.n	406440 <_vfiprintf_r+0x2a4>
  406c28:	aa0f      	add	r2, sp, #60	; 0x3c
  406c2a:	9904      	ldr	r1, [sp, #16]
  406c2c:	9806      	ldr	r0, [sp, #24]
  406c2e:	f7ff fa75 	bl	40611c <__sprint_r.part.0>
  406c32:	2800      	cmp	r0, #0
  406c34:	f47f af64 	bne.w	406b00 <_vfiprintf_r+0x964>
  406c38:	9910      	ldr	r1, [sp, #64]	; 0x40
  406c3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406c3c:	1c48      	adds	r0, r1, #1
  406c3e:	46ca      	mov	sl, r9
  406c40:	e651      	b.n	4068e6 <_vfiprintf_r+0x74a>
  406c42:	aa0f      	add	r2, sp, #60	; 0x3c
  406c44:	9904      	ldr	r1, [sp, #16]
  406c46:	9806      	ldr	r0, [sp, #24]
  406c48:	f7ff fa68 	bl	40611c <__sprint_r.part.0>
  406c4c:	2800      	cmp	r0, #0
  406c4e:	f47f af57 	bne.w	406b00 <_vfiprintf_r+0x964>
  406c52:	9910      	ldr	r1, [sp, #64]	; 0x40
  406c54:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406c56:	1c48      	adds	r0, r1, #1
  406c58:	46ca      	mov	sl, r9
  406c5a:	e448      	b.n	4064ee <_vfiprintf_r+0x352>
  406c5c:	2a00      	cmp	r2, #0
  406c5e:	f040 8091 	bne.w	406d84 <_vfiprintf_r+0xbe8>
  406c62:	2001      	movs	r0, #1
  406c64:	4611      	mov	r1, r2
  406c66:	46ca      	mov	sl, r9
  406c68:	e641      	b.n	4068ee <_vfiprintf_r+0x752>
  406c6a:	aa0f      	add	r2, sp, #60	; 0x3c
  406c6c:	9904      	ldr	r1, [sp, #16]
  406c6e:	9806      	ldr	r0, [sp, #24]
  406c70:	f7ff fa54 	bl	40611c <__sprint_r.part.0>
  406c74:	2800      	cmp	r0, #0
  406c76:	f47f af43 	bne.w	406b00 <_vfiprintf_r+0x964>
  406c7a:	9810      	ldr	r0, [sp, #64]	; 0x40
  406c7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406c7e:	3001      	adds	r0, #1
  406c80:	46ca      	mov	sl, r9
  406c82:	e667      	b.n	406954 <_vfiprintf_r+0x7b8>
  406c84:	46d3      	mov	fp, sl
  406c86:	e6d6      	b.n	406a36 <_vfiprintf_r+0x89a>
  406c88:	9e07      	ldr	r6, [sp, #28]
  406c8a:	3607      	adds	r6, #7
  406c8c:	f026 0207 	bic.w	r2, r6, #7
  406c90:	f102 0108 	add.w	r1, r2, #8
  406c94:	e9d2 6700 	ldrd	r6, r7, [r2]
  406c98:	9107      	str	r1, [sp, #28]
  406c9a:	2201      	movs	r2, #1
  406c9c:	f7ff bbb1 	b.w	406402 <_vfiprintf_r+0x266>
  406ca0:	9e07      	ldr	r6, [sp, #28]
  406ca2:	3607      	adds	r6, #7
  406ca4:	f026 0607 	bic.w	r6, r6, #7
  406ca8:	e9d6 0100 	ldrd	r0, r1, [r6]
  406cac:	f106 0208 	add.w	r2, r6, #8
  406cb0:	9207      	str	r2, [sp, #28]
  406cb2:	4606      	mov	r6, r0
  406cb4:	460f      	mov	r7, r1
  406cb6:	e4b6      	b.n	406626 <_vfiprintf_r+0x48a>
  406cb8:	9e07      	ldr	r6, [sp, #28]
  406cba:	3607      	adds	r6, #7
  406cbc:	f026 0207 	bic.w	r2, r6, #7
  406cc0:	f102 0108 	add.w	r1, r2, #8
  406cc4:	e9d2 6700 	ldrd	r6, r7, [r2]
  406cc8:	9107      	str	r1, [sp, #28]
  406cca:	2200      	movs	r2, #0
  406ccc:	f7ff bb99 	b.w	406402 <_vfiprintf_r+0x266>
  406cd0:	9e07      	ldr	r6, [sp, #28]
  406cd2:	3607      	adds	r6, #7
  406cd4:	f026 0107 	bic.w	r1, r6, #7
  406cd8:	f101 0008 	add.w	r0, r1, #8
  406cdc:	9007      	str	r0, [sp, #28]
  406cde:	e9d1 6700 	ldrd	r6, r7, [r1]
  406ce2:	e519      	b.n	406718 <_vfiprintf_r+0x57c>
  406ce4:	46cb      	mov	fp, r9
  406ce6:	f7ff bbab 	b.w	406440 <_vfiprintf_r+0x2a4>
  406cea:	252d      	movs	r5, #45	; 0x2d
  406cec:	4276      	negs	r6, r6
  406cee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  406cf2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406cf6:	2201      	movs	r2, #1
  406cf8:	f7ff bb88 	b.w	40640c <_vfiprintf_r+0x270>
  406cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406cfe:	b9b3      	cbnz	r3, 406d2e <_vfiprintf_r+0xb92>
  406d00:	4611      	mov	r1, r2
  406d02:	2001      	movs	r0, #1
  406d04:	46ca      	mov	sl, r9
  406d06:	e5f2      	b.n	4068ee <_vfiprintf_r+0x752>
  406d08:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406d0c:	f000 fdfe 	bl	40790c <__retarget_lock_release_recursive>
  406d10:	f04f 33ff 	mov.w	r3, #4294967295
  406d14:	9303      	str	r3, [sp, #12]
  406d16:	f7ff bb50 	b.w	4063ba <_vfiprintf_r+0x21e>
  406d1a:	aa0f      	add	r2, sp, #60	; 0x3c
  406d1c:	9904      	ldr	r1, [sp, #16]
  406d1e:	9806      	ldr	r0, [sp, #24]
  406d20:	f7ff f9fc 	bl	40611c <__sprint_r.part.0>
  406d24:	2800      	cmp	r0, #0
  406d26:	f47f aeeb 	bne.w	406b00 <_vfiprintf_r+0x964>
  406d2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406d2c:	e6a9      	b.n	406a82 <_vfiprintf_r+0x8e6>
  406d2e:	ab0e      	add	r3, sp, #56	; 0x38
  406d30:	2202      	movs	r2, #2
  406d32:	931c      	str	r3, [sp, #112]	; 0x70
  406d34:	921d      	str	r2, [sp, #116]	; 0x74
  406d36:	2001      	movs	r0, #1
  406d38:	46ca      	mov	sl, r9
  406d3a:	e5d0      	b.n	4068de <_vfiprintf_r+0x742>
  406d3c:	aa0f      	add	r2, sp, #60	; 0x3c
  406d3e:	9904      	ldr	r1, [sp, #16]
  406d40:	9806      	ldr	r0, [sp, #24]
  406d42:	f7ff f9eb 	bl	40611c <__sprint_r.part.0>
  406d46:	2800      	cmp	r0, #0
  406d48:	f47f aeda 	bne.w	406b00 <_vfiprintf_r+0x964>
  406d4c:	9910      	ldr	r1, [sp, #64]	; 0x40
  406d4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406d50:	1c48      	adds	r0, r1, #1
  406d52:	46ca      	mov	sl, r9
  406d54:	e5a4      	b.n	4068a0 <_vfiprintf_r+0x704>
  406d56:	9a07      	ldr	r2, [sp, #28]
  406d58:	9903      	ldr	r1, [sp, #12]
  406d5a:	6813      	ldr	r3, [r2, #0]
  406d5c:	17cd      	asrs	r5, r1, #31
  406d5e:	4608      	mov	r0, r1
  406d60:	3204      	adds	r2, #4
  406d62:	4629      	mov	r1, r5
  406d64:	9207      	str	r2, [sp, #28]
  406d66:	e9c3 0100 	strd	r0, r1, [r3]
  406d6a:	f7ff ba54 	b.w	406216 <_vfiprintf_r+0x7a>
  406d6e:	4658      	mov	r0, fp
  406d70:	9607      	str	r6, [sp, #28]
  406d72:	9302      	str	r3, [sp, #8]
  406d74:	f7ff f964 	bl	406040 <strlen>
  406d78:	2400      	movs	r4, #0
  406d7a:	9005      	str	r0, [sp, #20]
  406d7c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406d80:	f7ff bb5e 	b.w	406440 <_vfiprintf_r+0x2a4>
  406d84:	aa0f      	add	r2, sp, #60	; 0x3c
  406d86:	9904      	ldr	r1, [sp, #16]
  406d88:	9806      	ldr	r0, [sp, #24]
  406d8a:	f7ff f9c7 	bl	40611c <__sprint_r.part.0>
  406d8e:	2800      	cmp	r0, #0
  406d90:	f47f aeb6 	bne.w	406b00 <_vfiprintf_r+0x964>
  406d94:	9910      	ldr	r1, [sp, #64]	; 0x40
  406d96:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406d98:	1c48      	adds	r0, r1, #1
  406d9a:	46ca      	mov	sl, r9
  406d9c:	e5a7      	b.n	4068ee <_vfiprintf_r+0x752>
  406d9e:	9910      	ldr	r1, [sp, #64]	; 0x40
  406da0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406da2:	4e20      	ldr	r6, [pc, #128]	; (406e24 <_vfiprintf_r+0xc88>)
  406da4:	3101      	adds	r1, #1
  406da6:	f7ff bb90 	b.w	4064ca <_vfiprintf_r+0x32e>
  406daa:	2c06      	cmp	r4, #6
  406dac:	bf28      	it	cs
  406dae:	2406      	movcs	r4, #6
  406db0:	9405      	str	r4, [sp, #20]
  406db2:	9607      	str	r6, [sp, #28]
  406db4:	9401      	str	r4, [sp, #4]
  406db6:	f8df b070 	ldr.w	fp, [pc, #112]	; 406e28 <_vfiprintf_r+0xc8c>
  406dba:	e4d5      	b.n	406768 <_vfiprintf_r+0x5cc>
  406dbc:	9810      	ldr	r0, [sp, #64]	; 0x40
  406dbe:	4e19      	ldr	r6, [pc, #100]	; (406e24 <_vfiprintf_r+0xc88>)
  406dc0:	3001      	adds	r0, #1
  406dc2:	e603      	b.n	4069cc <_vfiprintf_r+0x830>
  406dc4:	9405      	str	r4, [sp, #20]
  406dc6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406dca:	9607      	str	r6, [sp, #28]
  406dcc:	9302      	str	r3, [sp, #8]
  406dce:	4604      	mov	r4, r0
  406dd0:	f7ff bb36 	b.w	406440 <_vfiprintf_r+0x2a4>
  406dd4:	4686      	mov	lr, r0
  406dd6:	f7ff bbce 	b.w	406576 <_vfiprintf_r+0x3da>
  406dda:	9806      	ldr	r0, [sp, #24]
  406ddc:	aa0f      	add	r2, sp, #60	; 0x3c
  406dde:	4659      	mov	r1, fp
  406de0:	f7ff f99c 	bl	40611c <__sprint_r.part.0>
  406de4:	2800      	cmp	r0, #0
  406de6:	f43f ae24 	beq.w	406a32 <_vfiprintf_r+0x896>
  406dea:	e624      	b.n	406a36 <_vfiprintf_r+0x89a>
  406dec:	9907      	ldr	r1, [sp, #28]
  406dee:	f898 2001 	ldrb.w	r2, [r8, #1]
  406df2:	680c      	ldr	r4, [r1, #0]
  406df4:	3104      	adds	r1, #4
  406df6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  406dfa:	46b8      	mov	r8, r7
  406dfc:	9107      	str	r1, [sp, #28]
  406dfe:	f7ff ba3f 	b.w	406280 <_vfiprintf_r+0xe4>
  406e02:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406e06:	e43c      	b.n	406682 <_vfiprintf_r+0x4e6>
  406e08:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406e0c:	e521      	b.n	406852 <_vfiprintf_r+0x6b6>
  406e0e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406e12:	f7ff bbf4 	b.w	4065fe <_vfiprintf_r+0x462>
  406e16:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406e1a:	e491      	b.n	406740 <_vfiprintf_r+0x5a4>
  406e1c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406e20:	e469      	b.n	4066f6 <_vfiprintf_r+0x55a>
  406e22:	bf00      	nop
  406e24:	00409b08 	.word	0x00409b08
  406e28:	00409b00 	.word	0x00409b00

00406e2c <__sbprintf>:
  406e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406e30:	460c      	mov	r4, r1
  406e32:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  406e36:	8989      	ldrh	r1, [r1, #12]
  406e38:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406e3a:	89e5      	ldrh	r5, [r4, #14]
  406e3c:	9619      	str	r6, [sp, #100]	; 0x64
  406e3e:	f021 0102 	bic.w	r1, r1, #2
  406e42:	4606      	mov	r6, r0
  406e44:	69e0      	ldr	r0, [r4, #28]
  406e46:	f8ad 100c 	strh.w	r1, [sp, #12]
  406e4a:	4617      	mov	r7, r2
  406e4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  406e50:	6a62      	ldr	r2, [r4, #36]	; 0x24
  406e52:	f8ad 500e 	strh.w	r5, [sp, #14]
  406e56:	4698      	mov	r8, r3
  406e58:	ad1a      	add	r5, sp, #104	; 0x68
  406e5a:	2300      	movs	r3, #0
  406e5c:	9007      	str	r0, [sp, #28]
  406e5e:	a816      	add	r0, sp, #88	; 0x58
  406e60:	9209      	str	r2, [sp, #36]	; 0x24
  406e62:	9306      	str	r3, [sp, #24]
  406e64:	9500      	str	r5, [sp, #0]
  406e66:	9504      	str	r5, [sp, #16]
  406e68:	9102      	str	r1, [sp, #8]
  406e6a:	9105      	str	r1, [sp, #20]
  406e6c:	f000 fd48 	bl	407900 <__retarget_lock_init_recursive>
  406e70:	4643      	mov	r3, r8
  406e72:	463a      	mov	r2, r7
  406e74:	4669      	mov	r1, sp
  406e76:	4630      	mov	r0, r6
  406e78:	f7ff f990 	bl	40619c <_vfiprintf_r>
  406e7c:	1e05      	subs	r5, r0, #0
  406e7e:	db07      	blt.n	406e90 <__sbprintf+0x64>
  406e80:	4630      	mov	r0, r6
  406e82:	4669      	mov	r1, sp
  406e84:	f000 f928 	bl	4070d8 <_fflush_r>
  406e88:	2800      	cmp	r0, #0
  406e8a:	bf18      	it	ne
  406e8c:	f04f 35ff 	movne.w	r5, #4294967295
  406e90:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  406e94:	065b      	lsls	r3, r3, #25
  406e96:	d503      	bpl.n	406ea0 <__sbprintf+0x74>
  406e98:	89a3      	ldrh	r3, [r4, #12]
  406e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406e9e:	81a3      	strh	r3, [r4, #12]
  406ea0:	9816      	ldr	r0, [sp, #88]	; 0x58
  406ea2:	f000 fd2f 	bl	407904 <__retarget_lock_close_recursive>
  406ea6:	4628      	mov	r0, r5
  406ea8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  406eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00406eb0 <__swsetup_r>:
  406eb0:	b538      	push	{r3, r4, r5, lr}
  406eb2:	4b30      	ldr	r3, [pc, #192]	; (406f74 <__swsetup_r+0xc4>)
  406eb4:	681b      	ldr	r3, [r3, #0]
  406eb6:	4605      	mov	r5, r0
  406eb8:	460c      	mov	r4, r1
  406eba:	b113      	cbz	r3, 406ec2 <__swsetup_r+0x12>
  406ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  406ebe:	2a00      	cmp	r2, #0
  406ec0:	d038      	beq.n	406f34 <__swsetup_r+0x84>
  406ec2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406ec6:	b293      	uxth	r3, r2
  406ec8:	0718      	lsls	r0, r3, #28
  406eca:	d50c      	bpl.n	406ee6 <__swsetup_r+0x36>
  406ecc:	6920      	ldr	r0, [r4, #16]
  406ece:	b1a8      	cbz	r0, 406efc <__swsetup_r+0x4c>
  406ed0:	f013 0201 	ands.w	r2, r3, #1
  406ed4:	d01e      	beq.n	406f14 <__swsetup_r+0x64>
  406ed6:	6963      	ldr	r3, [r4, #20]
  406ed8:	2200      	movs	r2, #0
  406eda:	425b      	negs	r3, r3
  406edc:	61a3      	str	r3, [r4, #24]
  406ede:	60a2      	str	r2, [r4, #8]
  406ee0:	b1f0      	cbz	r0, 406f20 <__swsetup_r+0x70>
  406ee2:	2000      	movs	r0, #0
  406ee4:	bd38      	pop	{r3, r4, r5, pc}
  406ee6:	06d9      	lsls	r1, r3, #27
  406ee8:	d53c      	bpl.n	406f64 <__swsetup_r+0xb4>
  406eea:	0758      	lsls	r0, r3, #29
  406eec:	d426      	bmi.n	406f3c <__swsetup_r+0x8c>
  406eee:	6920      	ldr	r0, [r4, #16]
  406ef0:	f042 0308 	orr.w	r3, r2, #8
  406ef4:	81a3      	strh	r3, [r4, #12]
  406ef6:	b29b      	uxth	r3, r3
  406ef8:	2800      	cmp	r0, #0
  406efa:	d1e9      	bne.n	406ed0 <__swsetup_r+0x20>
  406efc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  406f00:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  406f04:	d0e4      	beq.n	406ed0 <__swsetup_r+0x20>
  406f06:	4628      	mov	r0, r5
  406f08:	4621      	mov	r1, r4
  406f0a:	f000 fd2f 	bl	40796c <__smakebuf_r>
  406f0e:	89a3      	ldrh	r3, [r4, #12]
  406f10:	6920      	ldr	r0, [r4, #16]
  406f12:	e7dd      	b.n	406ed0 <__swsetup_r+0x20>
  406f14:	0799      	lsls	r1, r3, #30
  406f16:	bf58      	it	pl
  406f18:	6962      	ldrpl	r2, [r4, #20]
  406f1a:	60a2      	str	r2, [r4, #8]
  406f1c:	2800      	cmp	r0, #0
  406f1e:	d1e0      	bne.n	406ee2 <__swsetup_r+0x32>
  406f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406f24:	061a      	lsls	r2, r3, #24
  406f26:	d5dd      	bpl.n	406ee4 <__swsetup_r+0x34>
  406f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406f2c:	81a3      	strh	r3, [r4, #12]
  406f2e:	f04f 30ff 	mov.w	r0, #4294967295
  406f32:	bd38      	pop	{r3, r4, r5, pc}
  406f34:	4618      	mov	r0, r3
  406f36:	f000 f927 	bl	407188 <__sinit>
  406f3a:	e7c2      	b.n	406ec2 <__swsetup_r+0x12>
  406f3c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406f3e:	b151      	cbz	r1, 406f56 <__swsetup_r+0xa6>
  406f40:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406f44:	4299      	cmp	r1, r3
  406f46:	d004      	beq.n	406f52 <__swsetup_r+0xa2>
  406f48:	4628      	mov	r0, r5
  406f4a:	f000 fa43 	bl	4073d4 <_free_r>
  406f4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406f52:	2300      	movs	r3, #0
  406f54:	6323      	str	r3, [r4, #48]	; 0x30
  406f56:	2300      	movs	r3, #0
  406f58:	6920      	ldr	r0, [r4, #16]
  406f5a:	6063      	str	r3, [r4, #4]
  406f5c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  406f60:	6020      	str	r0, [r4, #0]
  406f62:	e7c5      	b.n	406ef0 <__swsetup_r+0x40>
  406f64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  406f68:	2309      	movs	r3, #9
  406f6a:	602b      	str	r3, [r5, #0]
  406f6c:	f04f 30ff 	mov.w	r0, #4294967295
  406f70:	81a2      	strh	r2, [r4, #12]
  406f72:	bd38      	pop	{r3, r4, r5, pc}
  406f74:	20400024 	.word	0x20400024

00406f78 <register_fini>:
  406f78:	4b02      	ldr	r3, [pc, #8]	; (406f84 <register_fini+0xc>)
  406f7a:	b113      	cbz	r3, 406f82 <register_fini+0xa>
  406f7c:	4802      	ldr	r0, [pc, #8]	; (406f88 <register_fini+0x10>)
  406f7e:	f000 b805 	b.w	406f8c <atexit>
  406f82:	4770      	bx	lr
  406f84:	00000000 	.word	0x00000000
  406f88:	004071f9 	.word	0x004071f9

00406f8c <atexit>:
  406f8c:	2300      	movs	r3, #0
  406f8e:	4601      	mov	r1, r0
  406f90:	461a      	mov	r2, r3
  406f92:	4618      	mov	r0, r3
  406f94:	f001 bb66 	b.w	408664 <__register_exitproc>

00406f98 <__sflush_r>:
  406f98:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  406f9c:	b29a      	uxth	r2, r3
  406f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406fa2:	460d      	mov	r5, r1
  406fa4:	0711      	lsls	r1, r2, #28
  406fa6:	4680      	mov	r8, r0
  406fa8:	d43a      	bmi.n	407020 <__sflush_r+0x88>
  406faa:	686a      	ldr	r2, [r5, #4]
  406fac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406fb0:	2a00      	cmp	r2, #0
  406fb2:	81ab      	strh	r3, [r5, #12]
  406fb4:	dd6f      	ble.n	407096 <__sflush_r+0xfe>
  406fb6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406fb8:	2c00      	cmp	r4, #0
  406fba:	d049      	beq.n	407050 <__sflush_r+0xb8>
  406fbc:	2200      	movs	r2, #0
  406fbe:	b29b      	uxth	r3, r3
  406fc0:	f8d8 6000 	ldr.w	r6, [r8]
  406fc4:	f8c8 2000 	str.w	r2, [r8]
  406fc8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  406fcc:	d067      	beq.n	40709e <__sflush_r+0x106>
  406fce:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  406fd0:	075f      	lsls	r7, r3, #29
  406fd2:	d505      	bpl.n	406fe0 <__sflush_r+0x48>
  406fd4:	6869      	ldr	r1, [r5, #4]
  406fd6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  406fd8:	1a52      	subs	r2, r2, r1
  406fda:	b10b      	cbz	r3, 406fe0 <__sflush_r+0x48>
  406fdc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  406fde:	1ad2      	subs	r2, r2, r3
  406fe0:	2300      	movs	r3, #0
  406fe2:	69e9      	ldr	r1, [r5, #28]
  406fe4:	4640      	mov	r0, r8
  406fe6:	47a0      	blx	r4
  406fe8:	1c44      	adds	r4, r0, #1
  406fea:	d03c      	beq.n	407066 <__sflush_r+0xce>
  406fec:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  406ff0:	692a      	ldr	r2, [r5, #16]
  406ff2:	602a      	str	r2, [r5, #0]
  406ff4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  406ff8:	2200      	movs	r2, #0
  406ffa:	81ab      	strh	r3, [r5, #12]
  406ffc:	04db      	lsls	r3, r3, #19
  406ffe:	606a      	str	r2, [r5, #4]
  407000:	d447      	bmi.n	407092 <__sflush_r+0xfa>
  407002:	6b29      	ldr	r1, [r5, #48]	; 0x30
  407004:	f8c8 6000 	str.w	r6, [r8]
  407008:	b311      	cbz	r1, 407050 <__sflush_r+0xb8>
  40700a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40700e:	4299      	cmp	r1, r3
  407010:	d002      	beq.n	407018 <__sflush_r+0x80>
  407012:	4640      	mov	r0, r8
  407014:	f000 f9de 	bl	4073d4 <_free_r>
  407018:	2000      	movs	r0, #0
  40701a:	6328      	str	r0, [r5, #48]	; 0x30
  40701c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407020:	692e      	ldr	r6, [r5, #16]
  407022:	b1ae      	cbz	r6, 407050 <__sflush_r+0xb8>
  407024:	682c      	ldr	r4, [r5, #0]
  407026:	602e      	str	r6, [r5, #0]
  407028:	0791      	lsls	r1, r2, #30
  40702a:	bf0c      	ite	eq
  40702c:	696b      	ldreq	r3, [r5, #20]
  40702e:	2300      	movne	r3, #0
  407030:	1ba4      	subs	r4, r4, r6
  407032:	60ab      	str	r3, [r5, #8]
  407034:	e00a      	b.n	40704c <__sflush_r+0xb4>
  407036:	4623      	mov	r3, r4
  407038:	4632      	mov	r2, r6
  40703a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40703c:	69e9      	ldr	r1, [r5, #28]
  40703e:	4640      	mov	r0, r8
  407040:	47b8      	blx	r7
  407042:	2800      	cmp	r0, #0
  407044:	eba4 0400 	sub.w	r4, r4, r0
  407048:	4406      	add	r6, r0
  40704a:	dd04      	ble.n	407056 <__sflush_r+0xbe>
  40704c:	2c00      	cmp	r4, #0
  40704e:	dcf2      	bgt.n	407036 <__sflush_r+0x9e>
  407050:	2000      	movs	r0, #0
  407052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407056:	89ab      	ldrh	r3, [r5, #12]
  407058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40705c:	81ab      	strh	r3, [r5, #12]
  40705e:	f04f 30ff 	mov.w	r0, #4294967295
  407062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407066:	f8d8 4000 	ldr.w	r4, [r8]
  40706a:	2c1d      	cmp	r4, #29
  40706c:	d8f3      	bhi.n	407056 <__sflush_r+0xbe>
  40706e:	4b19      	ldr	r3, [pc, #100]	; (4070d4 <__sflush_r+0x13c>)
  407070:	40e3      	lsrs	r3, r4
  407072:	43db      	mvns	r3, r3
  407074:	f013 0301 	ands.w	r3, r3, #1
  407078:	d1ed      	bne.n	407056 <__sflush_r+0xbe>
  40707a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40707e:	606b      	str	r3, [r5, #4]
  407080:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  407084:	6929      	ldr	r1, [r5, #16]
  407086:	81ab      	strh	r3, [r5, #12]
  407088:	04da      	lsls	r2, r3, #19
  40708a:	6029      	str	r1, [r5, #0]
  40708c:	d5b9      	bpl.n	407002 <__sflush_r+0x6a>
  40708e:	2c00      	cmp	r4, #0
  407090:	d1b7      	bne.n	407002 <__sflush_r+0x6a>
  407092:	6528      	str	r0, [r5, #80]	; 0x50
  407094:	e7b5      	b.n	407002 <__sflush_r+0x6a>
  407096:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  407098:	2a00      	cmp	r2, #0
  40709a:	dc8c      	bgt.n	406fb6 <__sflush_r+0x1e>
  40709c:	e7d8      	b.n	407050 <__sflush_r+0xb8>
  40709e:	2301      	movs	r3, #1
  4070a0:	69e9      	ldr	r1, [r5, #28]
  4070a2:	4640      	mov	r0, r8
  4070a4:	47a0      	blx	r4
  4070a6:	1c43      	adds	r3, r0, #1
  4070a8:	4602      	mov	r2, r0
  4070aa:	d002      	beq.n	4070b2 <__sflush_r+0x11a>
  4070ac:	89ab      	ldrh	r3, [r5, #12]
  4070ae:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4070b0:	e78e      	b.n	406fd0 <__sflush_r+0x38>
  4070b2:	f8d8 3000 	ldr.w	r3, [r8]
  4070b6:	2b00      	cmp	r3, #0
  4070b8:	d0f8      	beq.n	4070ac <__sflush_r+0x114>
  4070ba:	2b1d      	cmp	r3, #29
  4070bc:	d001      	beq.n	4070c2 <__sflush_r+0x12a>
  4070be:	2b16      	cmp	r3, #22
  4070c0:	d102      	bne.n	4070c8 <__sflush_r+0x130>
  4070c2:	f8c8 6000 	str.w	r6, [r8]
  4070c6:	e7c3      	b.n	407050 <__sflush_r+0xb8>
  4070c8:	89ab      	ldrh	r3, [r5, #12]
  4070ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4070ce:	81ab      	strh	r3, [r5, #12]
  4070d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4070d4:	20400001 	.word	0x20400001

004070d8 <_fflush_r>:
  4070d8:	b538      	push	{r3, r4, r5, lr}
  4070da:	460d      	mov	r5, r1
  4070dc:	4604      	mov	r4, r0
  4070de:	b108      	cbz	r0, 4070e4 <_fflush_r+0xc>
  4070e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4070e2:	b1bb      	cbz	r3, 407114 <_fflush_r+0x3c>
  4070e4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4070e8:	b188      	cbz	r0, 40710e <_fflush_r+0x36>
  4070ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4070ec:	07db      	lsls	r3, r3, #31
  4070ee:	d401      	bmi.n	4070f4 <_fflush_r+0x1c>
  4070f0:	0581      	lsls	r1, r0, #22
  4070f2:	d517      	bpl.n	407124 <_fflush_r+0x4c>
  4070f4:	4620      	mov	r0, r4
  4070f6:	4629      	mov	r1, r5
  4070f8:	f7ff ff4e 	bl	406f98 <__sflush_r>
  4070fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4070fe:	07da      	lsls	r2, r3, #31
  407100:	4604      	mov	r4, r0
  407102:	d402      	bmi.n	40710a <_fflush_r+0x32>
  407104:	89ab      	ldrh	r3, [r5, #12]
  407106:	059b      	lsls	r3, r3, #22
  407108:	d507      	bpl.n	40711a <_fflush_r+0x42>
  40710a:	4620      	mov	r0, r4
  40710c:	bd38      	pop	{r3, r4, r5, pc}
  40710e:	4604      	mov	r4, r0
  407110:	4620      	mov	r0, r4
  407112:	bd38      	pop	{r3, r4, r5, pc}
  407114:	f000 f838 	bl	407188 <__sinit>
  407118:	e7e4      	b.n	4070e4 <_fflush_r+0xc>
  40711a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40711c:	f000 fbf6 	bl	40790c <__retarget_lock_release_recursive>
  407120:	4620      	mov	r0, r4
  407122:	bd38      	pop	{r3, r4, r5, pc}
  407124:	6da8      	ldr	r0, [r5, #88]	; 0x58
  407126:	f000 fbef 	bl	407908 <__retarget_lock_acquire_recursive>
  40712a:	e7e3      	b.n	4070f4 <_fflush_r+0x1c>

0040712c <_cleanup_r>:
  40712c:	4901      	ldr	r1, [pc, #4]	; (407134 <_cleanup_r+0x8>)
  40712e:	f000 bbaf 	b.w	407890 <_fwalk_reent>
  407132:	bf00      	nop
  407134:	0040874d 	.word	0x0040874d

00407138 <std.isra.0>:
  407138:	b510      	push	{r4, lr}
  40713a:	2300      	movs	r3, #0
  40713c:	4604      	mov	r4, r0
  40713e:	8181      	strh	r1, [r0, #12]
  407140:	81c2      	strh	r2, [r0, #14]
  407142:	6003      	str	r3, [r0, #0]
  407144:	6043      	str	r3, [r0, #4]
  407146:	6083      	str	r3, [r0, #8]
  407148:	6643      	str	r3, [r0, #100]	; 0x64
  40714a:	6103      	str	r3, [r0, #16]
  40714c:	6143      	str	r3, [r0, #20]
  40714e:	6183      	str	r3, [r0, #24]
  407150:	4619      	mov	r1, r3
  407152:	2208      	movs	r2, #8
  407154:	305c      	adds	r0, #92	; 0x5c
  407156:	f7fe fe3d 	bl	405dd4 <memset>
  40715a:	4807      	ldr	r0, [pc, #28]	; (407178 <std.isra.0+0x40>)
  40715c:	4907      	ldr	r1, [pc, #28]	; (40717c <std.isra.0+0x44>)
  40715e:	4a08      	ldr	r2, [pc, #32]	; (407180 <std.isra.0+0x48>)
  407160:	4b08      	ldr	r3, [pc, #32]	; (407184 <std.isra.0+0x4c>)
  407162:	6220      	str	r0, [r4, #32]
  407164:	61e4      	str	r4, [r4, #28]
  407166:	6261      	str	r1, [r4, #36]	; 0x24
  407168:	62a2      	str	r2, [r4, #40]	; 0x28
  40716a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40716c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  407170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407174:	f000 bbc4 	b.w	407900 <__retarget_lock_init_recursive>
  407178:	00408491 	.word	0x00408491
  40717c:	004084b5 	.word	0x004084b5
  407180:	004084f1 	.word	0x004084f1
  407184:	00408511 	.word	0x00408511

00407188 <__sinit>:
  407188:	b510      	push	{r4, lr}
  40718a:	4604      	mov	r4, r0
  40718c:	4812      	ldr	r0, [pc, #72]	; (4071d8 <__sinit+0x50>)
  40718e:	f000 fbbb 	bl	407908 <__retarget_lock_acquire_recursive>
  407192:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  407194:	b9d2      	cbnz	r2, 4071cc <__sinit+0x44>
  407196:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40719a:	4810      	ldr	r0, [pc, #64]	; (4071dc <__sinit+0x54>)
  40719c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4071a0:	2103      	movs	r1, #3
  4071a2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4071a6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4071a8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4071ac:	6860      	ldr	r0, [r4, #4]
  4071ae:	2104      	movs	r1, #4
  4071b0:	f7ff ffc2 	bl	407138 <std.isra.0>
  4071b4:	2201      	movs	r2, #1
  4071b6:	2109      	movs	r1, #9
  4071b8:	68a0      	ldr	r0, [r4, #8]
  4071ba:	f7ff ffbd 	bl	407138 <std.isra.0>
  4071be:	2202      	movs	r2, #2
  4071c0:	2112      	movs	r1, #18
  4071c2:	68e0      	ldr	r0, [r4, #12]
  4071c4:	f7ff ffb8 	bl	407138 <std.isra.0>
  4071c8:	2301      	movs	r3, #1
  4071ca:	63a3      	str	r3, [r4, #56]	; 0x38
  4071cc:	4802      	ldr	r0, [pc, #8]	; (4071d8 <__sinit+0x50>)
  4071ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4071d2:	f000 bb9b 	b.w	40790c <__retarget_lock_release_recursive>
  4071d6:	bf00      	nop
  4071d8:	2040cb50 	.word	0x2040cb50
  4071dc:	0040712d 	.word	0x0040712d

004071e0 <__sfp_lock_acquire>:
  4071e0:	4801      	ldr	r0, [pc, #4]	; (4071e8 <__sfp_lock_acquire+0x8>)
  4071e2:	f000 bb91 	b.w	407908 <__retarget_lock_acquire_recursive>
  4071e6:	bf00      	nop
  4071e8:	2040cb64 	.word	0x2040cb64

004071ec <__sfp_lock_release>:
  4071ec:	4801      	ldr	r0, [pc, #4]	; (4071f4 <__sfp_lock_release+0x8>)
  4071ee:	f000 bb8d 	b.w	40790c <__retarget_lock_release_recursive>
  4071f2:	bf00      	nop
  4071f4:	2040cb64 	.word	0x2040cb64

004071f8 <__libc_fini_array>:
  4071f8:	b538      	push	{r3, r4, r5, lr}
  4071fa:	4c0a      	ldr	r4, [pc, #40]	; (407224 <__libc_fini_array+0x2c>)
  4071fc:	4d0a      	ldr	r5, [pc, #40]	; (407228 <__libc_fini_array+0x30>)
  4071fe:	1b64      	subs	r4, r4, r5
  407200:	10a4      	asrs	r4, r4, #2
  407202:	d00a      	beq.n	40721a <__libc_fini_array+0x22>
  407204:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  407208:	3b01      	subs	r3, #1
  40720a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40720e:	3c01      	subs	r4, #1
  407210:	f855 3904 	ldr.w	r3, [r5], #-4
  407214:	4798      	blx	r3
  407216:	2c00      	cmp	r4, #0
  407218:	d1f9      	bne.n	40720e <__libc_fini_array+0x16>
  40721a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40721e:	f002 bd17 	b.w	409c50 <_fini>
  407222:	bf00      	nop
  407224:	00409c60 	.word	0x00409c60
  407228:	00409c5c 	.word	0x00409c5c

0040722c <__fputwc>:
  40722c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407230:	b082      	sub	sp, #8
  407232:	4680      	mov	r8, r0
  407234:	4689      	mov	r9, r1
  407236:	4614      	mov	r4, r2
  407238:	f000 fb54 	bl	4078e4 <__locale_mb_cur_max>
  40723c:	2801      	cmp	r0, #1
  40723e:	d036      	beq.n	4072ae <__fputwc+0x82>
  407240:	464a      	mov	r2, r9
  407242:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  407246:	a901      	add	r1, sp, #4
  407248:	4640      	mov	r0, r8
  40724a:	f001 f9bd 	bl	4085c8 <_wcrtomb_r>
  40724e:	1c42      	adds	r2, r0, #1
  407250:	4606      	mov	r6, r0
  407252:	d025      	beq.n	4072a0 <__fputwc+0x74>
  407254:	b3a8      	cbz	r0, 4072c2 <__fputwc+0x96>
  407256:	f89d e004 	ldrb.w	lr, [sp, #4]
  40725a:	2500      	movs	r5, #0
  40725c:	f10d 0a04 	add.w	sl, sp, #4
  407260:	e009      	b.n	407276 <__fputwc+0x4a>
  407262:	6823      	ldr	r3, [r4, #0]
  407264:	1c5a      	adds	r2, r3, #1
  407266:	6022      	str	r2, [r4, #0]
  407268:	f883 e000 	strb.w	lr, [r3]
  40726c:	3501      	adds	r5, #1
  40726e:	42b5      	cmp	r5, r6
  407270:	d227      	bcs.n	4072c2 <__fputwc+0x96>
  407272:	f815 e00a 	ldrb.w	lr, [r5, sl]
  407276:	68a3      	ldr	r3, [r4, #8]
  407278:	3b01      	subs	r3, #1
  40727a:	2b00      	cmp	r3, #0
  40727c:	60a3      	str	r3, [r4, #8]
  40727e:	daf0      	bge.n	407262 <__fputwc+0x36>
  407280:	69a7      	ldr	r7, [r4, #24]
  407282:	42bb      	cmp	r3, r7
  407284:	4671      	mov	r1, lr
  407286:	4622      	mov	r2, r4
  407288:	4640      	mov	r0, r8
  40728a:	db02      	blt.n	407292 <__fputwc+0x66>
  40728c:	f1be 0f0a 	cmp.w	lr, #10
  407290:	d1e7      	bne.n	407262 <__fputwc+0x36>
  407292:	f001 f941 	bl	408518 <__swbuf_r>
  407296:	1c43      	adds	r3, r0, #1
  407298:	d1e8      	bne.n	40726c <__fputwc+0x40>
  40729a:	b002      	add	sp, #8
  40729c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4072a0:	89a3      	ldrh	r3, [r4, #12]
  4072a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4072a6:	81a3      	strh	r3, [r4, #12]
  4072a8:	b002      	add	sp, #8
  4072aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4072ae:	f109 33ff 	add.w	r3, r9, #4294967295
  4072b2:	2bfe      	cmp	r3, #254	; 0xfe
  4072b4:	d8c4      	bhi.n	407240 <__fputwc+0x14>
  4072b6:	fa5f fe89 	uxtb.w	lr, r9
  4072ba:	4606      	mov	r6, r0
  4072bc:	f88d e004 	strb.w	lr, [sp, #4]
  4072c0:	e7cb      	b.n	40725a <__fputwc+0x2e>
  4072c2:	4648      	mov	r0, r9
  4072c4:	b002      	add	sp, #8
  4072c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4072ca:	bf00      	nop

004072cc <_fputwc_r>:
  4072cc:	b530      	push	{r4, r5, lr}
  4072ce:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4072d0:	f013 0f01 	tst.w	r3, #1
  4072d4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4072d8:	4614      	mov	r4, r2
  4072da:	b083      	sub	sp, #12
  4072dc:	4605      	mov	r5, r0
  4072de:	b29a      	uxth	r2, r3
  4072e0:	d101      	bne.n	4072e6 <_fputwc_r+0x1a>
  4072e2:	0590      	lsls	r0, r2, #22
  4072e4:	d51c      	bpl.n	407320 <_fputwc_r+0x54>
  4072e6:	0490      	lsls	r0, r2, #18
  4072e8:	d406      	bmi.n	4072f8 <_fputwc_r+0x2c>
  4072ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4072ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4072f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4072f4:	81a3      	strh	r3, [r4, #12]
  4072f6:	6662      	str	r2, [r4, #100]	; 0x64
  4072f8:	4628      	mov	r0, r5
  4072fa:	4622      	mov	r2, r4
  4072fc:	f7ff ff96 	bl	40722c <__fputwc>
  407300:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407302:	07da      	lsls	r2, r3, #31
  407304:	4605      	mov	r5, r0
  407306:	d402      	bmi.n	40730e <_fputwc_r+0x42>
  407308:	89a3      	ldrh	r3, [r4, #12]
  40730a:	059b      	lsls	r3, r3, #22
  40730c:	d502      	bpl.n	407314 <_fputwc_r+0x48>
  40730e:	4628      	mov	r0, r5
  407310:	b003      	add	sp, #12
  407312:	bd30      	pop	{r4, r5, pc}
  407314:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407316:	f000 faf9 	bl	40790c <__retarget_lock_release_recursive>
  40731a:	4628      	mov	r0, r5
  40731c:	b003      	add	sp, #12
  40731e:	bd30      	pop	{r4, r5, pc}
  407320:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407322:	9101      	str	r1, [sp, #4]
  407324:	f000 faf0 	bl	407908 <__retarget_lock_acquire_recursive>
  407328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40732c:	9901      	ldr	r1, [sp, #4]
  40732e:	b29a      	uxth	r2, r3
  407330:	e7d9      	b.n	4072e6 <_fputwc_r+0x1a>
  407332:	bf00      	nop

00407334 <_malloc_trim_r>:
  407334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407336:	4f24      	ldr	r7, [pc, #144]	; (4073c8 <_malloc_trim_r+0x94>)
  407338:	460c      	mov	r4, r1
  40733a:	4606      	mov	r6, r0
  40733c:	f000 fee4 	bl	408108 <__malloc_lock>
  407340:	68bb      	ldr	r3, [r7, #8]
  407342:	685d      	ldr	r5, [r3, #4]
  407344:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  407348:	310f      	adds	r1, #15
  40734a:	f025 0503 	bic.w	r5, r5, #3
  40734e:	4429      	add	r1, r5
  407350:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407354:	f021 010f 	bic.w	r1, r1, #15
  407358:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40735c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  407360:	db07      	blt.n	407372 <_malloc_trim_r+0x3e>
  407362:	2100      	movs	r1, #0
  407364:	4630      	mov	r0, r6
  407366:	f001 f881 	bl	40846c <_sbrk_r>
  40736a:	68bb      	ldr	r3, [r7, #8]
  40736c:	442b      	add	r3, r5
  40736e:	4298      	cmp	r0, r3
  407370:	d004      	beq.n	40737c <_malloc_trim_r+0x48>
  407372:	4630      	mov	r0, r6
  407374:	f000 fece 	bl	408114 <__malloc_unlock>
  407378:	2000      	movs	r0, #0
  40737a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40737c:	4261      	negs	r1, r4
  40737e:	4630      	mov	r0, r6
  407380:	f001 f874 	bl	40846c <_sbrk_r>
  407384:	3001      	adds	r0, #1
  407386:	d00d      	beq.n	4073a4 <_malloc_trim_r+0x70>
  407388:	4b10      	ldr	r3, [pc, #64]	; (4073cc <_malloc_trim_r+0x98>)
  40738a:	68ba      	ldr	r2, [r7, #8]
  40738c:	6819      	ldr	r1, [r3, #0]
  40738e:	1b2d      	subs	r5, r5, r4
  407390:	f045 0501 	orr.w	r5, r5, #1
  407394:	4630      	mov	r0, r6
  407396:	1b09      	subs	r1, r1, r4
  407398:	6055      	str	r5, [r2, #4]
  40739a:	6019      	str	r1, [r3, #0]
  40739c:	f000 feba 	bl	408114 <__malloc_unlock>
  4073a0:	2001      	movs	r0, #1
  4073a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4073a4:	2100      	movs	r1, #0
  4073a6:	4630      	mov	r0, r6
  4073a8:	f001 f860 	bl	40846c <_sbrk_r>
  4073ac:	68ba      	ldr	r2, [r7, #8]
  4073ae:	1a83      	subs	r3, r0, r2
  4073b0:	2b0f      	cmp	r3, #15
  4073b2:	ddde      	ble.n	407372 <_malloc_trim_r+0x3e>
  4073b4:	4c06      	ldr	r4, [pc, #24]	; (4073d0 <_malloc_trim_r+0x9c>)
  4073b6:	4905      	ldr	r1, [pc, #20]	; (4073cc <_malloc_trim_r+0x98>)
  4073b8:	6824      	ldr	r4, [r4, #0]
  4073ba:	f043 0301 	orr.w	r3, r3, #1
  4073be:	1b00      	subs	r0, r0, r4
  4073c0:	6053      	str	r3, [r2, #4]
  4073c2:	6008      	str	r0, [r1, #0]
  4073c4:	e7d5      	b.n	407372 <_malloc_trim_r+0x3e>
  4073c6:	bf00      	nop
  4073c8:	204005c0 	.word	0x204005c0
  4073cc:	2040c960 	.word	0x2040c960
  4073d0:	204009c8 	.word	0x204009c8

004073d4 <_free_r>:
  4073d4:	2900      	cmp	r1, #0
  4073d6:	d044      	beq.n	407462 <_free_r+0x8e>
  4073d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4073dc:	460d      	mov	r5, r1
  4073de:	4680      	mov	r8, r0
  4073e0:	f000 fe92 	bl	408108 <__malloc_lock>
  4073e4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4073e8:	4969      	ldr	r1, [pc, #420]	; (407590 <_free_r+0x1bc>)
  4073ea:	f027 0301 	bic.w	r3, r7, #1
  4073ee:	f1a5 0408 	sub.w	r4, r5, #8
  4073f2:	18e2      	adds	r2, r4, r3
  4073f4:	688e      	ldr	r6, [r1, #8]
  4073f6:	6850      	ldr	r0, [r2, #4]
  4073f8:	42b2      	cmp	r2, r6
  4073fa:	f020 0003 	bic.w	r0, r0, #3
  4073fe:	d05e      	beq.n	4074be <_free_r+0xea>
  407400:	07fe      	lsls	r6, r7, #31
  407402:	6050      	str	r0, [r2, #4]
  407404:	d40b      	bmi.n	40741e <_free_r+0x4a>
  407406:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40740a:	1be4      	subs	r4, r4, r7
  40740c:	f101 0e08 	add.w	lr, r1, #8
  407410:	68a5      	ldr	r5, [r4, #8]
  407412:	4575      	cmp	r5, lr
  407414:	443b      	add	r3, r7
  407416:	d06d      	beq.n	4074f4 <_free_r+0x120>
  407418:	68e7      	ldr	r7, [r4, #12]
  40741a:	60ef      	str	r7, [r5, #12]
  40741c:	60bd      	str	r5, [r7, #8]
  40741e:	1815      	adds	r5, r2, r0
  407420:	686d      	ldr	r5, [r5, #4]
  407422:	07ed      	lsls	r5, r5, #31
  407424:	d53e      	bpl.n	4074a4 <_free_r+0xd0>
  407426:	f043 0201 	orr.w	r2, r3, #1
  40742a:	6062      	str	r2, [r4, #4]
  40742c:	50e3      	str	r3, [r4, r3]
  40742e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407432:	d217      	bcs.n	407464 <_free_r+0x90>
  407434:	08db      	lsrs	r3, r3, #3
  407436:	1c58      	adds	r0, r3, #1
  407438:	109a      	asrs	r2, r3, #2
  40743a:	684d      	ldr	r5, [r1, #4]
  40743c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  407440:	60a7      	str	r7, [r4, #8]
  407442:	2301      	movs	r3, #1
  407444:	4093      	lsls	r3, r2
  407446:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40744a:	432b      	orrs	r3, r5
  40744c:	3a08      	subs	r2, #8
  40744e:	60e2      	str	r2, [r4, #12]
  407450:	604b      	str	r3, [r1, #4]
  407452:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  407456:	60fc      	str	r4, [r7, #12]
  407458:	4640      	mov	r0, r8
  40745a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40745e:	f000 be59 	b.w	408114 <__malloc_unlock>
  407462:	4770      	bx	lr
  407464:	0a5a      	lsrs	r2, r3, #9
  407466:	2a04      	cmp	r2, #4
  407468:	d852      	bhi.n	407510 <_free_r+0x13c>
  40746a:	099a      	lsrs	r2, r3, #6
  40746c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  407470:	00ff      	lsls	r7, r7, #3
  407472:	f102 0538 	add.w	r5, r2, #56	; 0x38
  407476:	19c8      	adds	r0, r1, r7
  407478:	59ca      	ldr	r2, [r1, r7]
  40747a:	3808      	subs	r0, #8
  40747c:	4290      	cmp	r0, r2
  40747e:	d04f      	beq.n	407520 <_free_r+0x14c>
  407480:	6851      	ldr	r1, [r2, #4]
  407482:	f021 0103 	bic.w	r1, r1, #3
  407486:	428b      	cmp	r3, r1
  407488:	d232      	bcs.n	4074f0 <_free_r+0x11c>
  40748a:	6892      	ldr	r2, [r2, #8]
  40748c:	4290      	cmp	r0, r2
  40748e:	d1f7      	bne.n	407480 <_free_r+0xac>
  407490:	68c3      	ldr	r3, [r0, #12]
  407492:	60a0      	str	r0, [r4, #8]
  407494:	60e3      	str	r3, [r4, #12]
  407496:	609c      	str	r4, [r3, #8]
  407498:	60c4      	str	r4, [r0, #12]
  40749a:	4640      	mov	r0, r8
  40749c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4074a0:	f000 be38 	b.w	408114 <__malloc_unlock>
  4074a4:	6895      	ldr	r5, [r2, #8]
  4074a6:	4f3b      	ldr	r7, [pc, #236]	; (407594 <_free_r+0x1c0>)
  4074a8:	42bd      	cmp	r5, r7
  4074aa:	4403      	add	r3, r0
  4074ac:	d040      	beq.n	407530 <_free_r+0x15c>
  4074ae:	68d0      	ldr	r0, [r2, #12]
  4074b0:	60e8      	str	r0, [r5, #12]
  4074b2:	f043 0201 	orr.w	r2, r3, #1
  4074b6:	6085      	str	r5, [r0, #8]
  4074b8:	6062      	str	r2, [r4, #4]
  4074ba:	50e3      	str	r3, [r4, r3]
  4074bc:	e7b7      	b.n	40742e <_free_r+0x5a>
  4074be:	07ff      	lsls	r7, r7, #31
  4074c0:	4403      	add	r3, r0
  4074c2:	d407      	bmi.n	4074d4 <_free_r+0x100>
  4074c4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4074c8:	1aa4      	subs	r4, r4, r2
  4074ca:	4413      	add	r3, r2
  4074cc:	68a0      	ldr	r0, [r4, #8]
  4074ce:	68e2      	ldr	r2, [r4, #12]
  4074d0:	60c2      	str	r2, [r0, #12]
  4074d2:	6090      	str	r0, [r2, #8]
  4074d4:	4a30      	ldr	r2, [pc, #192]	; (407598 <_free_r+0x1c4>)
  4074d6:	6812      	ldr	r2, [r2, #0]
  4074d8:	f043 0001 	orr.w	r0, r3, #1
  4074dc:	4293      	cmp	r3, r2
  4074de:	6060      	str	r0, [r4, #4]
  4074e0:	608c      	str	r4, [r1, #8]
  4074e2:	d3b9      	bcc.n	407458 <_free_r+0x84>
  4074e4:	4b2d      	ldr	r3, [pc, #180]	; (40759c <_free_r+0x1c8>)
  4074e6:	4640      	mov	r0, r8
  4074e8:	6819      	ldr	r1, [r3, #0]
  4074ea:	f7ff ff23 	bl	407334 <_malloc_trim_r>
  4074ee:	e7b3      	b.n	407458 <_free_r+0x84>
  4074f0:	4610      	mov	r0, r2
  4074f2:	e7cd      	b.n	407490 <_free_r+0xbc>
  4074f4:	1811      	adds	r1, r2, r0
  4074f6:	6849      	ldr	r1, [r1, #4]
  4074f8:	07c9      	lsls	r1, r1, #31
  4074fa:	d444      	bmi.n	407586 <_free_r+0x1b2>
  4074fc:	6891      	ldr	r1, [r2, #8]
  4074fe:	68d2      	ldr	r2, [r2, #12]
  407500:	60ca      	str	r2, [r1, #12]
  407502:	4403      	add	r3, r0
  407504:	f043 0001 	orr.w	r0, r3, #1
  407508:	6091      	str	r1, [r2, #8]
  40750a:	6060      	str	r0, [r4, #4]
  40750c:	50e3      	str	r3, [r4, r3]
  40750e:	e7a3      	b.n	407458 <_free_r+0x84>
  407510:	2a14      	cmp	r2, #20
  407512:	d816      	bhi.n	407542 <_free_r+0x16e>
  407514:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  407518:	00ff      	lsls	r7, r7, #3
  40751a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40751e:	e7aa      	b.n	407476 <_free_r+0xa2>
  407520:	10aa      	asrs	r2, r5, #2
  407522:	2301      	movs	r3, #1
  407524:	684d      	ldr	r5, [r1, #4]
  407526:	4093      	lsls	r3, r2
  407528:	432b      	orrs	r3, r5
  40752a:	604b      	str	r3, [r1, #4]
  40752c:	4603      	mov	r3, r0
  40752e:	e7b0      	b.n	407492 <_free_r+0xbe>
  407530:	f043 0201 	orr.w	r2, r3, #1
  407534:	614c      	str	r4, [r1, #20]
  407536:	610c      	str	r4, [r1, #16]
  407538:	60e5      	str	r5, [r4, #12]
  40753a:	60a5      	str	r5, [r4, #8]
  40753c:	6062      	str	r2, [r4, #4]
  40753e:	50e3      	str	r3, [r4, r3]
  407540:	e78a      	b.n	407458 <_free_r+0x84>
  407542:	2a54      	cmp	r2, #84	; 0x54
  407544:	d806      	bhi.n	407554 <_free_r+0x180>
  407546:	0b1a      	lsrs	r2, r3, #12
  407548:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40754c:	00ff      	lsls	r7, r7, #3
  40754e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  407552:	e790      	b.n	407476 <_free_r+0xa2>
  407554:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407558:	d806      	bhi.n	407568 <_free_r+0x194>
  40755a:	0bda      	lsrs	r2, r3, #15
  40755c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  407560:	00ff      	lsls	r7, r7, #3
  407562:	f102 0577 	add.w	r5, r2, #119	; 0x77
  407566:	e786      	b.n	407476 <_free_r+0xa2>
  407568:	f240 5054 	movw	r0, #1364	; 0x554
  40756c:	4282      	cmp	r2, r0
  40756e:	d806      	bhi.n	40757e <_free_r+0x1aa>
  407570:	0c9a      	lsrs	r2, r3, #18
  407572:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  407576:	00ff      	lsls	r7, r7, #3
  407578:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40757c:	e77b      	b.n	407476 <_free_r+0xa2>
  40757e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  407582:	257e      	movs	r5, #126	; 0x7e
  407584:	e777      	b.n	407476 <_free_r+0xa2>
  407586:	f043 0101 	orr.w	r1, r3, #1
  40758a:	6061      	str	r1, [r4, #4]
  40758c:	6013      	str	r3, [r2, #0]
  40758e:	e763      	b.n	407458 <_free_r+0x84>
  407590:	204005c0 	.word	0x204005c0
  407594:	204005c8 	.word	0x204005c8
  407598:	204009cc 	.word	0x204009cc
  40759c:	2040c990 	.word	0x2040c990

004075a0 <__sfvwrite_r>:
  4075a0:	6893      	ldr	r3, [r2, #8]
  4075a2:	2b00      	cmp	r3, #0
  4075a4:	d073      	beq.n	40768e <__sfvwrite_r+0xee>
  4075a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4075aa:	898b      	ldrh	r3, [r1, #12]
  4075ac:	b083      	sub	sp, #12
  4075ae:	460c      	mov	r4, r1
  4075b0:	0719      	lsls	r1, r3, #28
  4075b2:	9000      	str	r0, [sp, #0]
  4075b4:	4616      	mov	r6, r2
  4075b6:	d526      	bpl.n	407606 <__sfvwrite_r+0x66>
  4075b8:	6922      	ldr	r2, [r4, #16]
  4075ba:	b322      	cbz	r2, 407606 <__sfvwrite_r+0x66>
  4075bc:	f013 0002 	ands.w	r0, r3, #2
  4075c0:	6835      	ldr	r5, [r6, #0]
  4075c2:	d02c      	beq.n	40761e <__sfvwrite_r+0x7e>
  4075c4:	f04f 0900 	mov.w	r9, #0
  4075c8:	4fb0      	ldr	r7, [pc, #704]	; (40788c <__sfvwrite_r+0x2ec>)
  4075ca:	46c8      	mov	r8, r9
  4075cc:	46b2      	mov	sl, r6
  4075ce:	45b8      	cmp	r8, r7
  4075d0:	4643      	mov	r3, r8
  4075d2:	464a      	mov	r2, r9
  4075d4:	bf28      	it	cs
  4075d6:	463b      	movcs	r3, r7
  4075d8:	9800      	ldr	r0, [sp, #0]
  4075da:	f1b8 0f00 	cmp.w	r8, #0
  4075de:	d050      	beq.n	407682 <__sfvwrite_r+0xe2>
  4075e0:	69e1      	ldr	r1, [r4, #28]
  4075e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4075e4:	47b0      	blx	r6
  4075e6:	2800      	cmp	r0, #0
  4075e8:	dd58      	ble.n	40769c <__sfvwrite_r+0xfc>
  4075ea:	f8da 3008 	ldr.w	r3, [sl, #8]
  4075ee:	1a1b      	subs	r3, r3, r0
  4075f0:	4481      	add	r9, r0
  4075f2:	eba8 0800 	sub.w	r8, r8, r0
  4075f6:	f8ca 3008 	str.w	r3, [sl, #8]
  4075fa:	2b00      	cmp	r3, #0
  4075fc:	d1e7      	bne.n	4075ce <__sfvwrite_r+0x2e>
  4075fe:	2000      	movs	r0, #0
  407600:	b003      	add	sp, #12
  407602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407606:	4621      	mov	r1, r4
  407608:	9800      	ldr	r0, [sp, #0]
  40760a:	f7ff fc51 	bl	406eb0 <__swsetup_r>
  40760e:	2800      	cmp	r0, #0
  407610:	f040 8133 	bne.w	40787a <__sfvwrite_r+0x2da>
  407614:	89a3      	ldrh	r3, [r4, #12]
  407616:	6835      	ldr	r5, [r6, #0]
  407618:	f013 0002 	ands.w	r0, r3, #2
  40761c:	d1d2      	bne.n	4075c4 <__sfvwrite_r+0x24>
  40761e:	f013 0901 	ands.w	r9, r3, #1
  407622:	d145      	bne.n	4076b0 <__sfvwrite_r+0x110>
  407624:	464f      	mov	r7, r9
  407626:	9601      	str	r6, [sp, #4]
  407628:	b337      	cbz	r7, 407678 <__sfvwrite_r+0xd8>
  40762a:	059a      	lsls	r2, r3, #22
  40762c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  407630:	f140 8083 	bpl.w	40773a <__sfvwrite_r+0x19a>
  407634:	4547      	cmp	r7, r8
  407636:	46c3      	mov	fp, r8
  407638:	f0c0 80ab 	bcc.w	407792 <__sfvwrite_r+0x1f2>
  40763c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  407640:	f040 80ac 	bne.w	40779c <__sfvwrite_r+0x1fc>
  407644:	6820      	ldr	r0, [r4, #0]
  407646:	46ba      	mov	sl, r7
  407648:	465a      	mov	r2, fp
  40764a:	4649      	mov	r1, r9
  40764c:	f000 fcf8 	bl	408040 <memmove>
  407650:	68a2      	ldr	r2, [r4, #8]
  407652:	6823      	ldr	r3, [r4, #0]
  407654:	eba2 0208 	sub.w	r2, r2, r8
  407658:	445b      	add	r3, fp
  40765a:	60a2      	str	r2, [r4, #8]
  40765c:	6023      	str	r3, [r4, #0]
  40765e:	9a01      	ldr	r2, [sp, #4]
  407660:	6893      	ldr	r3, [r2, #8]
  407662:	eba3 030a 	sub.w	r3, r3, sl
  407666:	44d1      	add	r9, sl
  407668:	eba7 070a 	sub.w	r7, r7, sl
  40766c:	6093      	str	r3, [r2, #8]
  40766e:	2b00      	cmp	r3, #0
  407670:	d0c5      	beq.n	4075fe <__sfvwrite_r+0x5e>
  407672:	89a3      	ldrh	r3, [r4, #12]
  407674:	2f00      	cmp	r7, #0
  407676:	d1d8      	bne.n	40762a <__sfvwrite_r+0x8a>
  407678:	f8d5 9000 	ldr.w	r9, [r5]
  40767c:	686f      	ldr	r7, [r5, #4]
  40767e:	3508      	adds	r5, #8
  407680:	e7d2      	b.n	407628 <__sfvwrite_r+0x88>
  407682:	f8d5 9000 	ldr.w	r9, [r5]
  407686:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40768a:	3508      	adds	r5, #8
  40768c:	e79f      	b.n	4075ce <__sfvwrite_r+0x2e>
  40768e:	2000      	movs	r0, #0
  407690:	4770      	bx	lr
  407692:	4621      	mov	r1, r4
  407694:	9800      	ldr	r0, [sp, #0]
  407696:	f7ff fd1f 	bl	4070d8 <_fflush_r>
  40769a:	b370      	cbz	r0, 4076fa <__sfvwrite_r+0x15a>
  40769c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4076a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4076a4:	f04f 30ff 	mov.w	r0, #4294967295
  4076a8:	81a3      	strh	r3, [r4, #12]
  4076aa:	b003      	add	sp, #12
  4076ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4076b0:	4681      	mov	r9, r0
  4076b2:	4633      	mov	r3, r6
  4076b4:	464e      	mov	r6, r9
  4076b6:	46a8      	mov	r8, r5
  4076b8:	469a      	mov	sl, r3
  4076ba:	464d      	mov	r5, r9
  4076bc:	b34e      	cbz	r6, 407712 <__sfvwrite_r+0x172>
  4076be:	b380      	cbz	r0, 407722 <__sfvwrite_r+0x182>
  4076c0:	6820      	ldr	r0, [r4, #0]
  4076c2:	6923      	ldr	r3, [r4, #16]
  4076c4:	6962      	ldr	r2, [r4, #20]
  4076c6:	45b1      	cmp	r9, r6
  4076c8:	46cb      	mov	fp, r9
  4076ca:	bf28      	it	cs
  4076cc:	46b3      	movcs	fp, r6
  4076ce:	4298      	cmp	r0, r3
  4076d0:	465f      	mov	r7, fp
  4076d2:	d904      	bls.n	4076de <__sfvwrite_r+0x13e>
  4076d4:	68a3      	ldr	r3, [r4, #8]
  4076d6:	4413      	add	r3, r2
  4076d8:	459b      	cmp	fp, r3
  4076da:	f300 80a6 	bgt.w	40782a <__sfvwrite_r+0x28a>
  4076de:	4593      	cmp	fp, r2
  4076e0:	db4b      	blt.n	40777a <__sfvwrite_r+0x1da>
  4076e2:	4613      	mov	r3, r2
  4076e4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4076e6:	69e1      	ldr	r1, [r4, #28]
  4076e8:	9800      	ldr	r0, [sp, #0]
  4076ea:	462a      	mov	r2, r5
  4076ec:	47b8      	blx	r7
  4076ee:	1e07      	subs	r7, r0, #0
  4076f0:	ddd4      	ble.n	40769c <__sfvwrite_r+0xfc>
  4076f2:	ebb9 0907 	subs.w	r9, r9, r7
  4076f6:	d0cc      	beq.n	407692 <__sfvwrite_r+0xf2>
  4076f8:	2001      	movs	r0, #1
  4076fa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4076fe:	1bdb      	subs	r3, r3, r7
  407700:	443d      	add	r5, r7
  407702:	1bf6      	subs	r6, r6, r7
  407704:	f8ca 3008 	str.w	r3, [sl, #8]
  407708:	2b00      	cmp	r3, #0
  40770a:	f43f af78 	beq.w	4075fe <__sfvwrite_r+0x5e>
  40770e:	2e00      	cmp	r6, #0
  407710:	d1d5      	bne.n	4076be <__sfvwrite_r+0x11e>
  407712:	f108 0308 	add.w	r3, r8, #8
  407716:	e913 0060 	ldmdb	r3, {r5, r6}
  40771a:	4698      	mov	r8, r3
  40771c:	3308      	adds	r3, #8
  40771e:	2e00      	cmp	r6, #0
  407720:	d0f9      	beq.n	407716 <__sfvwrite_r+0x176>
  407722:	4632      	mov	r2, r6
  407724:	210a      	movs	r1, #10
  407726:	4628      	mov	r0, r5
  407728:	f000 fc3a 	bl	407fa0 <memchr>
  40772c:	2800      	cmp	r0, #0
  40772e:	f000 80a1 	beq.w	407874 <__sfvwrite_r+0x2d4>
  407732:	3001      	adds	r0, #1
  407734:	eba0 0905 	sub.w	r9, r0, r5
  407738:	e7c2      	b.n	4076c0 <__sfvwrite_r+0x120>
  40773a:	6820      	ldr	r0, [r4, #0]
  40773c:	6923      	ldr	r3, [r4, #16]
  40773e:	4298      	cmp	r0, r3
  407740:	d802      	bhi.n	407748 <__sfvwrite_r+0x1a8>
  407742:	6963      	ldr	r3, [r4, #20]
  407744:	429f      	cmp	r7, r3
  407746:	d25d      	bcs.n	407804 <__sfvwrite_r+0x264>
  407748:	45b8      	cmp	r8, r7
  40774a:	bf28      	it	cs
  40774c:	46b8      	movcs	r8, r7
  40774e:	4642      	mov	r2, r8
  407750:	4649      	mov	r1, r9
  407752:	f000 fc75 	bl	408040 <memmove>
  407756:	68a3      	ldr	r3, [r4, #8]
  407758:	6822      	ldr	r2, [r4, #0]
  40775a:	eba3 0308 	sub.w	r3, r3, r8
  40775e:	4442      	add	r2, r8
  407760:	60a3      	str	r3, [r4, #8]
  407762:	6022      	str	r2, [r4, #0]
  407764:	b10b      	cbz	r3, 40776a <__sfvwrite_r+0x1ca>
  407766:	46c2      	mov	sl, r8
  407768:	e779      	b.n	40765e <__sfvwrite_r+0xbe>
  40776a:	4621      	mov	r1, r4
  40776c:	9800      	ldr	r0, [sp, #0]
  40776e:	f7ff fcb3 	bl	4070d8 <_fflush_r>
  407772:	2800      	cmp	r0, #0
  407774:	d192      	bne.n	40769c <__sfvwrite_r+0xfc>
  407776:	46c2      	mov	sl, r8
  407778:	e771      	b.n	40765e <__sfvwrite_r+0xbe>
  40777a:	465a      	mov	r2, fp
  40777c:	4629      	mov	r1, r5
  40777e:	f000 fc5f 	bl	408040 <memmove>
  407782:	68a2      	ldr	r2, [r4, #8]
  407784:	6823      	ldr	r3, [r4, #0]
  407786:	eba2 020b 	sub.w	r2, r2, fp
  40778a:	445b      	add	r3, fp
  40778c:	60a2      	str	r2, [r4, #8]
  40778e:	6023      	str	r3, [r4, #0]
  407790:	e7af      	b.n	4076f2 <__sfvwrite_r+0x152>
  407792:	6820      	ldr	r0, [r4, #0]
  407794:	46b8      	mov	r8, r7
  407796:	46ba      	mov	sl, r7
  407798:	46bb      	mov	fp, r7
  40779a:	e755      	b.n	407648 <__sfvwrite_r+0xa8>
  40779c:	6962      	ldr	r2, [r4, #20]
  40779e:	6820      	ldr	r0, [r4, #0]
  4077a0:	6921      	ldr	r1, [r4, #16]
  4077a2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4077a6:	eba0 0a01 	sub.w	sl, r0, r1
  4077aa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4077ae:	f10a 0001 	add.w	r0, sl, #1
  4077b2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4077b6:	4438      	add	r0, r7
  4077b8:	4540      	cmp	r0, r8
  4077ba:	4642      	mov	r2, r8
  4077bc:	bf84      	itt	hi
  4077be:	4680      	movhi	r8, r0
  4077c0:	4642      	movhi	r2, r8
  4077c2:	055b      	lsls	r3, r3, #21
  4077c4:	d544      	bpl.n	407850 <__sfvwrite_r+0x2b0>
  4077c6:	4611      	mov	r1, r2
  4077c8:	9800      	ldr	r0, [sp, #0]
  4077ca:	f000 f921 	bl	407a10 <_malloc_r>
  4077ce:	4683      	mov	fp, r0
  4077d0:	2800      	cmp	r0, #0
  4077d2:	d055      	beq.n	407880 <__sfvwrite_r+0x2e0>
  4077d4:	4652      	mov	r2, sl
  4077d6:	6921      	ldr	r1, [r4, #16]
  4077d8:	f7fe fa62 	bl	405ca0 <memcpy>
  4077dc:	89a3      	ldrh	r3, [r4, #12]
  4077de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4077e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4077e6:	81a3      	strh	r3, [r4, #12]
  4077e8:	eb0b 000a 	add.w	r0, fp, sl
  4077ec:	eba8 030a 	sub.w	r3, r8, sl
  4077f0:	f8c4 b010 	str.w	fp, [r4, #16]
  4077f4:	f8c4 8014 	str.w	r8, [r4, #20]
  4077f8:	6020      	str	r0, [r4, #0]
  4077fa:	60a3      	str	r3, [r4, #8]
  4077fc:	46b8      	mov	r8, r7
  4077fe:	46ba      	mov	sl, r7
  407800:	46bb      	mov	fp, r7
  407802:	e721      	b.n	407648 <__sfvwrite_r+0xa8>
  407804:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  407808:	42b9      	cmp	r1, r7
  40780a:	bf28      	it	cs
  40780c:	4639      	movcs	r1, r7
  40780e:	464a      	mov	r2, r9
  407810:	fb91 f1f3 	sdiv	r1, r1, r3
  407814:	9800      	ldr	r0, [sp, #0]
  407816:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407818:	fb03 f301 	mul.w	r3, r3, r1
  40781c:	69e1      	ldr	r1, [r4, #28]
  40781e:	47b0      	blx	r6
  407820:	f1b0 0a00 	subs.w	sl, r0, #0
  407824:	f73f af1b 	bgt.w	40765e <__sfvwrite_r+0xbe>
  407828:	e738      	b.n	40769c <__sfvwrite_r+0xfc>
  40782a:	461a      	mov	r2, r3
  40782c:	4629      	mov	r1, r5
  40782e:	9301      	str	r3, [sp, #4]
  407830:	f000 fc06 	bl	408040 <memmove>
  407834:	6822      	ldr	r2, [r4, #0]
  407836:	9b01      	ldr	r3, [sp, #4]
  407838:	9800      	ldr	r0, [sp, #0]
  40783a:	441a      	add	r2, r3
  40783c:	6022      	str	r2, [r4, #0]
  40783e:	4621      	mov	r1, r4
  407840:	f7ff fc4a 	bl	4070d8 <_fflush_r>
  407844:	9b01      	ldr	r3, [sp, #4]
  407846:	2800      	cmp	r0, #0
  407848:	f47f af28 	bne.w	40769c <__sfvwrite_r+0xfc>
  40784c:	461f      	mov	r7, r3
  40784e:	e750      	b.n	4076f2 <__sfvwrite_r+0x152>
  407850:	9800      	ldr	r0, [sp, #0]
  407852:	f000 fc65 	bl	408120 <_realloc_r>
  407856:	4683      	mov	fp, r0
  407858:	2800      	cmp	r0, #0
  40785a:	d1c5      	bne.n	4077e8 <__sfvwrite_r+0x248>
  40785c:	9d00      	ldr	r5, [sp, #0]
  40785e:	6921      	ldr	r1, [r4, #16]
  407860:	4628      	mov	r0, r5
  407862:	f7ff fdb7 	bl	4073d4 <_free_r>
  407866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40786a:	220c      	movs	r2, #12
  40786c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  407870:	602a      	str	r2, [r5, #0]
  407872:	e715      	b.n	4076a0 <__sfvwrite_r+0x100>
  407874:	f106 0901 	add.w	r9, r6, #1
  407878:	e722      	b.n	4076c0 <__sfvwrite_r+0x120>
  40787a:	f04f 30ff 	mov.w	r0, #4294967295
  40787e:	e6bf      	b.n	407600 <__sfvwrite_r+0x60>
  407880:	9a00      	ldr	r2, [sp, #0]
  407882:	230c      	movs	r3, #12
  407884:	6013      	str	r3, [r2, #0]
  407886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40788a:	e709      	b.n	4076a0 <__sfvwrite_r+0x100>
  40788c:	7ffffc00 	.word	0x7ffffc00

00407890 <_fwalk_reent>:
  407890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407894:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  407898:	d01f      	beq.n	4078da <_fwalk_reent+0x4a>
  40789a:	4688      	mov	r8, r1
  40789c:	4606      	mov	r6, r0
  40789e:	f04f 0900 	mov.w	r9, #0
  4078a2:	687d      	ldr	r5, [r7, #4]
  4078a4:	68bc      	ldr	r4, [r7, #8]
  4078a6:	3d01      	subs	r5, #1
  4078a8:	d411      	bmi.n	4078ce <_fwalk_reent+0x3e>
  4078aa:	89a3      	ldrh	r3, [r4, #12]
  4078ac:	2b01      	cmp	r3, #1
  4078ae:	f105 35ff 	add.w	r5, r5, #4294967295
  4078b2:	d908      	bls.n	4078c6 <_fwalk_reent+0x36>
  4078b4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4078b8:	3301      	adds	r3, #1
  4078ba:	4621      	mov	r1, r4
  4078bc:	4630      	mov	r0, r6
  4078be:	d002      	beq.n	4078c6 <_fwalk_reent+0x36>
  4078c0:	47c0      	blx	r8
  4078c2:	ea49 0900 	orr.w	r9, r9, r0
  4078c6:	1c6b      	adds	r3, r5, #1
  4078c8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4078cc:	d1ed      	bne.n	4078aa <_fwalk_reent+0x1a>
  4078ce:	683f      	ldr	r7, [r7, #0]
  4078d0:	2f00      	cmp	r7, #0
  4078d2:	d1e6      	bne.n	4078a2 <_fwalk_reent+0x12>
  4078d4:	4648      	mov	r0, r9
  4078d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4078da:	46b9      	mov	r9, r7
  4078dc:	4648      	mov	r0, r9
  4078de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4078e2:	bf00      	nop

004078e4 <__locale_mb_cur_max>:
  4078e4:	4b04      	ldr	r3, [pc, #16]	; (4078f8 <__locale_mb_cur_max+0x14>)
  4078e6:	4a05      	ldr	r2, [pc, #20]	; (4078fc <__locale_mb_cur_max+0x18>)
  4078e8:	681b      	ldr	r3, [r3, #0]
  4078ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4078ec:	2b00      	cmp	r3, #0
  4078ee:	bf08      	it	eq
  4078f0:	4613      	moveq	r3, r2
  4078f2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4078f6:	4770      	bx	lr
  4078f8:	20400024 	.word	0x20400024
  4078fc:	20400454 	.word	0x20400454

00407900 <__retarget_lock_init_recursive>:
  407900:	4770      	bx	lr
  407902:	bf00      	nop

00407904 <__retarget_lock_close_recursive>:
  407904:	4770      	bx	lr
  407906:	bf00      	nop

00407908 <__retarget_lock_acquire_recursive>:
  407908:	4770      	bx	lr
  40790a:	bf00      	nop

0040790c <__retarget_lock_release_recursive>:
  40790c:	4770      	bx	lr
  40790e:	bf00      	nop

00407910 <__swhatbuf_r>:
  407910:	b570      	push	{r4, r5, r6, lr}
  407912:	460c      	mov	r4, r1
  407914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407918:	2900      	cmp	r1, #0
  40791a:	b090      	sub	sp, #64	; 0x40
  40791c:	4615      	mov	r5, r2
  40791e:	461e      	mov	r6, r3
  407920:	db14      	blt.n	40794c <__swhatbuf_r+0x3c>
  407922:	aa01      	add	r2, sp, #4
  407924:	f000 ff74 	bl	408810 <_fstat_r>
  407928:	2800      	cmp	r0, #0
  40792a:	db0f      	blt.n	40794c <__swhatbuf_r+0x3c>
  40792c:	9a02      	ldr	r2, [sp, #8]
  40792e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  407932:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  407936:	fab2 f282 	clz	r2, r2
  40793a:	0952      	lsrs	r2, r2, #5
  40793c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407940:	f44f 6000 	mov.w	r0, #2048	; 0x800
  407944:	6032      	str	r2, [r6, #0]
  407946:	602b      	str	r3, [r5, #0]
  407948:	b010      	add	sp, #64	; 0x40
  40794a:	bd70      	pop	{r4, r5, r6, pc}
  40794c:	89a2      	ldrh	r2, [r4, #12]
  40794e:	2300      	movs	r3, #0
  407950:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  407954:	6033      	str	r3, [r6, #0]
  407956:	d004      	beq.n	407962 <__swhatbuf_r+0x52>
  407958:	2240      	movs	r2, #64	; 0x40
  40795a:	4618      	mov	r0, r3
  40795c:	602a      	str	r2, [r5, #0]
  40795e:	b010      	add	sp, #64	; 0x40
  407960:	bd70      	pop	{r4, r5, r6, pc}
  407962:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407966:	602b      	str	r3, [r5, #0]
  407968:	b010      	add	sp, #64	; 0x40
  40796a:	bd70      	pop	{r4, r5, r6, pc}

0040796c <__smakebuf_r>:
  40796c:	898a      	ldrh	r2, [r1, #12]
  40796e:	0792      	lsls	r2, r2, #30
  407970:	460b      	mov	r3, r1
  407972:	d506      	bpl.n	407982 <__smakebuf_r+0x16>
  407974:	f101 0243 	add.w	r2, r1, #67	; 0x43
  407978:	2101      	movs	r1, #1
  40797a:	601a      	str	r2, [r3, #0]
  40797c:	611a      	str	r2, [r3, #16]
  40797e:	6159      	str	r1, [r3, #20]
  407980:	4770      	bx	lr
  407982:	b5f0      	push	{r4, r5, r6, r7, lr}
  407984:	b083      	sub	sp, #12
  407986:	ab01      	add	r3, sp, #4
  407988:	466a      	mov	r2, sp
  40798a:	460c      	mov	r4, r1
  40798c:	4606      	mov	r6, r0
  40798e:	f7ff ffbf 	bl	407910 <__swhatbuf_r>
  407992:	9900      	ldr	r1, [sp, #0]
  407994:	4605      	mov	r5, r0
  407996:	4630      	mov	r0, r6
  407998:	f000 f83a 	bl	407a10 <_malloc_r>
  40799c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4079a0:	b1d8      	cbz	r0, 4079da <__smakebuf_r+0x6e>
  4079a2:	9a01      	ldr	r2, [sp, #4]
  4079a4:	4f15      	ldr	r7, [pc, #84]	; (4079fc <__smakebuf_r+0x90>)
  4079a6:	9900      	ldr	r1, [sp, #0]
  4079a8:	63f7      	str	r7, [r6, #60]	; 0x3c
  4079aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4079ae:	81a3      	strh	r3, [r4, #12]
  4079b0:	6020      	str	r0, [r4, #0]
  4079b2:	6120      	str	r0, [r4, #16]
  4079b4:	6161      	str	r1, [r4, #20]
  4079b6:	b91a      	cbnz	r2, 4079c0 <__smakebuf_r+0x54>
  4079b8:	432b      	orrs	r3, r5
  4079ba:	81a3      	strh	r3, [r4, #12]
  4079bc:	b003      	add	sp, #12
  4079be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4079c0:	4630      	mov	r0, r6
  4079c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4079c6:	f000 ff37 	bl	408838 <_isatty_r>
  4079ca:	b1a0      	cbz	r0, 4079f6 <__smakebuf_r+0x8a>
  4079cc:	89a3      	ldrh	r3, [r4, #12]
  4079ce:	f023 0303 	bic.w	r3, r3, #3
  4079d2:	f043 0301 	orr.w	r3, r3, #1
  4079d6:	b21b      	sxth	r3, r3
  4079d8:	e7ee      	b.n	4079b8 <__smakebuf_r+0x4c>
  4079da:	059a      	lsls	r2, r3, #22
  4079dc:	d4ee      	bmi.n	4079bc <__smakebuf_r+0x50>
  4079de:	f023 0303 	bic.w	r3, r3, #3
  4079e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4079e6:	f043 0302 	orr.w	r3, r3, #2
  4079ea:	2101      	movs	r1, #1
  4079ec:	81a3      	strh	r3, [r4, #12]
  4079ee:	6022      	str	r2, [r4, #0]
  4079f0:	6122      	str	r2, [r4, #16]
  4079f2:	6161      	str	r1, [r4, #20]
  4079f4:	e7e2      	b.n	4079bc <__smakebuf_r+0x50>
  4079f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4079fa:	e7dd      	b.n	4079b8 <__smakebuf_r+0x4c>
  4079fc:	0040712d 	.word	0x0040712d

00407a00 <malloc>:
  407a00:	4b02      	ldr	r3, [pc, #8]	; (407a0c <malloc+0xc>)
  407a02:	4601      	mov	r1, r0
  407a04:	6818      	ldr	r0, [r3, #0]
  407a06:	f000 b803 	b.w	407a10 <_malloc_r>
  407a0a:	bf00      	nop
  407a0c:	20400024 	.word	0x20400024

00407a10 <_malloc_r>:
  407a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407a14:	f101 060b 	add.w	r6, r1, #11
  407a18:	2e16      	cmp	r6, #22
  407a1a:	b083      	sub	sp, #12
  407a1c:	4605      	mov	r5, r0
  407a1e:	f240 809e 	bls.w	407b5e <_malloc_r+0x14e>
  407a22:	f036 0607 	bics.w	r6, r6, #7
  407a26:	f100 80bd 	bmi.w	407ba4 <_malloc_r+0x194>
  407a2a:	42b1      	cmp	r1, r6
  407a2c:	f200 80ba 	bhi.w	407ba4 <_malloc_r+0x194>
  407a30:	f000 fb6a 	bl	408108 <__malloc_lock>
  407a34:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  407a38:	f0c0 8293 	bcc.w	407f62 <_malloc_r+0x552>
  407a3c:	0a73      	lsrs	r3, r6, #9
  407a3e:	f000 80b8 	beq.w	407bb2 <_malloc_r+0x1a2>
  407a42:	2b04      	cmp	r3, #4
  407a44:	f200 8179 	bhi.w	407d3a <_malloc_r+0x32a>
  407a48:	09b3      	lsrs	r3, r6, #6
  407a4a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  407a4e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  407a52:	00c3      	lsls	r3, r0, #3
  407a54:	4fbf      	ldr	r7, [pc, #764]	; (407d54 <_malloc_r+0x344>)
  407a56:	443b      	add	r3, r7
  407a58:	f1a3 0108 	sub.w	r1, r3, #8
  407a5c:	685c      	ldr	r4, [r3, #4]
  407a5e:	42a1      	cmp	r1, r4
  407a60:	d106      	bne.n	407a70 <_malloc_r+0x60>
  407a62:	e00c      	b.n	407a7e <_malloc_r+0x6e>
  407a64:	2a00      	cmp	r2, #0
  407a66:	f280 80aa 	bge.w	407bbe <_malloc_r+0x1ae>
  407a6a:	68e4      	ldr	r4, [r4, #12]
  407a6c:	42a1      	cmp	r1, r4
  407a6e:	d006      	beq.n	407a7e <_malloc_r+0x6e>
  407a70:	6863      	ldr	r3, [r4, #4]
  407a72:	f023 0303 	bic.w	r3, r3, #3
  407a76:	1b9a      	subs	r2, r3, r6
  407a78:	2a0f      	cmp	r2, #15
  407a7a:	ddf3      	ble.n	407a64 <_malloc_r+0x54>
  407a7c:	4670      	mov	r0, lr
  407a7e:	693c      	ldr	r4, [r7, #16]
  407a80:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 407d68 <_malloc_r+0x358>
  407a84:	4574      	cmp	r4, lr
  407a86:	f000 81ab 	beq.w	407de0 <_malloc_r+0x3d0>
  407a8a:	6863      	ldr	r3, [r4, #4]
  407a8c:	f023 0303 	bic.w	r3, r3, #3
  407a90:	1b9a      	subs	r2, r3, r6
  407a92:	2a0f      	cmp	r2, #15
  407a94:	f300 8190 	bgt.w	407db8 <_malloc_r+0x3a8>
  407a98:	2a00      	cmp	r2, #0
  407a9a:	f8c7 e014 	str.w	lr, [r7, #20]
  407a9e:	f8c7 e010 	str.w	lr, [r7, #16]
  407aa2:	f280 809d 	bge.w	407be0 <_malloc_r+0x1d0>
  407aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407aaa:	f080 8161 	bcs.w	407d70 <_malloc_r+0x360>
  407aae:	08db      	lsrs	r3, r3, #3
  407ab0:	f103 0c01 	add.w	ip, r3, #1
  407ab4:	1099      	asrs	r1, r3, #2
  407ab6:	687a      	ldr	r2, [r7, #4]
  407ab8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  407abc:	f8c4 8008 	str.w	r8, [r4, #8]
  407ac0:	2301      	movs	r3, #1
  407ac2:	408b      	lsls	r3, r1
  407ac4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  407ac8:	4313      	orrs	r3, r2
  407aca:	3908      	subs	r1, #8
  407acc:	60e1      	str	r1, [r4, #12]
  407ace:	607b      	str	r3, [r7, #4]
  407ad0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  407ad4:	f8c8 400c 	str.w	r4, [r8, #12]
  407ad8:	1082      	asrs	r2, r0, #2
  407ada:	2401      	movs	r4, #1
  407adc:	4094      	lsls	r4, r2
  407ade:	429c      	cmp	r4, r3
  407ae0:	f200 808b 	bhi.w	407bfa <_malloc_r+0x1ea>
  407ae4:	421c      	tst	r4, r3
  407ae6:	d106      	bne.n	407af6 <_malloc_r+0xe6>
  407ae8:	f020 0003 	bic.w	r0, r0, #3
  407aec:	0064      	lsls	r4, r4, #1
  407aee:	421c      	tst	r4, r3
  407af0:	f100 0004 	add.w	r0, r0, #4
  407af4:	d0fa      	beq.n	407aec <_malloc_r+0xdc>
  407af6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  407afa:	46cc      	mov	ip, r9
  407afc:	4680      	mov	r8, r0
  407afe:	f8dc 300c 	ldr.w	r3, [ip, #12]
  407b02:	459c      	cmp	ip, r3
  407b04:	d107      	bne.n	407b16 <_malloc_r+0x106>
  407b06:	e16d      	b.n	407de4 <_malloc_r+0x3d4>
  407b08:	2a00      	cmp	r2, #0
  407b0a:	f280 817b 	bge.w	407e04 <_malloc_r+0x3f4>
  407b0e:	68db      	ldr	r3, [r3, #12]
  407b10:	459c      	cmp	ip, r3
  407b12:	f000 8167 	beq.w	407de4 <_malloc_r+0x3d4>
  407b16:	6859      	ldr	r1, [r3, #4]
  407b18:	f021 0103 	bic.w	r1, r1, #3
  407b1c:	1b8a      	subs	r2, r1, r6
  407b1e:	2a0f      	cmp	r2, #15
  407b20:	ddf2      	ble.n	407b08 <_malloc_r+0xf8>
  407b22:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  407b26:	f8d3 8008 	ldr.w	r8, [r3, #8]
  407b2a:	9300      	str	r3, [sp, #0]
  407b2c:	199c      	adds	r4, r3, r6
  407b2e:	4628      	mov	r0, r5
  407b30:	f046 0601 	orr.w	r6, r6, #1
  407b34:	f042 0501 	orr.w	r5, r2, #1
  407b38:	605e      	str	r6, [r3, #4]
  407b3a:	f8c8 c00c 	str.w	ip, [r8, #12]
  407b3e:	f8cc 8008 	str.w	r8, [ip, #8]
  407b42:	617c      	str	r4, [r7, #20]
  407b44:	613c      	str	r4, [r7, #16]
  407b46:	f8c4 e00c 	str.w	lr, [r4, #12]
  407b4a:	f8c4 e008 	str.w	lr, [r4, #8]
  407b4e:	6065      	str	r5, [r4, #4]
  407b50:	505a      	str	r2, [r3, r1]
  407b52:	f000 fadf 	bl	408114 <__malloc_unlock>
  407b56:	9b00      	ldr	r3, [sp, #0]
  407b58:	f103 0408 	add.w	r4, r3, #8
  407b5c:	e01e      	b.n	407b9c <_malloc_r+0x18c>
  407b5e:	2910      	cmp	r1, #16
  407b60:	d820      	bhi.n	407ba4 <_malloc_r+0x194>
  407b62:	f000 fad1 	bl	408108 <__malloc_lock>
  407b66:	2610      	movs	r6, #16
  407b68:	2318      	movs	r3, #24
  407b6a:	2002      	movs	r0, #2
  407b6c:	4f79      	ldr	r7, [pc, #484]	; (407d54 <_malloc_r+0x344>)
  407b6e:	443b      	add	r3, r7
  407b70:	f1a3 0208 	sub.w	r2, r3, #8
  407b74:	685c      	ldr	r4, [r3, #4]
  407b76:	4294      	cmp	r4, r2
  407b78:	f000 813d 	beq.w	407df6 <_malloc_r+0x3e6>
  407b7c:	6863      	ldr	r3, [r4, #4]
  407b7e:	68e1      	ldr	r1, [r4, #12]
  407b80:	68a6      	ldr	r6, [r4, #8]
  407b82:	f023 0303 	bic.w	r3, r3, #3
  407b86:	4423      	add	r3, r4
  407b88:	4628      	mov	r0, r5
  407b8a:	685a      	ldr	r2, [r3, #4]
  407b8c:	60f1      	str	r1, [r6, #12]
  407b8e:	f042 0201 	orr.w	r2, r2, #1
  407b92:	608e      	str	r6, [r1, #8]
  407b94:	605a      	str	r2, [r3, #4]
  407b96:	f000 fabd 	bl	408114 <__malloc_unlock>
  407b9a:	3408      	adds	r4, #8
  407b9c:	4620      	mov	r0, r4
  407b9e:	b003      	add	sp, #12
  407ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407ba4:	2400      	movs	r4, #0
  407ba6:	230c      	movs	r3, #12
  407ba8:	4620      	mov	r0, r4
  407baa:	602b      	str	r3, [r5, #0]
  407bac:	b003      	add	sp, #12
  407bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407bb2:	2040      	movs	r0, #64	; 0x40
  407bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
  407bb8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  407bbc:	e74a      	b.n	407a54 <_malloc_r+0x44>
  407bbe:	4423      	add	r3, r4
  407bc0:	68e1      	ldr	r1, [r4, #12]
  407bc2:	685a      	ldr	r2, [r3, #4]
  407bc4:	68a6      	ldr	r6, [r4, #8]
  407bc6:	f042 0201 	orr.w	r2, r2, #1
  407bca:	60f1      	str	r1, [r6, #12]
  407bcc:	4628      	mov	r0, r5
  407bce:	608e      	str	r6, [r1, #8]
  407bd0:	605a      	str	r2, [r3, #4]
  407bd2:	f000 fa9f 	bl	408114 <__malloc_unlock>
  407bd6:	3408      	adds	r4, #8
  407bd8:	4620      	mov	r0, r4
  407bda:	b003      	add	sp, #12
  407bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407be0:	4423      	add	r3, r4
  407be2:	4628      	mov	r0, r5
  407be4:	685a      	ldr	r2, [r3, #4]
  407be6:	f042 0201 	orr.w	r2, r2, #1
  407bea:	605a      	str	r2, [r3, #4]
  407bec:	f000 fa92 	bl	408114 <__malloc_unlock>
  407bf0:	3408      	adds	r4, #8
  407bf2:	4620      	mov	r0, r4
  407bf4:	b003      	add	sp, #12
  407bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407bfa:	68bc      	ldr	r4, [r7, #8]
  407bfc:	6863      	ldr	r3, [r4, #4]
  407bfe:	f023 0803 	bic.w	r8, r3, #3
  407c02:	45b0      	cmp	r8, r6
  407c04:	d304      	bcc.n	407c10 <_malloc_r+0x200>
  407c06:	eba8 0306 	sub.w	r3, r8, r6
  407c0a:	2b0f      	cmp	r3, #15
  407c0c:	f300 8085 	bgt.w	407d1a <_malloc_r+0x30a>
  407c10:	f8df 9158 	ldr.w	r9, [pc, #344]	; 407d6c <_malloc_r+0x35c>
  407c14:	4b50      	ldr	r3, [pc, #320]	; (407d58 <_malloc_r+0x348>)
  407c16:	f8d9 2000 	ldr.w	r2, [r9]
  407c1a:	681b      	ldr	r3, [r3, #0]
  407c1c:	3201      	adds	r2, #1
  407c1e:	4433      	add	r3, r6
  407c20:	eb04 0a08 	add.w	sl, r4, r8
  407c24:	f000 8155 	beq.w	407ed2 <_malloc_r+0x4c2>
  407c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  407c2c:	330f      	adds	r3, #15
  407c2e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  407c32:	f02b 0b0f 	bic.w	fp, fp, #15
  407c36:	4659      	mov	r1, fp
  407c38:	4628      	mov	r0, r5
  407c3a:	f000 fc17 	bl	40846c <_sbrk_r>
  407c3e:	1c41      	adds	r1, r0, #1
  407c40:	4602      	mov	r2, r0
  407c42:	f000 80fc 	beq.w	407e3e <_malloc_r+0x42e>
  407c46:	4582      	cmp	sl, r0
  407c48:	f200 80f7 	bhi.w	407e3a <_malloc_r+0x42a>
  407c4c:	4b43      	ldr	r3, [pc, #268]	; (407d5c <_malloc_r+0x34c>)
  407c4e:	6819      	ldr	r1, [r3, #0]
  407c50:	4459      	add	r1, fp
  407c52:	6019      	str	r1, [r3, #0]
  407c54:	f000 814d 	beq.w	407ef2 <_malloc_r+0x4e2>
  407c58:	f8d9 0000 	ldr.w	r0, [r9]
  407c5c:	3001      	adds	r0, #1
  407c5e:	bf1b      	ittet	ne
  407c60:	eba2 0a0a 	subne.w	sl, r2, sl
  407c64:	4451      	addne	r1, sl
  407c66:	f8c9 2000 	streq.w	r2, [r9]
  407c6a:	6019      	strne	r1, [r3, #0]
  407c6c:	f012 0107 	ands.w	r1, r2, #7
  407c70:	f000 8115 	beq.w	407e9e <_malloc_r+0x48e>
  407c74:	f1c1 0008 	rsb	r0, r1, #8
  407c78:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  407c7c:	4402      	add	r2, r0
  407c7e:	3108      	adds	r1, #8
  407c80:	eb02 090b 	add.w	r9, r2, fp
  407c84:	f3c9 090b 	ubfx	r9, r9, #0, #12
  407c88:	eba1 0909 	sub.w	r9, r1, r9
  407c8c:	4649      	mov	r1, r9
  407c8e:	4628      	mov	r0, r5
  407c90:	9301      	str	r3, [sp, #4]
  407c92:	9200      	str	r2, [sp, #0]
  407c94:	f000 fbea 	bl	40846c <_sbrk_r>
  407c98:	1c43      	adds	r3, r0, #1
  407c9a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407c9e:	f000 8143 	beq.w	407f28 <_malloc_r+0x518>
  407ca2:	1a80      	subs	r0, r0, r2
  407ca4:	4448      	add	r0, r9
  407ca6:	f040 0001 	orr.w	r0, r0, #1
  407caa:	6819      	ldr	r1, [r3, #0]
  407cac:	60ba      	str	r2, [r7, #8]
  407cae:	4449      	add	r1, r9
  407cb0:	42bc      	cmp	r4, r7
  407cb2:	6050      	str	r0, [r2, #4]
  407cb4:	6019      	str	r1, [r3, #0]
  407cb6:	d017      	beq.n	407ce8 <_malloc_r+0x2d8>
  407cb8:	f1b8 0f0f 	cmp.w	r8, #15
  407cbc:	f240 80fb 	bls.w	407eb6 <_malloc_r+0x4a6>
  407cc0:	6860      	ldr	r0, [r4, #4]
  407cc2:	f1a8 020c 	sub.w	r2, r8, #12
  407cc6:	f022 0207 	bic.w	r2, r2, #7
  407cca:	eb04 0e02 	add.w	lr, r4, r2
  407cce:	f000 0001 	and.w	r0, r0, #1
  407cd2:	f04f 0c05 	mov.w	ip, #5
  407cd6:	4310      	orrs	r0, r2
  407cd8:	2a0f      	cmp	r2, #15
  407cda:	6060      	str	r0, [r4, #4]
  407cdc:	f8ce c004 	str.w	ip, [lr, #4]
  407ce0:	f8ce c008 	str.w	ip, [lr, #8]
  407ce4:	f200 8117 	bhi.w	407f16 <_malloc_r+0x506>
  407ce8:	4b1d      	ldr	r3, [pc, #116]	; (407d60 <_malloc_r+0x350>)
  407cea:	68bc      	ldr	r4, [r7, #8]
  407cec:	681a      	ldr	r2, [r3, #0]
  407cee:	4291      	cmp	r1, r2
  407cf0:	bf88      	it	hi
  407cf2:	6019      	strhi	r1, [r3, #0]
  407cf4:	4b1b      	ldr	r3, [pc, #108]	; (407d64 <_malloc_r+0x354>)
  407cf6:	681a      	ldr	r2, [r3, #0]
  407cf8:	4291      	cmp	r1, r2
  407cfa:	6862      	ldr	r2, [r4, #4]
  407cfc:	bf88      	it	hi
  407cfe:	6019      	strhi	r1, [r3, #0]
  407d00:	f022 0203 	bic.w	r2, r2, #3
  407d04:	4296      	cmp	r6, r2
  407d06:	eba2 0306 	sub.w	r3, r2, r6
  407d0a:	d801      	bhi.n	407d10 <_malloc_r+0x300>
  407d0c:	2b0f      	cmp	r3, #15
  407d0e:	dc04      	bgt.n	407d1a <_malloc_r+0x30a>
  407d10:	4628      	mov	r0, r5
  407d12:	f000 f9ff 	bl	408114 <__malloc_unlock>
  407d16:	2400      	movs	r4, #0
  407d18:	e740      	b.n	407b9c <_malloc_r+0x18c>
  407d1a:	19a2      	adds	r2, r4, r6
  407d1c:	f043 0301 	orr.w	r3, r3, #1
  407d20:	f046 0601 	orr.w	r6, r6, #1
  407d24:	6066      	str	r6, [r4, #4]
  407d26:	4628      	mov	r0, r5
  407d28:	60ba      	str	r2, [r7, #8]
  407d2a:	6053      	str	r3, [r2, #4]
  407d2c:	f000 f9f2 	bl	408114 <__malloc_unlock>
  407d30:	3408      	adds	r4, #8
  407d32:	4620      	mov	r0, r4
  407d34:	b003      	add	sp, #12
  407d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d3a:	2b14      	cmp	r3, #20
  407d3c:	d971      	bls.n	407e22 <_malloc_r+0x412>
  407d3e:	2b54      	cmp	r3, #84	; 0x54
  407d40:	f200 80a3 	bhi.w	407e8a <_malloc_r+0x47a>
  407d44:	0b33      	lsrs	r3, r6, #12
  407d46:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  407d4a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  407d4e:	00c3      	lsls	r3, r0, #3
  407d50:	e680      	b.n	407a54 <_malloc_r+0x44>
  407d52:	bf00      	nop
  407d54:	204005c0 	.word	0x204005c0
  407d58:	2040c990 	.word	0x2040c990
  407d5c:	2040c960 	.word	0x2040c960
  407d60:	2040c988 	.word	0x2040c988
  407d64:	2040c98c 	.word	0x2040c98c
  407d68:	204005c8 	.word	0x204005c8
  407d6c:	204009c8 	.word	0x204009c8
  407d70:	0a5a      	lsrs	r2, r3, #9
  407d72:	2a04      	cmp	r2, #4
  407d74:	d95b      	bls.n	407e2e <_malloc_r+0x41e>
  407d76:	2a14      	cmp	r2, #20
  407d78:	f200 80ae 	bhi.w	407ed8 <_malloc_r+0x4c8>
  407d7c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  407d80:	00c9      	lsls	r1, r1, #3
  407d82:	325b      	adds	r2, #91	; 0x5b
  407d84:	eb07 0c01 	add.w	ip, r7, r1
  407d88:	5879      	ldr	r1, [r7, r1]
  407d8a:	f1ac 0c08 	sub.w	ip, ip, #8
  407d8e:	458c      	cmp	ip, r1
  407d90:	f000 8088 	beq.w	407ea4 <_malloc_r+0x494>
  407d94:	684a      	ldr	r2, [r1, #4]
  407d96:	f022 0203 	bic.w	r2, r2, #3
  407d9a:	4293      	cmp	r3, r2
  407d9c:	d273      	bcs.n	407e86 <_malloc_r+0x476>
  407d9e:	6889      	ldr	r1, [r1, #8]
  407da0:	458c      	cmp	ip, r1
  407da2:	d1f7      	bne.n	407d94 <_malloc_r+0x384>
  407da4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  407da8:	687b      	ldr	r3, [r7, #4]
  407daa:	60e2      	str	r2, [r4, #12]
  407dac:	f8c4 c008 	str.w	ip, [r4, #8]
  407db0:	6094      	str	r4, [r2, #8]
  407db2:	f8cc 400c 	str.w	r4, [ip, #12]
  407db6:	e68f      	b.n	407ad8 <_malloc_r+0xc8>
  407db8:	19a1      	adds	r1, r4, r6
  407dba:	f046 0c01 	orr.w	ip, r6, #1
  407dbe:	f042 0601 	orr.w	r6, r2, #1
  407dc2:	f8c4 c004 	str.w	ip, [r4, #4]
  407dc6:	4628      	mov	r0, r5
  407dc8:	6179      	str	r1, [r7, #20]
  407dca:	6139      	str	r1, [r7, #16]
  407dcc:	f8c1 e00c 	str.w	lr, [r1, #12]
  407dd0:	f8c1 e008 	str.w	lr, [r1, #8]
  407dd4:	604e      	str	r6, [r1, #4]
  407dd6:	50e2      	str	r2, [r4, r3]
  407dd8:	f000 f99c 	bl	408114 <__malloc_unlock>
  407ddc:	3408      	adds	r4, #8
  407dde:	e6dd      	b.n	407b9c <_malloc_r+0x18c>
  407de0:	687b      	ldr	r3, [r7, #4]
  407de2:	e679      	b.n	407ad8 <_malloc_r+0xc8>
  407de4:	f108 0801 	add.w	r8, r8, #1
  407de8:	f018 0f03 	tst.w	r8, #3
  407dec:	f10c 0c08 	add.w	ip, ip, #8
  407df0:	f47f ae85 	bne.w	407afe <_malloc_r+0xee>
  407df4:	e02d      	b.n	407e52 <_malloc_r+0x442>
  407df6:	68dc      	ldr	r4, [r3, #12]
  407df8:	42a3      	cmp	r3, r4
  407dfa:	bf08      	it	eq
  407dfc:	3002      	addeq	r0, #2
  407dfe:	f43f ae3e 	beq.w	407a7e <_malloc_r+0x6e>
  407e02:	e6bb      	b.n	407b7c <_malloc_r+0x16c>
  407e04:	4419      	add	r1, r3
  407e06:	461c      	mov	r4, r3
  407e08:	684a      	ldr	r2, [r1, #4]
  407e0a:	68db      	ldr	r3, [r3, #12]
  407e0c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  407e10:	f042 0201 	orr.w	r2, r2, #1
  407e14:	604a      	str	r2, [r1, #4]
  407e16:	4628      	mov	r0, r5
  407e18:	60f3      	str	r3, [r6, #12]
  407e1a:	609e      	str	r6, [r3, #8]
  407e1c:	f000 f97a 	bl	408114 <__malloc_unlock>
  407e20:	e6bc      	b.n	407b9c <_malloc_r+0x18c>
  407e22:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  407e26:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  407e2a:	00c3      	lsls	r3, r0, #3
  407e2c:	e612      	b.n	407a54 <_malloc_r+0x44>
  407e2e:	099a      	lsrs	r2, r3, #6
  407e30:	f102 0139 	add.w	r1, r2, #57	; 0x39
  407e34:	00c9      	lsls	r1, r1, #3
  407e36:	3238      	adds	r2, #56	; 0x38
  407e38:	e7a4      	b.n	407d84 <_malloc_r+0x374>
  407e3a:	42bc      	cmp	r4, r7
  407e3c:	d054      	beq.n	407ee8 <_malloc_r+0x4d8>
  407e3e:	68bc      	ldr	r4, [r7, #8]
  407e40:	6862      	ldr	r2, [r4, #4]
  407e42:	f022 0203 	bic.w	r2, r2, #3
  407e46:	e75d      	b.n	407d04 <_malloc_r+0x2f4>
  407e48:	f859 3908 	ldr.w	r3, [r9], #-8
  407e4c:	4599      	cmp	r9, r3
  407e4e:	f040 8086 	bne.w	407f5e <_malloc_r+0x54e>
  407e52:	f010 0f03 	tst.w	r0, #3
  407e56:	f100 30ff 	add.w	r0, r0, #4294967295
  407e5a:	d1f5      	bne.n	407e48 <_malloc_r+0x438>
  407e5c:	687b      	ldr	r3, [r7, #4]
  407e5e:	ea23 0304 	bic.w	r3, r3, r4
  407e62:	607b      	str	r3, [r7, #4]
  407e64:	0064      	lsls	r4, r4, #1
  407e66:	429c      	cmp	r4, r3
  407e68:	f63f aec7 	bhi.w	407bfa <_malloc_r+0x1ea>
  407e6c:	2c00      	cmp	r4, #0
  407e6e:	f43f aec4 	beq.w	407bfa <_malloc_r+0x1ea>
  407e72:	421c      	tst	r4, r3
  407e74:	4640      	mov	r0, r8
  407e76:	f47f ae3e 	bne.w	407af6 <_malloc_r+0xe6>
  407e7a:	0064      	lsls	r4, r4, #1
  407e7c:	421c      	tst	r4, r3
  407e7e:	f100 0004 	add.w	r0, r0, #4
  407e82:	d0fa      	beq.n	407e7a <_malloc_r+0x46a>
  407e84:	e637      	b.n	407af6 <_malloc_r+0xe6>
  407e86:	468c      	mov	ip, r1
  407e88:	e78c      	b.n	407da4 <_malloc_r+0x394>
  407e8a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  407e8e:	d815      	bhi.n	407ebc <_malloc_r+0x4ac>
  407e90:	0bf3      	lsrs	r3, r6, #15
  407e92:	f103 0078 	add.w	r0, r3, #120	; 0x78
  407e96:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  407e9a:	00c3      	lsls	r3, r0, #3
  407e9c:	e5da      	b.n	407a54 <_malloc_r+0x44>
  407e9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  407ea2:	e6ed      	b.n	407c80 <_malloc_r+0x270>
  407ea4:	687b      	ldr	r3, [r7, #4]
  407ea6:	1092      	asrs	r2, r2, #2
  407ea8:	2101      	movs	r1, #1
  407eaa:	fa01 f202 	lsl.w	r2, r1, r2
  407eae:	4313      	orrs	r3, r2
  407eb0:	607b      	str	r3, [r7, #4]
  407eb2:	4662      	mov	r2, ip
  407eb4:	e779      	b.n	407daa <_malloc_r+0x39a>
  407eb6:	2301      	movs	r3, #1
  407eb8:	6053      	str	r3, [r2, #4]
  407eba:	e729      	b.n	407d10 <_malloc_r+0x300>
  407ebc:	f240 5254 	movw	r2, #1364	; 0x554
  407ec0:	4293      	cmp	r3, r2
  407ec2:	d822      	bhi.n	407f0a <_malloc_r+0x4fa>
  407ec4:	0cb3      	lsrs	r3, r6, #18
  407ec6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  407eca:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  407ece:	00c3      	lsls	r3, r0, #3
  407ed0:	e5c0      	b.n	407a54 <_malloc_r+0x44>
  407ed2:	f103 0b10 	add.w	fp, r3, #16
  407ed6:	e6ae      	b.n	407c36 <_malloc_r+0x226>
  407ed8:	2a54      	cmp	r2, #84	; 0x54
  407eda:	d829      	bhi.n	407f30 <_malloc_r+0x520>
  407edc:	0b1a      	lsrs	r2, r3, #12
  407ede:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  407ee2:	00c9      	lsls	r1, r1, #3
  407ee4:	326e      	adds	r2, #110	; 0x6e
  407ee6:	e74d      	b.n	407d84 <_malloc_r+0x374>
  407ee8:	4b20      	ldr	r3, [pc, #128]	; (407f6c <_malloc_r+0x55c>)
  407eea:	6819      	ldr	r1, [r3, #0]
  407eec:	4459      	add	r1, fp
  407eee:	6019      	str	r1, [r3, #0]
  407ef0:	e6b2      	b.n	407c58 <_malloc_r+0x248>
  407ef2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  407ef6:	2800      	cmp	r0, #0
  407ef8:	f47f aeae 	bne.w	407c58 <_malloc_r+0x248>
  407efc:	eb08 030b 	add.w	r3, r8, fp
  407f00:	68ba      	ldr	r2, [r7, #8]
  407f02:	f043 0301 	orr.w	r3, r3, #1
  407f06:	6053      	str	r3, [r2, #4]
  407f08:	e6ee      	b.n	407ce8 <_malloc_r+0x2d8>
  407f0a:	207f      	movs	r0, #127	; 0x7f
  407f0c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  407f10:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  407f14:	e59e      	b.n	407a54 <_malloc_r+0x44>
  407f16:	f104 0108 	add.w	r1, r4, #8
  407f1a:	4628      	mov	r0, r5
  407f1c:	9300      	str	r3, [sp, #0]
  407f1e:	f7ff fa59 	bl	4073d4 <_free_r>
  407f22:	9b00      	ldr	r3, [sp, #0]
  407f24:	6819      	ldr	r1, [r3, #0]
  407f26:	e6df      	b.n	407ce8 <_malloc_r+0x2d8>
  407f28:	2001      	movs	r0, #1
  407f2a:	f04f 0900 	mov.w	r9, #0
  407f2e:	e6bc      	b.n	407caa <_malloc_r+0x29a>
  407f30:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407f34:	d805      	bhi.n	407f42 <_malloc_r+0x532>
  407f36:	0bda      	lsrs	r2, r3, #15
  407f38:	f102 0178 	add.w	r1, r2, #120	; 0x78
  407f3c:	00c9      	lsls	r1, r1, #3
  407f3e:	3277      	adds	r2, #119	; 0x77
  407f40:	e720      	b.n	407d84 <_malloc_r+0x374>
  407f42:	f240 5154 	movw	r1, #1364	; 0x554
  407f46:	428a      	cmp	r2, r1
  407f48:	d805      	bhi.n	407f56 <_malloc_r+0x546>
  407f4a:	0c9a      	lsrs	r2, r3, #18
  407f4c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  407f50:	00c9      	lsls	r1, r1, #3
  407f52:	327c      	adds	r2, #124	; 0x7c
  407f54:	e716      	b.n	407d84 <_malloc_r+0x374>
  407f56:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  407f5a:	227e      	movs	r2, #126	; 0x7e
  407f5c:	e712      	b.n	407d84 <_malloc_r+0x374>
  407f5e:	687b      	ldr	r3, [r7, #4]
  407f60:	e780      	b.n	407e64 <_malloc_r+0x454>
  407f62:	08f0      	lsrs	r0, r6, #3
  407f64:	f106 0308 	add.w	r3, r6, #8
  407f68:	e600      	b.n	407b6c <_malloc_r+0x15c>
  407f6a:	bf00      	nop
  407f6c:	2040c960 	.word	0x2040c960

00407f70 <__ascii_mbtowc>:
  407f70:	b082      	sub	sp, #8
  407f72:	b149      	cbz	r1, 407f88 <__ascii_mbtowc+0x18>
  407f74:	b15a      	cbz	r2, 407f8e <__ascii_mbtowc+0x1e>
  407f76:	b16b      	cbz	r3, 407f94 <__ascii_mbtowc+0x24>
  407f78:	7813      	ldrb	r3, [r2, #0]
  407f7a:	600b      	str	r3, [r1, #0]
  407f7c:	7812      	ldrb	r2, [r2, #0]
  407f7e:	1c10      	adds	r0, r2, #0
  407f80:	bf18      	it	ne
  407f82:	2001      	movne	r0, #1
  407f84:	b002      	add	sp, #8
  407f86:	4770      	bx	lr
  407f88:	a901      	add	r1, sp, #4
  407f8a:	2a00      	cmp	r2, #0
  407f8c:	d1f3      	bne.n	407f76 <__ascii_mbtowc+0x6>
  407f8e:	4610      	mov	r0, r2
  407f90:	b002      	add	sp, #8
  407f92:	4770      	bx	lr
  407f94:	f06f 0001 	mvn.w	r0, #1
  407f98:	e7f4      	b.n	407f84 <__ascii_mbtowc+0x14>
  407f9a:	bf00      	nop
  407f9c:	0000      	movs	r0, r0
	...

00407fa0 <memchr>:
  407fa0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407fa4:	2a10      	cmp	r2, #16
  407fa6:	db2b      	blt.n	408000 <memchr+0x60>
  407fa8:	f010 0f07 	tst.w	r0, #7
  407fac:	d008      	beq.n	407fc0 <memchr+0x20>
  407fae:	f810 3b01 	ldrb.w	r3, [r0], #1
  407fb2:	3a01      	subs	r2, #1
  407fb4:	428b      	cmp	r3, r1
  407fb6:	d02d      	beq.n	408014 <memchr+0x74>
  407fb8:	f010 0f07 	tst.w	r0, #7
  407fbc:	b342      	cbz	r2, 408010 <memchr+0x70>
  407fbe:	d1f6      	bne.n	407fae <memchr+0xe>
  407fc0:	b4f0      	push	{r4, r5, r6, r7}
  407fc2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  407fc6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  407fca:	f022 0407 	bic.w	r4, r2, #7
  407fce:	f07f 0700 	mvns.w	r7, #0
  407fd2:	2300      	movs	r3, #0
  407fd4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  407fd8:	3c08      	subs	r4, #8
  407fda:	ea85 0501 	eor.w	r5, r5, r1
  407fde:	ea86 0601 	eor.w	r6, r6, r1
  407fe2:	fa85 f547 	uadd8	r5, r5, r7
  407fe6:	faa3 f587 	sel	r5, r3, r7
  407fea:	fa86 f647 	uadd8	r6, r6, r7
  407fee:	faa5 f687 	sel	r6, r5, r7
  407ff2:	b98e      	cbnz	r6, 408018 <memchr+0x78>
  407ff4:	d1ee      	bne.n	407fd4 <memchr+0x34>
  407ff6:	bcf0      	pop	{r4, r5, r6, r7}
  407ff8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407ffc:	f002 0207 	and.w	r2, r2, #7
  408000:	b132      	cbz	r2, 408010 <memchr+0x70>
  408002:	f810 3b01 	ldrb.w	r3, [r0], #1
  408006:	3a01      	subs	r2, #1
  408008:	ea83 0301 	eor.w	r3, r3, r1
  40800c:	b113      	cbz	r3, 408014 <memchr+0x74>
  40800e:	d1f8      	bne.n	408002 <memchr+0x62>
  408010:	2000      	movs	r0, #0
  408012:	4770      	bx	lr
  408014:	3801      	subs	r0, #1
  408016:	4770      	bx	lr
  408018:	2d00      	cmp	r5, #0
  40801a:	bf06      	itte	eq
  40801c:	4635      	moveq	r5, r6
  40801e:	3803      	subeq	r0, #3
  408020:	3807      	subne	r0, #7
  408022:	f015 0f01 	tst.w	r5, #1
  408026:	d107      	bne.n	408038 <memchr+0x98>
  408028:	3001      	adds	r0, #1
  40802a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40802e:	bf02      	ittt	eq
  408030:	3001      	addeq	r0, #1
  408032:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  408036:	3001      	addeq	r0, #1
  408038:	bcf0      	pop	{r4, r5, r6, r7}
  40803a:	3801      	subs	r0, #1
  40803c:	4770      	bx	lr
  40803e:	bf00      	nop

00408040 <memmove>:
  408040:	4288      	cmp	r0, r1
  408042:	b5f0      	push	{r4, r5, r6, r7, lr}
  408044:	d90d      	bls.n	408062 <memmove+0x22>
  408046:	188b      	adds	r3, r1, r2
  408048:	4298      	cmp	r0, r3
  40804a:	d20a      	bcs.n	408062 <memmove+0x22>
  40804c:	1884      	adds	r4, r0, r2
  40804e:	2a00      	cmp	r2, #0
  408050:	d051      	beq.n	4080f6 <memmove+0xb6>
  408052:	4622      	mov	r2, r4
  408054:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  408058:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40805c:	4299      	cmp	r1, r3
  40805e:	d1f9      	bne.n	408054 <memmove+0x14>
  408060:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408062:	2a0f      	cmp	r2, #15
  408064:	d948      	bls.n	4080f8 <memmove+0xb8>
  408066:	ea41 0300 	orr.w	r3, r1, r0
  40806a:	079b      	lsls	r3, r3, #30
  40806c:	d146      	bne.n	4080fc <memmove+0xbc>
  40806e:	f100 0410 	add.w	r4, r0, #16
  408072:	f101 0310 	add.w	r3, r1, #16
  408076:	4615      	mov	r5, r2
  408078:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40807c:	f844 6c10 	str.w	r6, [r4, #-16]
  408080:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  408084:	f844 6c0c 	str.w	r6, [r4, #-12]
  408088:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40808c:	f844 6c08 	str.w	r6, [r4, #-8]
  408090:	3d10      	subs	r5, #16
  408092:	f853 6c04 	ldr.w	r6, [r3, #-4]
  408096:	f844 6c04 	str.w	r6, [r4, #-4]
  40809a:	2d0f      	cmp	r5, #15
  40809c:	f103 0310 	add.w	r3, r3, #16
  4080a0:	f104 0410 	add.w	r4, r4, #16
  4080a4:	d8e8      	bhi.n	408078 <memmove+0x38>
  4080a6:	f1a2 0310 	sub.w	r3, r2, #16
  4080aa:	f023 030f 	bic.w	r3, r3, #15
  4080ae:	f002 0e0f 	and.w	lr, r2, #15
  4080b2:	3310      	adds	r3, #16
  4080b4:	f1be 0f03 	cmp.w	lr, #3
  4080b8:	4419      	add	r1, r3
  4080ba:	4403      	add	r3, r0
  4080bc:	d921      	bls.n	408102 <memmove+0xc2>
  4080be:	1f1e      	subs	r6, r3, #4
  4080c0:	460d      	mov	r5, r1
  4080c2:	4674      	mov	r4, lr
  4080c4:	3c04      	subs	r4, #4
  4080c6:	f855 7b04 	ldr.w	r7, [r5], #4
  4080ca:	f846 7f04 	str.w	r7, [r6, #4]!
  4080ce:	2c03      	cmp	r4, #3
  4080d0:	d8f8      	bhi.n	4080c4 <memmove+0x84>
  4080d2:	f1ae 0404 	sub.w	r4, lr, #4
  4080d6:	f024 0403 	bic.w	r4, r4, #3
  4080da:	3404      	adds	r4, #4
  4080dc:	4421      	add	r1, r4
  4080de:	4423      	add	r3, r4
  4080e0:	f002 0203 	and.w	r2, r2, #3
  4080e4:	b162      	cbz	r2, 408100 <memmove+0xc0>
  4080e6:	3b01      	subs	r3, #1
  4080e8:	440a      	add	r2, r1
  4080ea:	f811 4b01 	ldrb.w	r4, [r1], #1
  4080ee:	f803 4f01 	strb.w	r4, [r3, #1]!
  4080f2:	428a      	cmp	r2, r1
  4080f4:	d1f9      	bne.n	4080ea <memmove+0xaa>
  4080f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4080f8:	4603      	mov	r3, r0
  4080fa:	e7f3      	b.n	4080e4 <memmove+0xa4>
  4080fc:	4603      	mov	r3, r0
  4080fe:	e7f2      	b.n	4080e6 <memmove+0xa6>
  408100:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408102:	4672      	mov	r2, lr
  408104:	e7ee      	b.n	4080e4 <memmove+0xa4>
  408106:	bf00      	nop

00408108 <__malloc_lock>:
  408108:	4801      	ldr	r0, [pc, #4]	; (408110 <__malloc_lock+0x8>)
  40810a:	f7ff bbfd 	b.w	407908 <__retarget_lock_acquire_recursive>
  40810e:	bf00      	nop
  408110:	2040cb54 	.word	0x2040cb54

00408114 <__malloc_unlock>:
  408114:	4801      	ldr	r0, [pc, #4]	; (40811c <__malloc_unlock+0x8>)
  408116:	f7ff bbf9 	b.w	40790c <__retarget_lock_release_recursive>
  40811a:	bf00      	nop
  40811c:	2040cb54 	.word	0x2040cb54

00408120 <_realloc_r>:
  408120:	2900      	cmp	r1, #0
  408122:	f000 8095 	beq.w	408250 <_realloc_r+0x130>
  408126:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40812a:	460d      	mov	r5, r1
  40812c:	4616      	mov	r6, r2
  40812e:	b083      	sub	sp, #12
  408130:	4680      	mov	r8, r0
  408132:	f106 070b 	add.w	r7, r6, #11
  408136:	f7ff ffe7 	bl	408108 <__malloc_lock>
  40813a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40813e:	2f16      	cmp	r7, #22
  408140:	f02e 0403 	bic.w	r4, lr, #3
  408144:	f1a5 0908 	sub.w	r9, r5, #8
  408148:	d83c      	bhi.n	4081c4 <_realloc_r+0xa4>
  40814a:	2210      	movs	r2, #16
  40814c:	4617      	mov	r7, r2
  40814e:	42be      	cmp	r6, r7
  408150:	d83d      	bhi.n	4081ce <_realloc_r+0xae>
  408152:	4294      	cmp	r4, r2
  408154:	da43      	bge.n	4081de <_realloc_r+0xbe>
  408156:	4bc4      	ldr	r3, [pc, #784]	; (408468 <_realloc_r+0x348>)
  408158:	6899      	ldr	r1, [r3, #8]
  40815a:	eb09 0004 	add.w	r0, r9, r4
  40815e:	4288      	cmp	r0, r1
  408160:	f000 80b4 	beq.w	4082cc <_realloc_r+0x1ac>
  408164:	6843      	ldr	r3, [r0, #4]
  408166:	f023 0101 	bic.w	r1, r3, #1
  40816a:	4401      	add	r1, r0
  40816c:	6849      	ldr	r1, [r1, #4]
  40816e:	07c9      	lsls	r1, r1, #31
  408170:	d54c      	bpl.n	40820c <_realloc_r+0xec>
  408172:	f01e 0f01 	tst.w	lr, #1
  408176:	f000 809b 	beq.w	4082b0 <_realloc_r+0x190>
  40817a:	4631      	mov	r1, r6
  40817c:	4640      	mov	r0, r8
  40817e:	f7ff fc47 	bl	407a10 <_malloc_r>
  408182:	4606      	mov	r6, r0
  408184:	2800      	cmp	r0, #0
  408186:	d03a      	beq.n	4081fe <_realloc_r+0xde>
  408188:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40818c:	f023 0301 	bic.w	r3, r3, #1
  408190:	444b      	add	r3, r9
  408192:	f1a0 0208 	sub.w	r2, r0, #8
  408196:	429a      	cmp	r2, r3
  408198:	f000 8121 	beq.w	4083de <_realloc_r+0x2be>
  40819c:	1f22      	subs	r2, r4, #4
  40819e:	2a24      	cmp	r2, #36	; 0x24
  4081a0:	f200 8107 	bhi.w	4083b2 <_realloc_r+0x292>
  4081a4:	2a13      	cmp	r2, #19
  4081a6:	f200 80db 	bhi.w	408360 <_realloc_r+0x240>
  4081aa:	4603      	mov	r3, r0
  4081ac:	462a      	mov	r2, r5
  4081ae:	6811      	ldr	r1, [r2, #0]
  4081b0:	6019      	str	r1, [r3, #0]
  4081b2:	6851      	ldr	r1, [r2, #4]
  4081b4:	6059      	str	r1, [r3, #4]
  4081b6:	6892      	ldr	r2, [r2, #8]
  4081b8:	609a      	str	r2, [r3, #8]
  4081ba:	4629      	mov	r1, r5
  4081bc:	4640      	mov	r0, r8
  4081be:	f7ff f909 	bl	4073d4 <_free_r>
  4081c2:	e01c      	b.n	4081fe <_realloc_r+0xde>
  4081c4:	f027 0707 	bic.w	r7, r7, #7
  4081c8:	2f00      	cmp	r7, #0
  4081ca:	463a      	mov	r2, r7
  4081cc:	dabf      	bge.n	40814e <_realloc_r+0x2e>
  4081ce:	2600      	movs	r6, #0
  4081d0:	230c      	movs	r3, #12
  4081d2:	4630      	mov	r0, r6
  4081d4:	f8c8 3000 	str.w	r3, [r8]
  4081d8:	b003      	add	sp, #12
  4081da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4081de:	462e      	mov	r6, r5
  4081e0:	1be3      	subs	r3, r4, r7
  4081e2:	2b0f      	cmp	r3, #15
  4081e4:	d81e      	bhi.n	408224 <_realloc_r+0x104>
  4081e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4081ea:	f003 0301 	and.w	r3, r3, #1
  4081ee:	4323      	orrs	r3, r4
  4081f0:	444c      	add	r4, r9
  4081f2:	f8c9 3004 	str.w	r3, [r9, #4]
  4081f6:	6863      	ldr	r3, [r4, #4]
  4081f8:	f043 0301 	orr.w	r3, r3, #1
  4081fc:	6063      	str	r3, [r4, #4]
  4081fe:	4640      	mov	r0, r8
  408200:	f7ff ff88 	bl	408114 <__malloc_unlock>
  408204:	4630      	mov	r0, r6
  408206:	b003      	add	sp, #12
  408208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40820c:	f023 0303 	bic.w	r3, r3, #3
  408210:	18e1      	adds	r1, r4, r3
  408212:	4291      	cmp	r1, r2
  408214:	db1f      	blt.n	408256 <_realloc_r+0x136>
  408216:	68c3      	ldr	r3, [r0, #12]
  408218:	6882      	ldr	r2, [r0, #8]
  40821a:	462e      	mov	r6, r5
  40821c:	60d3      	str	r3, [r2, #12]
  40821e:	460c      	mov	r4, r1
  408220:	609a      	str	r2, [r3, #8]
  408222:	e7dd      	b.n	4081e0 <_realloc_r+0xc0>
  408224:	f8d9 2004 	ldr.w	r2, [r9, #4]
  408228:	eb09 0107 	add.w	r1, r9, r7
  40822c:	f002 0201 	and.w	r2, r2, #1
  408230:	444c      	add	r4, r9
  408232:	f043 0301 	orr.w	r3, r3, #1
  408236:	4317      	orrs	r7, r2
  408238:	f8c9 7004 	str.w	r7, [r9, #4]
  40823c:	604b      	str	r3, [r1, #4]
  40823e:	6863      	ldr	r3, [r4, #4]
  408240:	f043 0301 	orr.w	r3, r3, #1
  408244:	3108      	adds	r1, #8
  408246:	6063      	str	r3, [r4, #4]
  408248:	4640      	mov	r0, r8
  40824a:	f7ff f8c3 	bl	4073d4 <_free_r>
  40824e:	e7d6      	b.n	4081fe <_realloc_r+0xde>
  408250:	4611      	mov	r1, r2
  408252:	f7ff bbdd 	b.w	407a10 <_malloc_r>
  408256:	f01e 0f01 	tst.w	lr, #1
  40825a:	d18e      	bne.n	40817a <_realloc_r+0x5a>
  40825c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408260:	eba9 0a01 	sub.w	sl, r9, r1
  408264:	f8da 1004 	ldr.w	r1, [sl, #4]
  408268:	f021 0103 	bic.w	r1, r1, #3
  40826c:	440b      	add	r3, r1
  40826e:	4423      	add	r3, r4
  408270:	4293      	cmp	r3, r2
  408272:	db25      	blt.n	4082c0 <_realloc_r+0x1a0>
  408274:	68c2      	ldr	r2, [r0, #12]
  408276:	6881      	ldr	r1, [r0, #8]
  408278:	4656      	mov	r6, sl
  40827a:	60ca      	str	r2, [r1, #12]
  40827c:	6091      	str	r1, [r2, #8]
  40827e:	f8da 100c 	ldr.w	r1, [sl, #12]
  408282:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408286:	1f22      	subs	r2, r4, #4
  408288:	2a24      	cmp	r2, #36	; 0x24
  40828a:	60c1      	str	r1, [r0, #12]
  40828c:	6088      	str	r0, [r1, #8]
  40828e:	f200 8094 	bhi.w	4083ba <_realloc_r+0x29a>
  408292:	2a13      	cmp	r2, #19
  408294:	d96f      	bls.n	408376 <_realloc_r+0x256>
  408296:	6829      	ldr	r1, [r5, #0]
  408298:	f8ca 1008 	str.w	r1, [sl, #8]
  40829c:	6869      	ldr	r1, [r5, #4]
  40829e:	f8ca 100c 	str.w	r1, [sl, #12]
  4082a2:	2a1b      	cmp	r2, #27
  4082a4:	f200 80a2 	bhi.w	4083ec <_realloc_r+0x2cc>
  4082a8:	3508      	adds	r5, #8
  4082aa:	f10a 0210 	add.w	r2, sl, #16
  4082ae:	e063      	b.n	408378 <_realloc_r+0x258>
  4082b0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4082b4:	eba9 0a03 	sub.w	sl, r9, r3
  4082b8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4082bc:	f021 0103 	bic.w	r1, r1, #3
  4082c0:	1863      	adds	r3, r4, r1
  4082c2:	4293      	cmp	r3, r2
  4082c4:	f6ff af59 	blt.w	40817a <_realloc_r+0x5a>
  4082c8:	4656      	mov	r6, sl
  4082ca:	e7d8      	b.n	40827e <_realloc_r+0x15e>
  4082cc:	6841      	ldr	r1, [r0, #4]
  4082ce:	f021 0b03 	bic.w	fp, r1, #3
  4082d2:	44a3      	add	fp, r4
  4082d4:	f107 0010 	add.w	r0, r7, #16
  4082d8:	4583      	cmp	fp, r0
  4082da:	da56      	bge.n	40838a <_realloc_r+0x26a>
  4082dc:	f01e 0f01 	tst.w	lr, #1
  4082e0:	f47f af4b 	bne.w	40817a <_realloc_r+0x5a>
  4082e4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4082e8:	eba9 0a01 	sub.w	sl, r9, r1
  4082ec:	f8da 1004 	ldr.w	r1, [sl, #4]
  4082f0:	f021 0103 	bic.w	r1, r1, #3
  4082f4:	448b      	add	fp, r1
  4082f6:	4558      	cmp	r0, fp
  4082f8:	dce2      	bgt.n	4082c0 <_realloc_r+0x1a0>
  4082fa:	4656      	mov	r6, sl
  4082fc:	f8da 100c 	ldr.w	r1, [sl, #12]
  408300:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408304:	1f22      	subs	r2, r4, #4
  408306:	2a24      	cmp	r2, #36	; 0x24
  408308:	60c1      	str	r1, [r0, #12]
  40830a:	6088      	str	r0, [r1, #8]
  40830c:	f200 808f 	bhi.w	40842e <_realloc_r+0x30e>
  408310:	2a13      	cmp	r2, #19
  408312:	f240 808a 	bls.w	40842a <_realloc_r+0x30a>
  408316:	6829      	ldr	r1, [r5, #0]
  408318:	f8ca 1008 	str.w	r1, [sl, #8]
  40831c:	6869      	ldr	r1, [r5, #4]
  40831e:	f8ca 100c 	str.w	r1, [sl, #12]
  408322:	2a1b      	cmp	r2, #27
  408324:	f200 808a 	bhi.w	40843c <_realloc_r+0x31c>
  408328:	3508      	adds	r5, #8
  40832a:	f10a 0210 	add.w	r2, sl, #16
  40832e:	6829      	ldr	r1, [r5, #0]
  408330:	6011      	str	r1, [r2, #0]
  408332:	6869      	ldr	r1, [r5, #4]
  408334:	6051      	str	r1, [r2, #4]
  408336:	68a9      	ldr	r1, [r5, #8]
  408338:	6091      	str	r1, [r2, #8]
  40833a:	eb0a 0107 	add.w	r1, sl, r7
  40833e:	ebab 0207 	sub.w	r2, fp, r7
  408342:	f042 0201 	orr.w	r2, r2, #1
  408346:	6099      	str	r1, [r3, #8]
  408348:	604a      	str	r2, [r1, #4]
  40834a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40834e:	f003 0301 	and.w	r3, r3, #1
  408352:	431f      	orrs	r7, r3
  408354:	4640      	mov	r0, r8
  408356:	f8ca 7004 	str.w	r7, [sl, #4]
  40835a:	f7ff fedb 	bl	408114 <__malloc_unlock>
  40835e:	e751      	b.n	408204 <_realloc_r+0xe4>
  408360:	682b      	ldr	r3, [r5, #0]
  408362:	6003      	str	r3, [r0, #0]
  408364:	686b      	ldr	r3, [r5, #4]
  408366:	6043      	str	r3, [r0, #4]
  408368:	2a1b      	cmp	r2, #27
  40836a:	d82d      	bhi.n	4083c8 <_realloc_r+0x2a8>
  40836c:	f100 0308 	add.w	r3, r0, #8
  408370:	f105 0208 	add.w	r2, r5, #8
  408374:	e71b      	b.n	4081ae <_realloc_r+0x8e>
  408376:	4632      	mov	r2, r6
  408378:	6829      	ldr	r1, [r5, #0]
  40837a:	6011      	str	r1, [r2, #0]
  40837c:	6869      	ldr	r1, [r5, #4]
  40837e:	6051      	str	r1, [r2, #4]
  408380:	68a9      	ldr	r1, [r5, #8]
  408382:	6091      	str	r1, [r2, #8]
  408384:	461c      	mov	r4, r3
  408386:	46d1      	mov	r9, sl
  408388:	e72a      	b.n	4081e0 <_realloc_r+0xc0>
  40838a:	eb09 0107 	add.w	r1, r9, r7
  40838e:	ebab 0b07 	sub.w	fp, fp, r7
  408392:	f04b 0201 	orr.w	r2, fp, #1
  408396:	6099      	str	r1, [r3, #8]
  408398:	604a      	str	r2, [r1, #4]
  40839a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40839e:	f003 0301 	and.w	r3, r3, #1
  4083a2:	431f      	orrs	r7, r3
  4083a4:	4640      	mov	r0, r8
  4083a6:	f845 7c04 	str.w	r7, [r5, #-4]
  4083aa:	f7ff feb3 	bl	408114 <__malloc_unlock>
  4083ae:	462e      	mov	r6, r5
  4083b0:	e728      	b.n	408204 <_realloc_r+0xe4>
  4083b2:	4629      	mov	r1, r5
  4083b4:	f7ff fe44 	bl	408040 <memmove>
  4083b8:	e6ff      	b.n	4081ba <_realloc_r+0x9a>
  4083ba:	4629      	mov	r1, r5
  4083bc:	4630      	mov	r0, r6
  4083be:	461c      	mov	r4, r3
  4083c0:	46d1      	mov	r9, sl
  4083c2:	f7ff fe3d 	bl	408040 <memmove>
  4083c6:	e70b      	b.n	4081e0 <_realloc_r+0xc0>
  4083c8:	68ab      	ldr	r3, [r5, #8]
  4083ca:	6083      	str	r3, [r0, #8]
  4083cc:	68eb      	ldr	r3, [r5, #12]
  4083ce:	60c3      	str	r3, [r0, #12]
  4083d0:	2a24      	cmp	r2, #36	; 0x24
  4083d2:	d017      	beq.n	408404 <_realloc_r+0x2e4>
  4083d4:	f100 0310 	add.w	r3, r0, #16
  4083d8:	f105 0210 	add.w	r2, r5, #16
  4083dc:	e6e7      	b.n	4081ae <_realloc_r+0x8e>
  4083de:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4083e2:	f023 0303 	bic.w	r3, r3, #3
  4083e6:	441c      	add	r4, r3
  4083e8:	462e      	mov	r6, r5
  4083ea:	e6f9      	b.n	4081e0 <_realloc_r+0xc0>
  4083ec:	68a9      	ldr	r1, [r5, #8]
  4083ee:	f8ca 1010 	str.w	r1, [sl, #16]
  4083f2:	68e9      	ldr	r1, [r5, #12]
  4083f4:	f8ca 1014 	str.w	r1, [sl, #20]
  4083f8:	2a24      	cmp	r2, #36	; 0x24
  4083fa:	d00c      	beq.n	408416 <_realloc_r+0x2f6>
  4083fc:	3510      	adds	r5, #16
  4083fe:	f10a 0218 	add.w	r2, sl, #24
  408402:	e7b9      	b.n	408378 <_realloc_r+0x258>
  408404:	692b      	ldr	r3, [r5, #16]
  408406:	6103      	str	r3, [r0, #16]
  408408:	696b      	ldr	r3, [r5, #20]
  40840a:	6143      	str	r3, [r0, #20]
  40840c:	f105 0218 	add.w	r2, r5, #24
  408410:	f100 0318 	add.w	r3, r0, #24
  408414:	e6cb      	b.n	4081ae <_realloc_r+0x8e>
  408416:	692a      	ldr	r2, [r5, #16]
  408418:	f8ca 2018 	str.w	r2, [sl, #24]
  40841c:	696a      	ldr	r2, [r5, #20]
  40841e:	f8ca 201c 	str.w	r2, [sl, #28]
  408422:	3518      	adds	r5, #24
  408424:	f10a 0220 	add.w	r2, sl, #32
  408428:	e7a6      	b.n	408378 <_realloc_r+0x258>
  40842a:	4632      	mov	r2, r6
  40842c:	e77f      	b.n	40832e <_realloc_r+0x20e>
  40842e:	4629      	mov	r1, r5
  408430:	4630      	mov	r0, r6
  408432:	9301      	str	r3, [sp, #4]
  408434:	f7ff fe04 	bl	408040 <memmove>
  408438:	9b01      	ldr	r3, [sp, #4]
  40843a:	e77e      	b.n	40833a <_realloc_r+0x21a>
  40843c:	68a9      	ldr	r1, [r5, #8]
  40843e:	f8ca 1010 	str.w	r1, [sl, #16]
  408442:	68e9      	ldr	r1, [r5, #12]
  408444:	f8ca 1014 	str.w	r1, [sl, #20]
  408448:	2a24      	cmp	r2, #36	; 0x24
  40844a:	d003      	beq.n	408454 <_realloc_r+0x334>
  40844c:	3510      	adds	r5, #16
  40844e:	f10a 0218 	add.w	r2, sl, #24
  408452:	e76c      	b.n	40832e <_realloc_r+0x20e>
  408454:	692a      	ldr	r2, [r5, #16]
  408456:	f8ca 2018 	str.w	r2, [sl, #24]
  40845a:	696a      	ldr	r2, [r5, #20]
  40845c:	f8ca 201c 	str.w	r2, [sl, #28]
  408460:	3518      	adds	r5, #24
  408462:	f10a 0220 	add.w	r2, sl, #32
  408466:	e762      	b.n	40832e <_realloc_r+0x20e>
  408468:	204005c0 	.word	0x204005c0

0040846c <_sbrk_r>:
  40846c:	b538      	push	{r3, r4, r5, lr}
  40846e:	4c07      	ldr	r4, [pc, #28]	; (40848c <_sbrk_r+0x20>)
  408470:	2300      	movs	r3, #0
  408472:	4605      	mov	r5, r0
  408474:	4608      	mov	r0, r1
  408476:	6023      	str	r3, [r4, #0]
  408478:	f7fc ffe6 	bl	405448 <_sbrk>
  40847c:	1c43      	adds	r3, r0, #1
  40847e:	d000      	beq.n	408482 <_sbrk_r+0x16>
  408480:	bd38      	pop	{r3, r4, r5, pc}
  408482:	6823      	ldr	r3, [r4, #0]
  408484:	2b00      	cmp	r3, #0
  408486:	d0fb      	beq.n	408480 <_sbrk_r+0x14>
  408488:	602b      	str	r3, [r5, #0]
  40848a:	bd38      	pop	{r3, r4, r5, pc}
  40848c:	2040cb68 	.word	0x2040cb68

00408490 <__sread>:
  408490:	b510      	push	{r4, lr}
  408492:	460c      	mov	r4, r1
  408494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408498:	f000 f9f6 	bl	408888 <_read_r>
  40849c:	2800      	cmp	r0, #0
  40849e:	db03      	blt.n	4084a8 <__sread+0x18>
  4084a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4084a2:	4403      	add	r3, r0
  4084a4:	6523      	str	r3, [r4, #80]	; 0x50
  4084a6:	bd10      	pop	{r4, pc}
  4084a8:	89a3      	ldrh	r3, [r4, #12]
  4084aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4084ae:	81a3      	strh	r3, [r4, #12]
  4084b0:	bd10      	pop	{r4, pc}
  4084b2:	bf00      	nop

004084b4 <__swrite>:
  4084b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4084b8:	4616      	mov	r6, r2
  4084ba:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4084be:	461f      	mov	r7, r3
  4084c0:	05d3      	lsls	r3, r2, #23
  4084c2:	460c      	mov	r4, r1
  4084c4:	4605      	mov	r5, r0
  4084c6:	d507      	bpl.n	4084d8 <__swrite+0x24>
  4084c8:	2200      	movs	r2, #0
  4084ca:	2302      	movs	r3, #2
  4084cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4084d0:	f000 f9c4 	bl	40885c <_lseek_r>
  4084d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4084d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4084dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4084e0:	81a2      	strh	r2, [r4, #12]
  4084e2:	463b      	mov	r3, r7
  4084e4:	4632      	mov	r2, r6
  4084e6:	4628      	mov	r0, r5
  4084e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4084ec:	f000 b8a4 	b.w	408638 <_write_r>

004084f0 <__sseek>:
  4084f0:	b510      	push	{r4, lr}
  4084f2:	460c      	mov	r4, r1
  4084f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4084f8:	f000 f9b0 	bl	40885c <_lseek_r>
  4084fc:	89a3      	ldrh	r3, [r4, #12]
  4084fe:	1c42      	adds	r2, r0, #1
  408500:	bf0e      	itee	eq
  408502:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  408506:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40850a:	6520      	strne	r0, [r4, #80]	; 0x50
  40850c:	81a3      	strh	r3, [r4, #12]
  40850e:	bd10      	pop	{r4, pc}

00408510 <__sclose>:
  408510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408514:	f000 b908 	b.w	408728 <_close_r>

00408518 <__swbuf_r>:
  408518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40851a:	460d      	mov	r5, r1
  40851c:	4614      	mov	r4, r2
  40851e:	4606      	mov	r6, r0
  408520:	b110      	cbz	r0, 408528 <__swbuf_r+0x10>
  408522:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408524:	2b00      	cmp	r3, #0
  408526:	d04b      	beq.n	4085c0 <__swbuf_r+0xa8>
  408528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40852c:	69a3      	ldr	r3, [r4, #24]
  40852e:	60a3      	str	r3, [r4, #8]
  408530:	b291      	uxth	r1, r2
  408532:	0708      	lsls	r0, r1, #28
  408534:	d539      	bpl.n	4085aa <__swbuf_r+0x92>
  408536:	6923      	ldr	r3, [r4, #16]
  408538:	2b00      	cmp	r3, #0
  40853a:	d036      	beq.n	4085aa <__swbuf_r+0x92>
  40853c:	b2ed      	uxtb	r5, r5
  40853e:	0489      	lsls	r1, r1, #18
  408540:	462f      	mov	r7, r5
  408542:	d515      	bpl.n	408570 <__swbuf_r+0x58>
  408544:	6822      	ldr	r2, [r4, #0]
  408546:	6961      	ldr	r1, [r4, #20]
  408548:	1ad3      	subs	r3, r2, r3
  40854a:	428b      	cmp	r3, r1
  40854c:	da1c      	bge.n	408588 <__swbuf_r+0x70>
  40854e:	3301      	adds	r3, #1
  408550:	68a1      	ldr	r1, [r4, #8]
  408552:	1c50      	adds	r0, r2, #1
  408554:	3901      	subs	r1, #1
  408556:	60a1      	str	r1, [r4, #8]
  408558:	6020      	str	r0, [r4, #0]
  40855a:	7015      	strb	r5, [r2, #0]
  40855c:	6962      	ldr	r2, [r4, #20]
  40855e:	429a      	cmp	r2, r3
  408560:	d01a      	beq.n	408598 <__swbuf_r+0x80>
  408562:	89a3      	ldrh	r3, [r4, #12]
  408564:	07db      	lsls	r3, r3, #31
  408566:	d501      	bpl.n	40856c <__swbuf_r+0x54>
  408568:	2d0a      	cmp	r5, #10
  40856a:	d015      	beq.n	408598 <__swbuf_r+0x80>
  40856c:	4638      	mov	r0, r7
  40856e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408570:	6e61      	ldr	r1, [r4, #100]	; 0x64
  408572:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408576:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40857a:	81a2      	strh	r2, [r4, #12]
  40857c:	6822      	ldr	r2, [r4, #0]
  40857e:	6661      	str	r1, [r4, #100]	; 0x64
  408580:	6961      	ldr	r1, [r4, #20]
  408582:	1ad3      	subs	r3, r2, r3
  408584:	428b      	cmp	r3, r1
  408586:	dbe2      	blt.n	40854e <__swbuf_r+0x36>
  408588:	4621      	mov	r1, r4
  40858a:	4630      	mov	r0, r6
  40858c:	f7fe fda4 	bl	4070d8 <_fflush_r>
  408590:	b940      	cbnz	r0, 4085a4 <__swbuf_r+0x8c>
  408592:	6822      	ldr	r2, [r4, #0]
  408594:	2301      	movs	r3, #1
  408596:	e7db      	b.n	408550 <__swbuf_r+0x38>
  408598:	4621      	mov	r1, r4
  40859a:	4630      	mov	r0, r6
  40859c:	f7fe fd9c 	bl	4070d8 <_fflush_r>
  4085a0:	2800      	cmp	r0, #0
  4085a2:	d0e3      	beq.n	40856c <__swbuf_r+0x54>
  4085a4:	f04f 37ff 	mov.w	r7, #4294967295
  4085a8:	e7e0      	b.n	40856c <__swbuf_r+0x54>
  4085aa:	4621      	mov	r1, r4
  4085ac:	4630      	mov	r0, r6
  4085ae:	f7fe fc7f 	bl	406eb0 <__swsetup_r>
  4085b2:	2800      	cmp	r0, #0
  4085b4:	d1f6      	bne.n	4085a4 <__swbuf_r+0x8c>
  4085b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4085ba:	6923      	ldr	r3, [r4, #16]
  4085bc:	b291      	uxth	r1, r2
  4085be:	e7bd      	b.n	40853c <__swbuf_r+0x24>
  4085c0:	f7fe fde2 	bl	407188 <__sinit>
  4085c4:	e7b0      	b.n	408528 <__swbuf_r+0x10>
  4085c6:	bf00      	nop

004085c8 <_wcrtomb_r>:
  4085c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4085ca:	4606      	mov	r6, r0
  4085cc:	b085      	sub	sp, #20
  4085ce:	461f      	mov	r7, r3
  4085d0:	b189      	cbz	r1, 4085f6 <_wcrtomb_r+0x2e>
  4085d2:	4c10      	ldr	r4, [pc, #64]	; (408614 <_wcrtomb_r+0x4c>)
  4085d4:	4d10      	ldr	r5, [pc, #64]	; (408618 <_wcrtomb_r+0x50>)
  4085d6:	6824      	ldr	r4, [r4, #0]
  4085d8:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4085da:	2c00      	cmp	r4, #0
  4085dc:	bf08      	it	eq
  4085de:	462c      	moveq	r4, r5
  4085e0:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4085e4:	47a0      	blx	r4
  4085e6:	1c43      	adds	r3, r0, #1
  4085e8:	d103      	bne.n	4085f2 <_wcrtomb_r+0x2a>
  4085ea:	2200      	movs	r2, #0
  4085ec:	238a      	movs	r3, #138	; 0x8a
  4085ee:	603a      	str	r2, [r7, #0]
  4085f0:	6033      	str	r3, [r6, #0]
  4085f2:	b005      	add	sp, #20
  4085f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4085f6:	460c      	mov	r4, r1
  4085f8:	4906      	ldr	r1, [pc, #24]	; (408614 <_wcrtomb_r+0x4c>)
  4085fa:	4a07      	ldr	r2, [pc, #28]	; (408618 <_wcrtomb_r+0x50>)
  4085fc:	6809      	ldr	r1, [r1, #0]
  4085fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
  408600:	2900      	cmp	r1, #0
  408602:	bf08      	it	eq
  408604:	4611      	moveq	r1, r2
  408606:	4622      	mov	r2, r4
  408608:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40860c:	a901      	add	r1, sp, #4
  40860e:	47a0      	blx	r4
  408610:	e7e9      	b.n	4085e6 <_wcrtomb_r+0x1e>
  408612:	bf00      	nop
  408614:	20400024 	.word	0x20400024
  408618:	20400454 	.word	0x20400454

0040861c <__ascii_wctomb>:
  40861c:	b121      	cbz	r1, 408628 <__ascii_wctomb+0xc>
  40861e:	2aff      	cmp	r2, #255	; 0xff
  408620:	d804      	bhi.n	40862c <__ascii_wctomb+0x10>
  408622:	700a      	strb	r2, [r1, #0]
  408624:	2001      	movs	r0, #1
  408626:	4770      	bx	lr
  408628:	4608      	mov	r0, r1
  40862a:	4770      	bx	lr
  40862c:	238a      	movs	r3, #138	; 0x8a
  40862e:	6003      	str	r3, [r0, #0]
  408630:	f04f 30ff 	mov.w	r0, #4294967295
  408634:	4770      	bx	lr
  408636:	bf00      	nop

00408638 <_write_r>:
  408638:	b570      	push	{r4, r5, r6, lr}
  40863a:	460d      	mov	r5, r1
  40863c:	4c08      	ldr	r4, [pc, #32]	; (408660 <_write_r+0x28>)
  40863e:	4611      	mov	r1, r2
  408640:	4606      	mov	r6, r0
  408642:	461a      	mov	r2, r3
  408644:	4628      	mov	r0, r5
  408646:	2300      	movs	r3, #0
  408648:	6023      	str	r3, [r4, #0]
  40864a:	f7fc f8db 	bl	404804 <_write>
  40864e:	1c43      	adds	r3, r0, #1
  408650:	d000      	beq.n	408654 <_write_r+0x1c>
  408652:	bd70      	pop	{r4, r5, r6, pc}
  408654:	6823      	ldr	r3, [r4, #0]
  408656:	2b00      	cmp	r3, #0
  408658:	d0fb      	beq.n	408652 <_write_r+0x1a>
  40865a:	6033      	str	r3, [r6, #0]
  40865c:	bd70      	pop	{r4, r5, r6, pc}
  40865e:	bf00      	nop
  408660:	2040cb68 	.word	0x2040cb68

00408664 <__register_exitproc>:
  408664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408668:	4d2c      	ldr	r5, [pc, #176]	; (40871c <__register_exitproc+0xb8>)
  40866a:	4606      	mov	r6, r0
  40866c:	6828      	ldr	r0, [r5, #0]
  40866e:	4698      	mov	r8, r3
  408670:	460f      	mov	r7, r1
  408672:	4691      	mov	r9, r2
  408674:	f7ff f948 	bl	407908 <__retarget_lock_acquire_recursive>
  408678:	4b29      	ldr	r3, [pc, #164]	; (408720 <__register_exitproc+0xbc>)
  40867a:	681c      	ldr	r4, [r3, #0]
  40867c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  408680:	2b00      	cmp	r3, #0
  408682:	d03e      	beq.n	408702 <__register_exitproc+0x9e>
  408684:	685a      	ldr	r2, [r3, #4]
  408686:	2a1f      	cmp	r2, #31
  408688:	dc1c      	bgt.n	4086c4 <__register_exitproc+0x60>
  40868a:	f102 0e01 	add.w	lr, r2, #1
  40868e:	b176      	cbz	r6, 4086ae <__register_exitproc+0x4a>
  408690:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  408694:	2401      	movs	r4, #1
  408696:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40869a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40869e:	4094      	lsls	r4, r2
  4086a0:	4320      	orrs	r0, r4
  4086a2:	2e02      	cmp	r6, #2
  4086a4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4086a8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4086ac:	d023      	beq.n	4086f6 <__register_exitproc+0x92>
  4086ae:	3202      	adds	r2, #2
  4086b0:	f8c3 e004 	str.w	lr, [r3, #4]
  4086b4:	6828      	ldr	r0, [r5, #0]
  4086b6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4086ba:	f7ff f927 	bl	40790c <__retarget_lock_release_recursive>
  4086be:	2000      	movs	r0, #0
  4086c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4086c4:	4b17      	ldr	r3, [pc, #92]	; (408724 <__register_exitproc+0xc0>)
  4086c6:	b30b      	cbz	r3, 40870c <__register_exitproc+0xa8>
  4086c8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4086cc:	f7ff f998 	bl	407a00 <malloc>
  4086d0:	4603      	mov	r3, r0
  4086d2:	b1d8      	cbz	r0, 40870c <__register_exitproc+0xa8>
  4086d4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4086d8:	6002      	str	r2, [r0, #0]
  4086da:	2100      	movs	r1, #0
  4086dc:	6041      	str	r1, [r0, #4]
  4086de:	460a      	mov	r2, r1
  4086e0:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4086e4:	f04f 0e01 	mov.w	lr, #1
  4086e8:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4086ec:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4086f0:	2e00      	cmp	r6, #0
  4086f2:	d0dc      	beq.n	4086ae <__register_exitproc+0x4a>
  4086f4:	e7cc      	b.n	408690 <__register_exitproc+0x2c>
  4086f6:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4086fa:	430c      	orrs	r4, r1
  4086fc:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  408700:	e7d5      	b.n	4086ae <__register_exitproc+0x4a>
  408702:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  408706:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40870a:	e7bb      	b.n	408684 <__register_exitproc+0x20>
  40870c:	6828      	ldr	r0, [r5, #0]
  40870e:	f7ff f8fd 	bl	40790c <__retarget_lock_release_recursive>
  408712:	f04f 30ff 	mov.w	r0, #4294967295
  408716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40871a:	bf00      	nop
  40871c:	20400450 	.word	0x20400450
  408720:	00409ad4 	.word	0x00409ad4
  408724:	00407a01 	.word	0x00407a01

00408728 <_close_r>:
  408728:	b538      	push	{r3, r4, r5, lr}
  40872a:	4c07      	ldr	r4, [pc, #28]	; (408748 <_close_r+0x20>)
  40872c:	2300      	movs	r3, #0
  40872e:	4605      	mov	r5, r0
  408730:	4608      	mov	r0, r1
  408732:	6023      	str	r3, [r4, #0]
  408734:	f7fc fea4 	bl	405480 <_close>
  408738:	1c43      	adds	r3, r0, #1
  40873a:	d000      	beq.n	40873e <_close_r+0x16>
  40873c:	bd38      	pop	{r3, r4, r5, pc}
  40873e:	6823      	ldr	r3, [r4, #0]
  408740:	2b00      	cmp	r3, #0
  408742:	d0fb      	beq.n	40873c <_close_r+0x14>
  408744:	602b      	str	r3, [r5, #0]
  408746:	bd38      	pop	{r3, r4, r5, pc}
  408748:	2040cb68 	.word	0x2040cb68

0040874c <_fclose_r>:
  40874c:	b570      	push	{r4, r5, r6, lr}
  40874e:	b159      	cbz	r1, 408768 <_fclose_r+0x1c>
  408750:	4605      	mov	r5, r0
  408752:	460c      	mov	r4, r1
  408754:	b110      	cbz	r0, 40875c <_fclose_r+0x10>
  408756:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408758:	2b00      	cmp	r3, #0
  40875a:	d03c      	beq.n	4087d6 <_fclose_r+0x8a>
  40875c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40875e:	07d8      	lsls	r0, r3, #31
  408760:	d505      	bpl.n	40876e <_fclose_r+0x22>
  408762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408766:	b92b      	cbnz	r3, 408774 <_fclose_r+0x28>
  408768:	2600      	movs	r6, #0
  40876a:	4630      	mov	r0, r6
  40876c:	bd70      	pop	{r4, r5, r6, pc}
  40876e:	89a3      	ldrh	r3, [r4, #12]
  408770:	0599      	lsls	r1, r3, #22
  408772:	d53c      	bpl.n	4087ee <_fclose_r+0xa2>
  408774:	4621      	mov	r1, r4
  408776:	4628      	mov	r0, r5
  408778:	f7fe fc0e 	bl	406f98 <__sflush_r>
  40877c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40877e:	4606      	mov	r6, r0
  408780:	b133      	cbz	r3, 408790 <_fclose_r+0x44>
  408782:	69e1      	ldr	r1, [r4, #28]
  408784:	4628      	mov	r0, r5
  408786:	4798      	blx	r3
  408788:	2800      	cmp	r0, #0
  40878a:	bfb8      	it	lt
  40878c:	f04f 36ff 	movlt.w	r6, #4294967295
  408790:	89a3      	ldrh	r3, [r4, #12]
  408792:	061a      	lsls	r2, r3, #24
  408794:	d422      	bmi.n	4087dc <_fclose_r+0x90>
  408796:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408798:	b141      	cbz	r1, 4087ac <_fclose_r+0x60>
  40879a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40879e:	4299      	cmp	r1, r3
  4087a0:	d002      	beq.n	4087a8 <_fclose_r+0x5c>
  4087a2:	4628      	mov	r0, r5
  4087a4:	f7fe fe16 	bl	4073d4 <_free_r>
  4087a8:	2300      	movs	r3, #0
  4087aa:	6323      	str	r3, [r4, #48]	; 0x30
  4087ac:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4087ae:	b121      	cbz	r1, 4087ba <_fclose_r+0x6e>
  4087b0:	4628      	mov	r0, r5
  4087b2:	f7fe fe0f 	bl	4073d4 <_free_r>
  4087b6:	2300      	movs	r3, #0
  4087b8:	6463      	str	r3, [r4, #68]	; 0x44
  4087ba:	f7fe fd11 	bl	4071e0 <__sfp_lock_acquire>
  4087be:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4087c0:	2200      	movs	r2, #0
  4087c2:	07db      	lsls	r3, r3, #31
  4087c4:	81a2      	strh	r2, [r4, #12]
  4087c6:	d50e      	bpl.n	4087e6 <_fclose_r+0x9a>
  4087c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4087ca:	f7ff f89b 	bl	407904 <__retarget_lock_close_recursive>
  4087ce:	f7fe fd0d 	bl	4071ec <__sfp_lock_release>
  4087d2:	4630      	mov	r0, r6
  4087d4:	bd70      	pop	{r4, r5, r6, pc}
  4087d6:	f7fe fcd7 	bl	407188 <__sinit>
  4087da:	e7bf      	b.n	40875c <_fclose_r+0x10>
  4087dc:	6921      	ldr	r1, [r4, #16]
  4087de:	4628      	mov	r0, r5
  4087e0:	f7fe fdf8 	bl	4073d4 <_free_r>
  4087e4:	e7d7      	b.n	408796 <_fclose_r+0x4a>
  4087e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4087e8:	f7ff f890 	bl	40790c <__retarget_lock_release_recursive>
  4087ec:	e7ec      	b.n	4087c8 <_fclose_r+0x7c>
  4087ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4087f0:	f7ff f88a 	bl	407908 <__retarget_lock_acquire_recursive>
  4087f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4087f8:	2b00      	cmp	r3, #0
  4087fa:	d1bb      	bne.n	408774 <_fclose_r+0x28>
  4087fc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4087fe:	f016 0601 	ands.w	r6, r6, #1
  408802:	d1b1      	bne.n	408768 <_fclose_r+0x1c>
  408804:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408806:	f7ff f881 	bl	40790c <__retarget_lock_release_recursive>
  40880a:	4630      	mov	r0, r6
  40880c:	bd70      	pop	{r4, r5, r6, pc}
  40880e:	bf00      	nop

00408810 <_fstat_r>:
  408810:	b538      	push	{r3, r4, r5, lr}
  408812:	460b      	mov	r3, r1
  408814:	4c07      	ldr	r4, [pc, #28]	; (408834 <_fstat_r+0x24>)
  408816:	4605      	mov	r5, r0
  408818:	4611      	mov	r1, r2
  40881a:	4618      	mov	r0, r3
  40881c:	2300      	movs	r3, #0
  40881e:	6023      	str	r3, [r4, #0]
  408820:	f7fc fe31 	bl	405486 <_fstat>
  408824:	1c43      	adds	r3, r0, #1
  408826:	d000      	beq.n	40882a <_fstat_r+0x1a>
  408828:	bd38      	pop	{r3, r4, r5, pc}
  40882a:	6823      	ldr	r3, [r4, #0]
  40882c:	2b00      	cmp	r3, #0
  40882e:	d0fb      	beq.n	408828 <_fstat_r+0x18>
  408830:	602b      	str	r3, [r5, #0]
  408832:	bd38      	pop	{r3, r4, r5, pc}
  408834:	2040cb68 	.word	0x2040cb68

00408838 <_isatty_r>:
  408838:	b538      	push	{r3, r4, r5, lr}
  40883a:	4c07      	ldr	r4, [pc, #28]	; (408858 <_isatty_r+0x20>)
  40883c:	2300      	movs	r3, #0
  40883e:	4605      	mov	r5, r0
  408840:	4608      	mov	r0, r1
  408842:	6023      	str	r3, [r4, #0]
  408844:	f7fc fe24 	bl	405490 <_isatty>
  408848:	1c43      	adds	r3, r0, #1
  40884a:	d000      	beq.n	40884e <_isatty_r+0x16>
  40884c:	bd38      	pop	{r3, r4, r5, pc}
  40884e:	6823      	ldr	r3, [r4, #0]
  408850:	2b00      	cmp	r3, #0
  408852:	d0fb      	beq.n	40884c <_isatty_r+0x14>
  408854:	602b      	str	r3, [r5, #0]
  408856:	bd38      	pop	{r3, r4, r5, pc}
  408858:	2040cb68 	.word	0x2040cb68

0040885c <_lseek_r>:
  40885c:	b570      	push	{r4, r5, r6, lr}
  40885e:	460d      	mov	r5, r1
  408860:	4c08      	ldr	r4, [pc, #32]	; (408884 <_lseek_r+0x28>)
  408862:	4611      	mov	r1, r2
  408864:	4606      	mov	r6, r0
  408866:	461a      	mov	r2, r3
  408868:	4628      	mov	r0, r5
  40886a:	2300      	movs	r3, #0
  40886c:	6023      	str	r3, [r4, #0]
  40886e:	f7fc fe11 	bl	405494 <_lseek>
  408872:	1c43      	adds	r3, r0, #1
  408874:	d000      	beq.n	408878 <_lseek_r+0x1c>
  408876:	bd70      	pop	{r4, r5, r6, pc}
  408878:	6823      	ldr	r3, [r4, #0]
  40887a:	2b00      	cmp	r3, #0
  40887c:	d0fb      	beq.n	408876 <_lseek_r+0x1a>
  40887e:	6033      	str	r3, [r6, #0]
  408880:	bd70      	pop	{r4, r5, r6, pc}
  408882:	bf00      	nop
  408884:	2040cb68 	.word	0x2040cb68

00408888 <_read_r>:
  408888:	b570      	push	{r4, r5, r6, lr}
  40888a:	460d      	mov	r5, r1
  40888c:	4c08      	ldr	r4, [pc, #32]	; (4088b0 <_read_r+0x28>)
  40888e:	4611      	mov	r1, r2
  408890:	4606      	mov	r6, r0
  408892:	461a      	mov	r2, r3
  408894:	4628      	mov	r0, r5
  408896:	2300      	movs	r3, #0
  408898:	6023      	str	r3, [r4, #0]
  40889a:	f7fb ff95 	bl	4047c8 <_read>
  40889e:	1c43      	adds	r3, r0, #1
  4088a0:	d000      	beq.n	4088a4 <_read_r+0x1c>
  4088a2:	bd70      	pop	{r4, r5, r6, pc}
  4088a4:	6823      	ldr	r3, [r4, #0]
  4088a6:	2b00      	cmp	r3, #0
  4088a8:	d0fb      	beq.n	4088a2 <_read_r+0x1a>
  4088aa:	6033      	str	r3, [r6, #0]
  4088ac:	bd70      	pop	{r4, r5, r6, pc}
  4088ae:	bf00      	nop
  4088b0:	2040cb68 	.word	0x2040cb68

004088b4 <__aeabi_uldivmod>:
  4088b4:	b953      	cbnz	r3, 4088cc <__aeabi_uldivmod+0x18>
  4088b6:	b94a      	cbnz	r2, 4088cc <__aeabi_uldivmod+0x18>
  4088b8:	2900      	cmp	r1, #0
  4088ba:	bf08      	it	eq
  4088bc:	2800      	cmpeq	r0, #0
  4088be:	bf1c      	itt	ne
  4088c0:	f04f 31ff 	movne.w	r1, #4294967295
  4088c4:	f04f 30ff 	movne.w	r0, #4294967295
  4088c8:	f000 b97a 	b.w	408bc0 <__aeabi_idiv0>
  4088cc:	f1ad 0c08 	sub.w	ip, sp, #8
  4088d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4088d4:	f000 f806 	bl	4088e4 <__udivmoddi4>
  4088d8:	f8dd e004 	ldr.w	lr, [sp, #4]
  4088dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4088e0:	b004      	add	sp, #16
  4088e2:	4770      	bx	lr

004088e4 <__udivmoddi4>:
  4088e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4088e8:	468c      	mov	ip, r1
  4088ea:	460d      	mov	r5, r1
  4088ec:	4604      	mov	r4, r0
  4088ee:	9e08      	ldr	r6, [sp, #32]
  4088f0:	2b00      	cmp	r3, #0
  4088f2:	d151      	bne.n	408998 <__udivmoddi4+0xb4>
  4088f4:	428a      	cmp	r2, r1
  4088f6:	4617      	mov	r7, r2
  4088f8:	d96d      	bls.n	4089d6 <__udivmoddi4+0xf2>
  4088fa:	fab2 fe82 	clz	lr, r2
  4088fe:	f1be 0f00 	cmp.w	lr, #0
  408902:	d00b      	beq.n	40891c <__udivmoddi4+0x38>
  408904:	f1ce 0c20 	rsb	ip, lr, #32
  408908:	fa01 f50e 	lsl.w	r5, r1, lr
  40890c:	fa20 fc0c 	lsr.w	ip, r0, ip
  408910:	fa02 f70e 	lsl.w	r7, r2, lr
  408914:	ea4c 0c05 	orr.w	ip, ip, r5
  408918:	fa00 f40e 	lsl.w	r4, r0, lr
  40891c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  408920:	0c25      	lsrs	r5, r4, #16
  408922:	fbbc f8fa 	udiv	r8, ip, sl
  408926:	fa1f f987 	uxth.w	r9, r7
  40892a:	fb0a cc18 	mls	ip, sl, r8, ip
  40892e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  408932:	fb08 f309 	mul.w	r3, r8, r9
  408936:	42ab      	cmp	r3, r5
  408938:	d90a      	bls.n	408950 <__udivmoddi4+0x6c>
  40893a:	19ed      	adds	r5, r5, r7
  40893c:	f108 32ff 	add.w	r2, r8, #4294967295
  408940:	f080 8123 	bcs.w	408b8a <__udivmoddi4+0x2a6>
  408944:	42ab      	cmp	r3, r5
  408946:	f240 8120 	bls.w	408b8a <__udivmoddi4+0x2a6>
  40894a:	f1a8 0802 	sub.w	r8, r8, #2
  40894e:	443d      	add	r5, r7
  408950:	1aed      	subs	r5, r5, r3
  408952:	b2a4      	uxth	r4, r4
  408954:	fbb5 f0fa 	udiv	r0, r5, sl
  408958:	fb0a 5510 	mls	r5, sl, r0, r5
  40895c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  408960:	fb00 f909 	mul.w	r9, r0, r9
  408964:	45a1      	cmp	r9, r4
  408966:	d909      	bls.n	40897c <__udivmoddi4+0x98>
  408968:	19e4      	adds	r4, r4, r7
  40896a:	f100 33ff 	add.w	r3, r0, #4294967295
  40896e:	f080 810a 	bcs.w	408b86 <__udivmoddi4+0x2a2>
  408972:	45a1      	cmp	r9, r4
  408974:	f240 8107 	bls.w	408b86 <__udivmoddi4+0x2a2>
  408978:	3802      	subs	r0, #2
  40897a:	443c      	add	r4, r7
  40897c:	eba4 0409 	sub.w	r4, r4, r9
  408980:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408984:	2100      	movs	r1, #0
  408986:	2e00      	cmp	r6, #0
  408988:	d061      	beq.n	408a4e <__udivmoddi4+0x16a>
  40898a:	fa24 f40e 	lsr.w	r4, r4, lr
  40898e:	2300      	movs	r3, #0
  408990:	6034      	str	r4, [r6, #0]
  408992:	6073      	str	r3, [r6, #4]
  408994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408998:	428b      	cmp	r3, r1
  40899a:	d907      	bls.n	4089ac <__udivmoddi4+0xc8>
  40899c:	2e00      	cmp	r6, #0
  40899e:	d054      	beq.n	408a4a <__udivmoddi4+0x166>
  4089a0:	2100      	movs	r1, #0
  4089a2:	e886 0021 	stmia.w	r6, {r0, r5}
  4089a6:	4608      	mov	r0, r1
  4089a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4089ac:	fab3 f183 	clz	r1, r3
  4089b0:	2900      	cmp	r1, #0
  4089b2:	f040 808e 	bne.w	408ad2 <__udivmoddi4+0x1ee>
  4089b6:	42ab      	cmp	r3, r5
  4089b8:	d302      	bcc.n	4089c0 <__udivmoddi4+0xdc>
  4089ba:	4282      	cmp	r2, r0
  4089bc:	f200 80fa 	bhi.w	408bb4 <__udivmoddi4+0x2d0>
  4089c0:	1a84      	subs	r4, r0, r2
  4089c2:	eb65 0503 	sbc.w	r5, r5, r3
  4089c6:	2001      	movs	r0, #1
  4089c8:	46ac      	mov	ip, r5
  4089ca:	2e00      	cmp	r6, #0
  4089cc:	d03f      	beq.n	408a4e <__udivmoddi4+0x16a>
  4089ce:	e886 1010 	stmia.w	r6, {r4, ip}
  4089d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4089d6:	b912      	cbnz	r2, 4089de <__udivmoddi4+0xfa>
  4089d8:	2701      	movs	r7, #1
  4089da:	fbb7 f7f2 	udiv	r7, r7, r2
  4089de:	fab7 fe87 	clz	lr, r7
  4089e2:	f1be 0f00 	cmp.w	lr, #0
  4089e6:	d134      	bne.n	408a52 <__udivmoddi4+0x16e>
  4089e8:	1beb      	subs	r3, r5, r7
  4089ea:	0c3a      	lsrs	r2, r7, #16
  4089ec:	fa1f fc87 	uxth.w	ip, r7
  4089f0:	2101      	movs	r1, #1
  4089f2:	fbb3 f8f2 	udiv	r8, r3, r2
  4089f6:	0c25      	lsrs	r5, r4, #16
  4089f8:	fb02 3318 	mls	r3, r2, r8, r3
  4089fc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408a00:	fb0c f308 	mul.w	r3, ip, r8
  408a04:	42ab      	cmp	r3, r5
  408a06:	d907      	bls.n	408a18 <__udivmoddi4+0x134>
  408a08:	19ed      	adds	r5, r5, r7
  408a0a:	f108 30ff 	add.w	r0, r8, #4294967295
  408a0e:	d202      	bcs.n	408a16 <__udivmoddi4+0x132>
  408a10:	42ab      	cmp	r3, r5
  408a12:	f200 80d1 	bhi.w	408bb8 <__udivmoddi4+0x2d4>
  408a16:	4680      	mov	r8, r0
  408a18:	1aed      	subs	r5, r5, r3
  408a1a:	b2a3      	uxth	r3, r4
  408a1c:	fbb5 f0f2 	udiv	r0, r5, r2
  408a20:	fb02 5510 	mls	r5, r2, r0, r5
  408a24:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  408a28:	fb0c fc00 	mul.w	ip, ip, r0
  408a2c:	45a4      	cmp	ip, r4
  408a2e:	d907      	bls.n	408a40 <__udivmoddi4+0x15c>
  408a30:	19e4      	adds	r4, r4, r7
  408a32:	f100 33ff 	add.w	r3, r0, #4294967295
  408a36:	d202      	bcs.n	408a3e <__udivmoddi4+0x15a>
  408a38:	45a4      	cmp	ip, r4
  408a3a:	f200 80b8 	bhi.w	408bae <__udivmoddi4+0x2ca>
  408a3e:	4618      	mov	r0, r3
  408a40:	eba4 040c 	sub.w	r4, r4, ip
  408a44:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408a48:	e79d      	b.n	408986 <__udivmoddi4+0xa2>
  408a4a:	4631      	mov	r1, r6
  408a4c:	4630      	mov	r0, r6
  408a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408a52:	f1ce 0420 	rsb	r4, lr, #32
  408a56:	fa05 f30e 	lsl.w	r3, r5, lr
  408a5a:	fa07 f70e 	lsl.w	r7, r7, lr
  408a5e:	fa20 f804 	lsr.w	r8, r0, r4
  408a62:	0c3a      	lsrs	r2, r7, #16
  408a64:	fa25 f404 	lsr.w	r4, r5, r4
  408a68:	ea48 0803 	orr.w	r8, r8, r3
  408a6c:	fbb4 f1f2 	udiv	r1, r4, r2
  408a70:	ea4f 4518 	mov.w	r5, r8, lsr #16
  408a74:	fb02 4411 	mls	r4, r2, r1, r4
  408a78:	fa1f fc87 	uxth.w	ip, r7
  408a7c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  408a80:	fb01 f30c 	mul.w	r3, r1, ip
  408a84:	42ab      	cmp	r3, r5
  408a86:	fa00 f40e 	lsl.w	r4, r0, lr
  408a8a:	d909      	bls.n	408aa0 <__udivmoddi4+0x1bc>
  408a8c:	19ed      	adds	r5, r5, r7
  408a8e:	f101 30ff 	add.w	r0, r1, #4294967295
  408a92:	f080 808a 	bcs.w	408baa <__udivmoddi4+0x2c6>
  408a96:	42ab      	cmp	r3, r5
  408a98:	f240 8087 	bls.w	408baa <__udivmoddi4+0x2c6>
  408a9c:	3902      	subs	r1, #2
  408a9e:	443d      	add	r5, r7
  408aa0:	1aeb      	subs	r3, r5, r3
  408aa2:	fa1f f588 	uxth.w	r5, r8
  408aa6:	fbb3 f0f2 	udiv	r0, r3, r2
  408aaa:	fb02 3310 	mls	r3, r2, r0, r3
  408aae:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408ab2:	fb00 f30c 	mul.w	r3, r0, ip
  408ab6:	42ab      	cmp	r3, r5
  408ab8:	d907      	bls.n	408aca <__udivmoddi4+0x1e6>
  408aba:	19ed      	adds	r5, r5, r7
  408abc:	f100 38ff 	add.w	r8, r0, #4294967295
  408ac0:	d26f      	bcs.n	408ba2 <__udivmoddi4+0x2be>
  408ac2:	42ab      	cmp	r3, r5
  408ac4:	d96d      	bls.n	408ba2 <__udivmoddi4+0x2be>
  408ac6:	3802      	subs	r0, #2
  408ac8:	443d      	add	r5, r7
  408aca:	1aeb      	subs	r3, r5, r3
  408acc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  408ad0:	e78f      	b.n	4089f2 <__udivmoddi4+0x10e>
  408ad2:	f1c1 0720 	rsb	r7, r1, #32
  408ad6:	fa22 f807 	lsr.w	r8, r2, r7
  408ada:	408b      	lsls	r3, r1
  408adc:	fa05 f401 	lsl.w	r4, r5, r1
  408ae0:	ea48 0303 	orr.w	r3, r8, r3
  408ae4:	fa20 fe07 	lsr.w	lr, r0, r7
  408ae8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  408aec:	40fd      	lsrs	r5, r7
  408aee:	ea4e 0e04 	orr.w	lr, lr, r4
  408af2:	fbb5 f9fc 	udiv	r9, r5, ip
  408af6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  408afa:	fb0c 5519 	mls	r5, ip, r9, r5
  408afe:	fa1f f883 	uxth.w	r8, r3
  408b02:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  408b06:	fb09 f408 	mul.w	r4, r9, r8
  408b0a:	42ac      	cmp	r4, r5
  408b0c:	fa02 f201 	lsl.w	r2, r2, r1
  408b10:	fa00 fa01 	lsl.w	sl, r0, r1
  408b14:	d908      	bls.n	408b28 <__udivmoddi4+0x244>
  408b16:	18ed      	adds	r5, r5, r3
  408b18:	f109 30ff 	add.w	r0, r9, #4294967295
  408b1c:	d243      	bcs.n	408ba6 <__udivmoddi4+0x2c2>
  408b1e:	42ac      	cmp	r4, r5
  408b20:	d941      	bls.n	408ba6 <__udivmoddi4+0x2c2>
  408b22:	f1a9 0902 	sub.w	r9, r9, #2
  408b26:	441d      	add	r5, r3
  408b28:	1b2d      	subs	r5, r5, r4
  408b2a:	fa1f fe8e 	uxth.w	lr, lr
  408b2e:	fbb5 f0fc 	udiv	r0, r5, ip
  408b32:	fb0c 5510 	mls	r5, ip, r0, r5
  408b36:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  408b3a:	fb00 f808 	mul.w	r8, r0, r8
  408b3e:	45a0      	cmp	r8, r4
  408b40:	d907      	bls.n	408b52 <__udivmoddi4+0x26e>
  408b42:	18e4      	adds	r4, r4, r3
  408b44:	f100 35ff 	add.w	r5, r0, #4294967295
  408b48:	d229      	bcs.n	408b9e <__udivmoddi4+0x2ba>
  408b4a:	45a0      	cmp	r8, r4
  408b4c:	d927      	bls.n	408b9e <__udivmoddi4+0x2ba>
  408b4e:	3802      	subs	r0, #2
  408b50:	441c      	add	r4, r3
  408b52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  408b56:	eba4 0408 	sub.w	r4, r4, r8
  408b5a:	fba0 8902 	umull	r8, r9, r0, r2
  408b5e:	454c      	cmp	r4, r9
  408b60:	46c6      	mov	lr, r8
  408b62:	464d      	mov	r5, r9
  408b64:	d315      	bcc.n	408b92 <__udivmoddi4+0x2ae>
  408b66:	d012      	beq.n	408b8e <__udivmoddi4+0x2aa>
  408b68:	b156      	cbz	r6, 408b80 <__udivmoddi4+0x29c>
  408b6a:	ebba 030e 	subs.w	r3, sl, lr
  408b6e:	eb64 0405 	sbc.w	r4, r4, r5
  408b72:	fa04 f707 	lsl.w	r7, r4, r7
  408b76:	40cb      	lsrs	r3, r1
  408b78:	431f      	orrs	r7, r3
  408b7a:	40cc      	lsrs	r4, r1
  408b7c:	6037      	str	r7, [r6, #0]
  408b7e:	6074      	str	r4, [r6, #4]
  408b80:	2100      	movs	r1, #0
  408b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408b86:	4618      	mov	r0, r3
  408b88:	e6f8      	b.n	40897c <__udivmoddi4+0x98>
  408b8a:	4690      	mov	r8, r2
  408b8c:	e6e0      	b.n	408950 <__udivmoddi4+0x6c>
  408b8e:	45c2      	cmp	sl, r8
  408b90:	d2ea      	bcs.n	408b68 <__udivmoddi4+0x284>
  408b92:	ebb8 0e02 	subs.w	lr, r8, r2
  408b96:	eb69 0503 	sbc.w	r5, r9, r3
  408b9a:	3801      	subs	r0, #1
  408b9c:	e7e4      	b.n	408b68 <__udivmoddi4+0x284>
  408b9e:	4628      	mov	r0, r5
  408ba0:	e7d7      	b.n	408b52 <__udivmoddi4+0x26e>
  408ba2:	4640      	mov	r0, r8
  408ba4:	e791      	b.n	408aca <__udivmoddi4+0x1e6>
  408ba6:	4681      	mov	r9, r0
  408ba8:	e7be      	b.n	408b28 <__udivmoddi4+0x244>
  408baa:	4601      	mov	r1, r0
  408bac:	e778      	b.n	408aa0 <__udivmoddi4+0x1bc>
  408bae:	3802      	subs	r0, #2
  408bb0:	443c      	add	r4, r7
  408bb2:	e745      	b.n	408a40 <__udivmoddi4+0x15c>
  408bb4:	4608      	mov	r0, r1
  408bb6:	e708      	b.n	4089ca <__udivmoddi4+0xe6>
  408bb8:	f1a8 0802 	sub.w	r8, r8, #2
  408bbc:	443d      	add	r5, r7
  408bbe:	e72b      	b.n	408a18 <__udivmoddi4+0x134>

00408bc0 <__aeabi_idiv0>:
  408bc0:	4770      	bx	lr
  408bc2:	bf00      	nop
  408bc4:	454c4449 	.word	0x454c4449
  408bc8:	00000000 	.word	0x00000000
  408bcc:	51726d54 	.word	0x51726d54
  408bd0:	00000000 	.word	0x00000000
  408bd4:	20726d54 	.word	0x20726d54
  408bd8:	00637653 	.word	0x00637653

00408bdc <__FUNCTION__.11635>:
  408bdc:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
  408bec:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
  408bfc:	00005d64 61766e49 2064696c 54434f49     d]..Invalid IOCT
  408c0c:	6f63204c 6e616d6d 000a2164 0000000d     L command!......

00408c1c <__FUNCTION__.9901>:
  408c1c:	5f666968 646e6573 00000000              hif_send....

00408c28 <__FUNCTION__.9911>:
  408c28:	5f666968 00727369                       hif_isr.

00408c30 <__FUNCTION__.9917>:
  408c30:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00408c40 <__FUNCTION__.9932>:
  408c40:	5f666968 65636572 00657669              hif_receive.

00408c4c <__FUNCTION__.9947>:
  408c4c:	5f666968 69676572 72657473 0062635f     hif_register_cb.
  408c5c:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
  408c6c:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
  408c7c:	0a6c6961 00000000 66696828 64612029     ail.....(hif) ad
  408c8c:	73657264 75622073 61662073 000a6c69     dress bus fail..
  408c9c:	66696828 6f432029 70757272 20646574     (hif) Corrupted 
  408cac:	6b636170 53207465 20657a69 7525203d     packet Size = %u
  408cbc:	204c3c20 7525203d 2047202c 7525203d      <L = %u, G = %u
  408ccc:	504f202c 25203d20 3e583230 0000000a     , OP = %02X>....
  408cdc:	66696828 6e692029 696c6176 72672064     (hif) invalid gr
  408cec:	2070756f 000a4449 66696828 6f682029     oup ID..(hif) ho
  408cfc:	61207473 64207070 276e6469 65732074     st app didn't se
  408d0c:	58522074 6e6f4420 00000a65 66696828     t RX Done...(hif
  408d1c:	72572029 20676e6f 657a6953 0000000a     ) Wrong Size....
  408d2c:	66696828 61462029 2065736c 65746e69     (hif) False inte
  408d3c:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
  408d4c:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
  408d5c:	7265746e 74707572 67657220 0000000a     nterrupt reg....
  408d6c:	66696828 41462029 74204c49 6177206f     (hif) FAIL to wa
  408d7c:	7075656b 65687420 69686320 00000a70     keup the chip...
  408d8c:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
  408d9c:	656c646e 746e6920 75727265 25207470     ndle interrupt %
  408dac:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
  408dbc:	66696820 6365725f 65766965 6e49203a      hif_receive: In
  408dcc:	696c6176 72612064 656d7567 000a746e     valid argument..
  408ddc:	20505041 75716552 65747365 69532064     APP Requested Si
  408dec:	6920657a 616c2073 72656772 61687420     ze is larger tha
  408dfc:	6874206e 65722065 65766963 75622064     n the recived bu
  408e0c:	72656666 7a697320 253c2065 253c3e64     ffer size <%d><%
  408e1c:	000a3e64 20505041 75716552 65747365     d>..APP Requeste
  408e2c:	64412064 73657264 65622073 646e6f79     d Address beyond
  408e3c:	65687420 63657220 64657669 66756220      the recived buf
  408e4c:	20726566 72646461 20737365 20646e61     fer address and 
  408e5c:	676e656c 000a6874 20705247 6425203f     length..GRp ? %d
  408e6c:	0000000a 46494828 69614629 6f74206c     ....(HIF)Fail to
  408e7c:	6b617720 74207075 63206568 0a706968      wakup the chip.
  408e8c:	00000000                                ....

00408e90 <__FUNCTION__.9874>:
  408e90:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00408e9c <__FUNCTION__.9898>:
  408e9c:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00408eac <__FUNCTION__.9926>:
  408eac:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
  408ebc:	0063735f 50504128 4e492829 00294f46     _sc.(APP)(INFO).
  408ecc:	666e6f43 7463696c 49206465 20222050     Conflicted IP " 
  408edc:	252e7525 75252e75 2075252e 000a2022     %u.%u.%u.%u " ..
  408eec:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
  408efc:	000a6425 2079654b 6e207369 7620746f     %d..Key is not v
  408f0c:	64696c61 0000000a 61766e49 2064696c     alid....Invalid 
  408f1c:	0a79654b 00000000 44495353 4e454c20     Key.....SSID LEN
  408f2c:	564e4920 44494c41 0000000a 49204843      INVALID....CH I
  408f3c:	4c41564e 000a4449 61766e49 2064696c     NVALID..Invalid 
  408f4c:	20706557 2079656b 65646e69 64252078     Wep key index %d
  408f5c:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
  408f6c:	2079656b 676e656c 25206874 00000a64     key length %d...
  408f7c:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
  408f8c:	656c2079 6874676e 0000000a 65646e75     y length....unde
  408f9c:	656e6966 65732064 79742063 000a6570     fined sec type..
  408fac:	6d726946 65726177 72657620 3a202020     Firmware ver   :
  408fbc:	2e752520 252e7525 00000a75 206e694d      %u.%u.%u...Min 
  408fcc:	76697264 76207265 3a207265 2e752520     driver ver : %u.
  408fdc:	252e7525 00000a75 72727543 69726420     %u.%u...Curr dri
  408fec:	20726576 3a726576 2e752520 252e7525     ver ver: %u.%u.%
  408ffc:	00000a75 6d73694d 68637461 72694620     u...Mismatch Fir
  40900c:	7277616d 65562065 6f697372 00000a6e     mawre Version...

0040901c <__FUNCTION__.9711>:
  40901c:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

0040902c <__FUNCTION__.9805>:
  40902c:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
  40903c:	74206465 6564206f 696e692d 6c616974     ed to de-initial
  40904c:	0a657a69 00000000 6f727245 68772072     ize.....Error wh
  40905c:	20656c69 74697277 20676e69 0a676572     ile writing reg.
  40906c:	00000000 6f727245 68772072 20656c69     ....Error while 
  40907c:	64616572 20676e69 0a676572 00000000     reading reg.....
  40908c:	20737542 6f727265 31282072 57202e29     Bus error (1). W
  40909c:	20656b61 66207075 656c6961 00000a64     ake up failed...
  4090ac:	20737542 6f727265 32282072 57202e29     Bus error (2). W
  4090bc:	20656b61 66207075 656c6961 00000a64     ake up failed...
  4090cc:	636f6c63 7320736b 6c6c6974 46464f20     clocks still OFF
  4090dc:	6157202e 7520656b 61662070 64656c69     . Wake up failed
  4090ec:	0000000a 3a676572 2f207825 20782520     ....reg:%x / %x 
  4090fc:	0000000a                                ....

00409100 <__FUNCTION__.9792>:
  409100:	645f6d6e 695f7672 0074696e              nm_drv_init.

0040910c <__FUNCTION__.9799>:
  40910c:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
  40911c:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
  40912c:	6965645f 2074696e 6c696166 0000000a     _deinit fail....
  40913c:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
  40914c:	73616c66 69642068 6c626173 61662065     flash disable fa
  40915c:	000a6c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
  40916c:	6c696166 696e6920 75622074 00000a73     fail init bus...
  40917c:	6c696166 74206465 6e65206f 656c6261     failed to enable
  40918c:	746e6920 75727265 2e737470 00000a2e      interrupts.....
  40919c:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
  4091ac:	6e69206c 62207469 000a7375 70696843     l init bus..Chip
  4091bc:	20444920 0a786c25 00000000               ID %lx.....

004091c8 <__FUNCTION__.9176>:
  4091c8:	5f697073 00646d63                       spi_cmd.

004091d0 <__FUNCTION__.9184>:
  4091d0:	5f697073 5f646d63 00707372              spi_cmd_rsp.

004091dc <__FUNCTION__.9200>:
  4091dc:	5f697073 61746164 6165725f 00000064     spi_data_read...

004091ec <__FUNCTION__.9215>:
  4091ec:	5f697073 61746164 6972775f 00006574     spi_data_write..

004091fc <__FUNCTION__.9225>:
  4091fc:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0040920c <__FUNCTION__.9233>:
  40920c:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0040921c <__FUNCTION__.9242>:
  40921c:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0040922c <__FUNCTION__.9250>:
  40922c:	735f6d6e 725f6970 00646165              nm_spi_read.

00409238 <__FUNCTION__.9267>:
  409238:	735f6d6e 695f6970 0074696e              nm_spi_init.

00409244 <crc7_syndrome_table>:
  409244:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
  409254:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
  409264:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
  409274:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
  409284:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
  409294:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
  4092a4:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
  4092b4:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
  4092c4:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
  4092d4:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
  4092e4:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
  4092f4:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
  409304:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
  409314:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
  409324:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
  409334:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
  409344:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  409354:	6e692064 6e726574 72206c61 20646165     d internal read 
  409364:	746f7270 6c6f636f 74697720 52432068     protocol with CR
  409374:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
  409384:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
  409394:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  4093a4:	6e692064 6e726574 72206c61 20646165     d internal read 
  4093b4:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
  4093c4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  4093d4:	6e692064 6e726574 77206c61 65746972     d internal write
  4093e4:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
  4093f4:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  409404:	206c6961 20646d63 64616572 69686320     ail cmd read chi
  409414:	64692070 0a2e2e2e 00000000 696d6e5b     p id........[nmi
  409424:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  409434:	72202c64 20646165 636f6c62 2528206b     d, read block (%
  409444:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
  409454:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  409464:	65722064 6e6f7073 202c6573 64616572     d response, read
  409474:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
  409484:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  409494:	656c6961 6c622064 206b636f 61746164     ailed block data
  4094a4:	61657220 2e2e2e64 0000000a 696d6e5b      read.......[nmi
  4094b4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  4094c4:	77202c64 65746972 6f6c6220 28206b63     d, write block (
  4094d4:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
  4094e4:	69707320 203a5d20 6c696146 63206465      spi ]: Failed c
  4094f4:	7220646d 6f707365 2c65736e 69727720     md response, wri
  409504:	62206574 6b636f6c 30252820 2e297838     te block (%08x).
  409514:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  409524:	656c6961 61642064 62206174 6b636f6c     ailed data block
  409534:	646d6320 69727720 202c6574 20737562      cmd write, bus 
  409544:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
  409554:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
  409564:	62206174 6b636f6c 69727720 202c6574     ta block write, 
  409574:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
  409584:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  409594:	61642064 62206174 6b636f6c 63726320     d data block crc
  4095a4:	69727720 202c6574 20737562 6f727265      write, bus erro
  4095b4:	2e2e2e72 0000000a 696d6e5b 69707320     r.......[nmi spi
  4095c4:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
  4095d4:	61746164 69727720 2e2e6574 00000a2e     data write......
  4095e4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  4095f4:	6d632064 72772064 2c657469 73756220     d cmd write, bus
  409604:	72726520 2e2e726f 00000a2e 696d6e5b      error......[nmi
  409614:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  409624:	65722064 6e6f7073 72206573 2c646165     d response read,
  409634:	73756220 72726520 2e2e726f 00000a2e      bus error......
  409644:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  409654:	61642064 72206174 6f707365 2065736e     d data response 
  409664:	64616572 7562202c 72652073 2e726f72     read, bus error.
  409674:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  409684:	656c6961 61642064 72206174 6f707365     ailed data respo
  409694:	2065736e 64616572 282e2e2e 78323025     nse read...(%02x
  4096a4:	00000a29 696d6e5b 69707320 46203a5d     )...[nmi spi]: F
  4096b4:	656c6961 61642064 62206174 6b636f6c     ailed data block
  4096c4:	61657220 62202c64 65207375 726f7272      read, bus error
  4096d4:	0a2e2e2e 00000000 696d6e5b 69707320     ........[nmi spi
  4096e4:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
  4096f4:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
  409704:	65207375 726f7272 0a2e2e2e 00000000     us error........
  409714:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  409724:	6d632064 72202c64 20646165 20676572     d cmd, read reg 
  409734:	38302528 2e2e2978 00000a2e 696d6e5b     (%08x)......[nmi
  409744:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  409754:	65722064 6e6f7073 202c6573 64616572     d response, read
  409764:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
  409774:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  409784:	61642064 72206174 2e646165 000a2e2e     d data read.....
  409794:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  4097a4:	6d632064 77202c64 65746972 67657220     d cmd, write reg
  4097b4:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
  4097c4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  4097d4:	65722064 6e6f7073 202c6573 74697277     d response, writ
  4097e4:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
  4097f4:	00000000 52524528 75432952 6e657272     ....(ERRR)Curren
  409804:	253c2074 000a3e64 57202d2d 31434e49     t <%d>..-- WINC1
  409814:	20303035 74616577 20726568 65696c63     500 weather clie
  409824:	6520746e 706d6178 2d20656c 2d0a0d2d     nt example --..-
  409834:	4153202d 3037454d 4c50582d 2d2d2044     - SAME70-XPLD --
  409844:	2d2d0a0d 6d6f4320 656c6970 4d203a64     ..-- Compiled: M
  409854:	32207961 30322039 32203931 32323a32     ay 29 2019 22:22
  409864:	2032303a 0a0d2d2d 00000000 69666957     :02 --......Wifi
  409874:	00000000 6c696146 74206465 7263206f     ....Failed to cr
  409884:	65746165 66695720 61742069 0a0d6b73     eate Wifi task..
  409894:	00000000 63656661 00000000 6c696146     ....afec....Fail
  4098a4:	74206465 7263206f 65746165 73657420     ed to create tes
  4098b4:	66612074 74206365 0d6b7361 0000000a     t afec task.....
  4098c4:	6f736572 5f65766c 203a6263 49207325     resolve_cb: %s I
  4098d4:	64612050 73657264 73692073 2e642520     P address is %d.
  4098e4:	252e6425 64252e64 0a0d0a0d 00000000     %d.%d.%d........
  4098f4:	6b636f73 6d5f7465 635f6773 656e6e6f     socket_msg_conne
  409904:	000a7463 20544547 5448202f 312f5054     ct..GET / HTTP/1
  409914:	0a0d312e 63634120 3a747065 2a2f2a20     .1.. Accept: */*
  409924:	0a0d0a0d 00000000 646e6573 00000a20     ........send ...
  409934:	6b636f73 635f7465 63203a62 656e6e6f     socket_cb: conne
  409944:	65207463 726f7272 000a0d21 6b636f73     ct error!...sock
  409954:	635f7465 72203a62 20766365 6f727265     et_cb: recv erro
  409964:	0a0d2172 00000000 6e69616d 326d203a     r!......main: m2
  409974:	69775f6d 695f6966 2074696e 6c6c6163     m_wifi_init call
  409984:	72726520 2821726f 0d296425 0000000a      error!(%d).....
  409994:	72646e41 4164696f 00000050 6e69616d     AndroidAP...main
  4099a4:	6f63203a 63656e6e 676e6974 206f7420     : connecting to 
  4099b4:	69466957 20504120 2e2e7325 000a0d2e     WiFi AP %s......
  4099c4:	6e757262 7063616f 00000063 2e323931     brunoacpc...192.
  4099d4:	2e383631 312e3334 00003239 74656e49     168.43.192..Inet
  4099e4:	6f746120 203a206e 00006425 6b636f73      aton : %d..sock
  4099f4:	69207465 2074696e 0000000a 6e69616d     et init ....main
  409a04:	6166203a 64656c69 206f7420 61657263     : failed to crea
  409a14:	54206574 63205043 6e65696c 6f732074     te TCP client so
  409a24:	74656b63 72726520 0d21726f 0000000a     cket error!.....
  409a34:	6b636f73 63207465 656e6e6f 6e697463     socket connectin
  409a44:	00000a67 6f727265 00000a72 63617473     g...error...stac
  409a54:	766f206b 6c667265 2520776f 73252078     k overflow %x %s
  409a64:	00000a0d 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
  409a74:	4649575f 4f435f49 43454e4e 0d444554     _WIFI_CONNECTED.
  409a84:	0000000a 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
  409a94:	4649575f 49445f49 4e4f4353 5443454e     _WIFI_DISCONNECT
  409aa4:	0a0d4445 00000000 69666977 3a62635f     ED......wifi_cb:
  409ab4:	20504920 72646461 20737365 25207369      IP address is %
  409ac4:	75252e75 2e75252e 0a0d7525 00000000     u.%u.%u.%u......

00409ad4 <_global_impure_ptr>:
  409ad4:	20400028 33323130 37363534 42413938     (.@ 0123456789AB
  409ae4:	46454443 00000000 33323130 37363534     CDEF....01234567
  409af4:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  409b04:	0000296c                                l)..

00409b08 <blanks.7217>:
  409b08:	20202020 20202020 20202020 20202020                     

00409b18 <zeroes.7218>:
  409b18:	30303030 30303030 30303030 30303030     0000000000000000
  409b28:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00409b38 <_ctype_>:
  409b38:	20202000 20202020 28282020 20282828     .         ((((( 
  409b48:	20202020 20202020 20202020 20202020                     
  409b58:	10108820 10101010 10101010 10101010      ...............
  409b68:	04040410 04040404 10040404 10101010     ................
  409b78:	41411010 41414141 01010101 01010101     ..AAAAAA........
  409b88:	01010101 01010101 01010101 10101010     ................
  409b98:	42421010 42424242 02020202 02020202     ..BBBBBB........
  409ba8:	02020202 02020202 02020202 10101010     ................
  409bb8:	00000020 00000000 00000000 00000000      ...............
	...

00409c3c <_init>:
  409c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409c3e:	bf00      	nop
  409c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409c42:	bc08      	pop	{r3}
  409c44:	469e      	mov	lr, r3
  409c46:	4770      	bx	lr

00409c48 <__init_array_start>:
  409c48:	00406f79 	.word	0x00406f79

00409c4c <__frame_dummy_init_array_entry>:
  409c4c:	00400165                                e.@.

00409c50 <_fini>:
  409c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409c52:	bf00      	nop
  409c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409c56:	bc08      	pop	{r3}
  409c58:	469e      	mov	lr, r3
  409c5a:	4770      	bx	lr

00409c5c <__fini_array_start>:
  409c5c:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <egstrNmBusCapabilities>:
20400010:	1000 0000                                   ....

20400014 <clk_status_reg_adr>:
20400014:	000f 0000                                   ....

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <tcp_client_socket>:
20400020:	00ff 0000                                   ....

20400024 <_impure_ptr>:
20400024:	0028 2040                                   (.@ 

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	cb44 2040                                   D.@ 

20400454 <__global_locale>:
20400454:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400474:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400494:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400514:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400534:	861d 0040 7f71 0040 0000 0000 9b38 0040     ..@.q.@.....8.@.
20400544:	9b34 0040 9928 0040 9928 0040 9928 0040     4.@.(.@.(.@.(.@.
20400554:	9928 0040 9928 0040 9928 0040 9928 0040     (.@.(.@.(.@.(.@.
20400564:	9928 0040 9928 0040 ffff ffff ffff ffff     (.@.(.@.........
20400574:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040059c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005c0 <__malloc_av_>:
	...
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 
204009b8:	09b0 2040 09b0 2040 09b8 2040 09b8 2040     ..@ ..@ ..@ ..@ 

204009c8 <__malloc_sbrk_base>:
204009c8:	ffff ffff                                   ....

204009cc <__malloc_trim_threshold>:
204009cc:	0000 0002                                   ....
